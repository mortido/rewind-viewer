// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use crate::vector2f.fbs::*;
use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod rewind_viewer {

  use crate::vector2f.fbs::*;
  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod fbs {

  use crate::vector2f.fbs::*;
  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_LAYER_ORIGIN: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_LAYER_ORIGIN: i8 = 8;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_LAYER_ORIGIN: [LayerOrigin; 9] = [
  LayerOrigin::GAME,
  LayerOrigin::LEFT_TOP,
  LayerOrigin::LEFT_CENTER,
  LayerOrigin::LEFT_BOTTOM,
  LayerOrigin::RIGHT_TOP,
  LayerOrigin::RIGHT_CENTER,
  LayerOrigin::RIGHT_BOTTOM,
  LayerOrigin::TOP_CENTER,
  LayerOrigin::BOTTOM_CENTER,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct LayerOrigin(pub i8);
#[allow(non_upper_case_globals)]
impl LayerOrigin {
  pub const GAME: Self = Self(0);
  pub const LEFT_TOP: Self = Self(1);
  pub const LEFT_CENTER: Self = Self(2);
  pub const LEFT_BOTTOM: Self = Self(3);
  pub const RIGHT_TOP: Self = Self(4);
  pub const RIGHT_CENTER: Self = Self(5);
  pub const RIGHT_BOTTOM: Self = Self(6);
  pub const TOP_CENTER: Self = Self(7);
  pub const BOTTOM_CENTER: Self = Self(8);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 8;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::GAME,
    Self::LEFT_TOP,
    Self::LEFT_CENTER,
    Self::LEFT_BOTTOM,
    Self::RIGHT_TOP,
    Self::RIGHT_CENTER,
    Self::RIGHT_BOTTOM,
    Self::TOP_CENTER,
    Self::BOTTOM_CENTER,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::GAME => Some("GAME"),
      Self::LEFT_TOP => Some("LEFT_TOP"),
      Self::LEFT_CENTER => Some("LEFT_CENTER"),
      Self::LEFT_BOTTOM => Some("LEFT_BOTTOM"),
      Self::RIGHT_TOP => Some("RIGHT_TOP"),
      Self::RIGHT_CENTER => Some("RIGHT_CENTER"),
      Self::RIGHT_BOTTOM => Some("RIGHT_BOTTOM"),
      Self::TOP_CENTER => Some("TOP_CENTER"),
      Self::BOTTOM_CENTER => Some("BOTTOM_CENTER"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for LayerOrigin {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for LayerOrigin {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for LayerOrigin {
    type Output = LayerOrigin;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for LayerOrigin {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for LayerOrigin {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for LayerOrigin {}
pub enum LayerOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Layer<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Layer<'a> {
  type Inner = Layer<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Layer<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_NAME: flatbuffers::VOffsetT = 6;
  pub const VT_USE_PERMANENT_FRAME: flatbuffers::VOffsetT = 8;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Layer { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LayerArgs<'args>
  ) -> flatbuffers::WIPOffset<Layer<'bldr>> {
    let mut builder = LayerBuilder::new(_fbb);
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_id(args.id);
    builder.add_origin(args.origin);
    builder.add_use_permanent_frame(args.use_permanent_frame);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(Layer::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Layer::VT_NAME, None)}
  }
  #[inline]
  pub fn use_permanent_frame(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Layer::VT_USE_PERMANENT_FRAME, Some(false)).unwrap()}
  }
  #[inline]
  pub fn origin(&self) -> LayerOrigin {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<LayerOrigin>(Layer::VT_ORIGIN, Some(LayerOrigin::GAME)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Layer<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<bool>("use_permanent_frame", Self::VT_USE_PERMANENT_FRAME, false)?
     .visit_field::<LayerOrigin>("origin", Self::VT_ORIGIN, false)?
     .finish();
    Ok(())
  }
}
pub struct LayerArgs<'a> {
    pub id: u32,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub use_permanent_frame: bool,
    pub origin: LayerOrigin,
}
impl<'a> Default for LayerArgs<'a> {
  #[inline]
  fn default() -> Self {
    LayerArgs {
      id: 0,
      name: None,
      use_permanent_frame: false,
      origin: LayerOrigin::GAME,
    }
  }
}

pub struct LayerBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LayerBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: u32) {
    self.fbb_.push_slot::<u32>(Layer::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Layer::VT_NAME, name);
  }
  #[inline]
  pub fn add_use_permanent_frame(&mut self, use_permanent_frame: bool) {
    self.fbb_.push_slot::<bool>(Layer::VT_USE_PERMANENT_FRAME, use_permanent_frame, false);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: LayerOrigin) {
    self.fbb_.push_slot::<LayerOrigin>(Layer::VT_ORIGIN, origin, LayerOrigin::GAME);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LayerBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LayerBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Layer<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Layer<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Layer");
      ds.field("id", &self.id());
      ds.field("name", &self.name());
      ds.field("use_permanent_frame", &self.use_permanent_frame());
      ds.field("origin", &self.origin());
      ds.finish()
  }
}
pub enum MapOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Map<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Map<'a> {
  type Inner = Map<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Map<'a> {
  pub const VT_POSITION: flatbuffers::VOffsetT = 4;
  pub const VT_SIZE_: flatbuffers::VOffsetT = 6;
  pub const VT_X_GRID: flatbuffers::VOffsetT = 8;
  pub const VT_Y_GRID: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Map { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MapArgs<'args>
  ) -> flatbuffers::WIPOffset<Map<'bldr>> {
    let mut builder = MapBuilder::new(_fbb);
    if let Some(x) = args.size_ { builder.add_size_(x); }
    if let Some(x) = args.position { builder.add_position(x); }
    builder.add_y_grid(args.y_grid);
    builder.add_x_grid(args.x_grid);
    builder.finish()
  }


  #[inline]
  pub fn position(&self) -> &'a Vector2f {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Vector2f>(Map::VT_POSITION, None).unwrap()}
  }
  #[inline]
  pub fn size_(&self) -> &'a Vector2f {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Vector2f>(Map::VT_SIZE_, None).unwrap()}
  }
  #[inline]
  pub fn x_grid(&self) -> u16 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u16>(Map::VT_X_GRID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn y_grid(&self) -> u16 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u16>(Map::VT_Y_GRID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Map<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<Vector2f>("position", Self::VT_POSITION, true)?
     .visit_field::<Vector2f>("size_", Self::VT_SIZE_, true)?
     .visit_field::<u16>("x_grid", Self::VT_X_GRID, false)?
     .visit_field::<u16>("y_grid", Self::VT_Y_GRID, false)?
     .finish();
    Ok(())
  }
}
pub struct MapArgs<'a> {
    pub position: Option<&'a Vector2f>,
    pub size_: Option<&'a Vector2f>,
    pub x_grid: u16,
    pub y_grid: u16,
}
impl<'a> Default for MapArgs<'a> {
  #[inline]
  fn default() -> Self {
    MapArgs {
      position: None, // required field
      size_: None, // required field
      x_grid: 0,
      y_grid: 0,
    }
  }
}

pub struct MapBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MapBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_position(&mut self, position: &Vector2f) {
    self.fbb_.push_slot_always::<&Vector2f>(Map::VT_POSITION, position);
  }
  #[inline]
  pub fn add_size_(&mut self, size_: &Vector2f) {
    self.fbb_.push_slot_always::<&Vector2f>(Map::VT_SIZE_, size_);
  }
  #[inline]
  pub fn add_x_grid(&mut self, x_grid: u16) {
    self.fbb_.push_slot::<u16>(Map::VT_X_GRID, x_grid, 0);
  }
  #[inline]
  pub fn add_y_grid(&mut self, y_grid: u16) {
    self.fbb_.push_slot::<u16>(Map::VT_Y_GRID, y_grid, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MapBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MapBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Map<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, Map::VT_POSITION,"position");
    self.fbb_.required(o, Map::VT_SIZE_,"size_");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Map<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Map");
      ds.field("position", &self.position());
      ds.field("size_", &self.size_());
      ds.field("x_grid", &self.x_grid());
      ds.field("y_grid", &self.y_grid());
      ds.finish()
  }
}
pub enum EndFrameOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EndFrame<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EndFrame<'a> {
  type Inner = EndFrame<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EndFrame<'a> {

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EndFrame { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    _args: &'args EndFrameArgs
  ) -> flatbuffers::WIPOffset<EndFrame<'bldr>> {
    let mut builder = EndFrameBuilder::new(_fbb);
    builder.finish()
  }

}

impl flatbuffers::Verifiable for EndFrame<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .finish();
    Ok(())
  }
}
pub struct EndFrameArgs {
}
impl<'a> Default for EndFrameArgs {
  #[inline]
  fn default() -> Self {
    EndFrameArgs {
    }
  }
}

pub struct EndFrameBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EndFrameBuilder<'a, 'b, A> {
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EndFrameBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EndFrameBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EndFrame<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EndFrame<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EndFrame");
      ds.finish()
  }
}
}  // pub mod fbs
}  // pub mod rewind_viewer

