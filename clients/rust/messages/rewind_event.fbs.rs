// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use crate::vector2f.fbs::*;
use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod rewind_viewer {

  use crate::vector2f.fbs::*;
  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod fbs {

  use crate::vector2f.fbs::*;
  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum MousePathOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MousePath<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MousePath<'a> {
  type Inner = MousePath<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MousePath<'a> {
  pub const VT_POINTS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MousePath { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MousePathArgs<'args>
  ) -> flatbuffers::WIPOffset<MousePath<'bldr>> {
    let mut builder = MousePathBuilder::new(_fbb);
    if let Some(x) = args.points { builder.add_points(x); }
    builder.finish()
  }


  #[inline]
  pub fn points(&self) -> Option<flatbuffers::Vector<'a, Vector2f>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Vector2f>>>(MousePath::VT_POINTS, None)}
  }
}

impl flatbuffers::Verifiable for MousePath<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Vector2f>>>("points", Self::VT_POINTS, false)?
     .finish();
    Ok(())
  }
}
pub struct MousePathArgs<'a> {
    pub points: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Vector2f>>>,
}
impl<'a> Default for MousePathArgs<'a> {
  #[inline]
  fn default() -> Self {
    MousePathArgs {
      points: None,
    }
  }
}

pub struct MousePathBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MousePathBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_points(&mut self, points: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Vector2f>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MousePath::VT_POINTS, points);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MousePathBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MousePathBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MousePath<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MousePath<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MousePath");
      ds.field("points", &self.points());
      ds.finish()
  }
}
pub enum RewindEventOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct RewindEvent<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RewindEvent<'a> {
  type Inner = RewindEvent<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> RewindEvent<'a> {
  pub const VT_KEY: flatbuffers::VOffsetT = 4;
  pub const VT_MOUSE_PATHS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    RewindEvent { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args RewindEventArgs<'args>
  ) -> flatbuffers::WIPOffset<RewindEvent<'bldr>> {
    let mut builder = RewindEventBuilder::new(_fbb);
    if let Some(x) = args.mouse_paths { builder.add_mouse_paths(x); }
    builder.add_key(args.key);
    builder.finish()
  }


  #[inline]
  pub fn key(&self) -> i8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i8>(RewindEvent::VT_KEY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn mouse_paths(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MousePath<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MousePath>>>>(RewindEvent::VT_MOUSE_PATHS, None)}
  }
}

impl flatbuffers::Verifiable for RewindEvent<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i8>("key", Self::VT_KEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<MousePath>>>>("mouse_paths", Self::VT_MOUSE_PATHS, false)?
     .finish();
    Ok(())
  }
}
pub struct RewindEventArgs<'a> {
    pub key: i8,
    pub mouse_paths: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MousePath<'a>>>>>,
}
impl<'a> Default for RewindEventArgs<'a> {
  #[inline]
  fn default() -> Self {
    RewindEventArgs {
      key: 0,
      mouse_paths: None,
    }
  }
}

pub struct RewindEventBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> RewindEventBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_key(&mut self, key: i8) {
    self.fbb_.push_slot::<i8>(RewindEvent::VT_KEY, key, 0);
  }
  #[inline]
  pub fn add_mouse_paths(&mut self, mouse_paths: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<MousePath<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RewindEvent::VT_MOUSE_PATHS, mouse_paths);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> RewindEventBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    RewindEventBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RewindEvent<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for RewindEvent<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("RewindEvent");
      ds.field("key", &self.key());
      ds.field("mouse_paths", &self.mouse_paths());
      ds.finish()
  }
}
pub enum RewindEventListOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct RewindEventList<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RewindEventList<'a> {
  type Inner = RewindEventList<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> RewindEventList<'a> {
  pub const VT_EVENTS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    RewindEventList { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args RewindEventListArgs<'args>
  ) -> flatbuffers::WIPOffset<RewindEventList<'bldr>> {
    let mut builder = RewindEventListBuilder::new(_fbb);
    if let Some(x) = args.events { builder.add_events(x); }
    builder.finish()
  }


  #[inline]
  pub fn events(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<RewindEvent<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<RewindEvent>>>>(RewindEventList::VT_EVENTS, None)}
  }
}

impl flatbuffers::Verifiable for RewindEventList<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<RewindEvent>>>>("events", Self::VT_EVENTS, false)?
     .finish();
    Ok(())
  }
}
pub struct RewindEventListArgs<'a> {
    pub events: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<RewindEvent<'a>>>>>,
}
impl<'a> Default for RewindEventListArgs<'a> {
  #[inline]
  fn default() -> Self {
    RewindEventListArgs {
      events: None,
    }
  }
}

pub struct RewindEventListBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> RewindEventListBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_events(&mut self, events: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<RewindEvent<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RewindEventList::VT_EVENTS, events);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> RewindEventListBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    RewindEventListBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RewindEventList<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for RewindEventList<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("RewindEventList");
      ds.field("events", &self.events());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `RewindEventList`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_rewind_event_list_unchecked`.
pub fn root_as_rewind_event_list(buf: &[u8]) -> Result<RewindEventList, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<RewindEventList>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `RewindEventList` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_rewind_event_list_unchecked`.
pub fn size_prefixed_root_as_rewind_event_list(buf: &[u8]) -> Result<RewindEventList, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<RewindEventList>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `RewindEventList` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_rewind_event_list_unchecked`.
pub fn root_as_rewind_event_list_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<RewindEventList<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<RewindEventList<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `RewindEventList` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_rewind_event_list_unchecked`.
pub fn size_prefixed_root_as_rewind_event_list_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<RewindEventList<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<RewindEventList<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a RewindEventList and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `RewindEventList`.
pub unsafe fn root_as_rewind_event_list_unchecked(buf: &[u8]) -> RewindEventList {
  flatbuffers::root_unchecked::<RewindEventList>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed RewindEventList and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `RewindEventList`.
pub unsafe fn size_prefixed_root_as_rewind_event_list_unchecked(buf: &[u8]) -> RewindEventList {
  flatbuffers::size_prefixed_root_unchecked::<RewindEventList>(buf)
}
#[inline]
pub fn finish_rewind_event_list_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<RewindEventList<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_rewind_event_list_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<RewindEventList<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod fbs
}  // pub mod rewind_viewer

