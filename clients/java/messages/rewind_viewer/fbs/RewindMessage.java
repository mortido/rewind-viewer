// automatically generated by the FlatBuffers compiler, do not modify

package rewind_viewer.fbs;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class RewindMessage extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static RewindMessage getRootAsRewindMessage(ByteBuffer _bb) { return getRootAsRewindMessage(_bb, new RewindMessage()); }
  public static RewindMessage getRootAsRewindMessage(ByteBuffer _bb, RewindMessage obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public RewindMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte commandType() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Table command(Table obj) { int o = __offset(6); return o != 0 ? __union(obj, o + bb_pos) : null; }

  public static int createRewindMessage(FlatBufferBuilder builder,
      byte commandType,
      int commandOffset) {
    builder.startTable(2);
    RewindMessage.addCommand(builder, commandOffset);
    RewindMessage.addCommandType(builder, commandType);
    return RewindMessage.endRewindMessage(builder);
  }

  public static void startRewindMessage(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addCommandType(FlatBufferBuilder builder, byte commandType) { builder.addByte(0, commandType, 0); }
  public static void addCommand(FlatBufferBuilder builder, int commandOffset) { builder.addOffset(1, commandOffset, 0); }
  public static int endRewindMessage(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 6);  // command
    return o;
  }
  public static void finishRewindMessageBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedRewindMessageBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public RewindMessage get(int j) { return get(new RewindMessage(), j); }
    public RewindMessage get(RewindMessage obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public RewindMessageT unpack() {
    RewindMessageT _o = new RewindMessageT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(RewindMessageT _o) {
    rewind_viewer.fbs.CommandUnion _oCommand = new rewind_viewer.fbs.CommandUnion();
    byte _oCommandType = commandType();
    _oCommand.setType(_oCommandType);
    Table _oCommandValue;
    switch (_oCommandType) {
      case rewind_viewer.fbs.Command.Arc:
        _oCommandValue = command(new rewind_viewer.fbs.Arc());
        _oCommand.setValue(_oCommandValue != null ? ((rewind_viewer.fbs.Arc) _oCommandValue).unpack() : null);
        break;
      case rewind_viewer.fbs.Command.CameraView:
        _oCommandValue = command(new rewind_viewer.fbs.CameraView());
        _oCommand.setValue(_oCommandValue != null ? ((rewind_viewer.fbs.CameraView) _oCommandValue).unpack() : null);
        break;
      case rewind_viewer.fbs.Command.Circle:
        _oCommandValue = command(new rewind_viewer.fbs.Circle());
        _oCommand.setValue(_oCommandValue != null ? ((rewind_viewer.fbs.Circle) _oCommandValue).unpack() : null);
        break;
      case rewind_viewer.fbs.Command.CircleSegment:
        _oCommandValue = command(new rewind_viewer.fbs.CircleSegment());
        _oCommand.setValue(_oCommandValue != null ? ((rewind_viewer.fbs.CircleSegment) _oCommandValue).unpack() : null);
        break;
      case rewind_viewer.fbs.Command.LogText:
        _oCommandValue = command(new rewind_viewer.fbs.LogText());
        _oCommand.setValue(_oCommandValue != null ? ((rewind_viewer.fbs.LogText) _oCommandValue).unpack() : null);
        break;
      case rewind_viewer.fbs.Command.Options:
        _oCommandValue = command(new rewind_viewer.fbs.Options());
        _oCommand.setValue(_oCommandValue != null ? ((rewind_viewer.fbs.Options) _oCommandValue).unpack() : null);
        break;
      case rewind_viewer.fbs.Command.Polyline:
        _oCommandValue = command(new rewind_viewer.fbs.Polyline());
        _oCommand.setValue(_oCommandValue != null ? ((rewind_viewer.fbs.Polyline) _oCommandValue).unpack() : null);
        break;
      case rewind_viewer.fbs.Command.Popup:
        _oCommandValue = command(new rewind_viewer.fbs.Popup());
        _oCommand.setValue(_oCommandValue != null ? ((rewind_viewer.fbs.Popup) _oCommandValue).unpack() : null);
        break;
      case rewind_viewer.fbs.Command.PopupRound:
        _oCommandValue = command(new rewind_viewer.fbs.PopupRound());
        _oCommand.setValue(_oCommandValue != null ? ((rewind_viewer.fbs.PopupRound) _oCommandValue).unpack() : null);
        break;
      case rewind_viewer.fbs.Command.Rectangle:
        _oCommandValue = command(new rewind_viewer.fbs.Rectangle());
        _oCommand.setValue(_oCommandValue != null ? ((rewind_viewer.fbs.Rectangle) _oCommandValue).unpack() : null);
        break;
      case rewind_viewer.fbs.Command.Tiles:
        _oCommandValue = command(new rewind_viewer.fbs.Tiles());
        _oCommand.setValue(_oCommandValue != null ? ((rewind_viewer.fbs.Tiles) _oCommandValue).unpack() : null);
        break;
      case rewind_viewer.fbs.Command.Triangle:
        _oCommandValue = command(new rewind_viewer.fbs.Triangle());
        _oCommand.setValue(_oCommandValue != null ? ((rewind_viewer.fbs.Triangle) _oCommandValue).unpack() : null);
        break;
      case rewind_viewer.fbs.Command.EndFrame:
        _oCommandValue = command(new rewind_viewer.fbs.EndFrame());
        _oCommand.setValue(_oCommandValue != null ? ((rewind_viewer.fbs.EndFrame) _oCommandValue).unpack() : null);
        break;
      default: break;
    }
    _o.setCommand(_oCommand);
  }
  public static int pack(FlatBufferBuilder builder, RewindMessageT _o) {
    if (_o == null) return 0;
    byte _commandType = _o.getCommand() == null ? rewind_viewer.fbs.Command.NONE : _o.getCommand().getType();
    int _command = _o.getCommand() == null ? 0 : rewind_viewer.fbs.CommandUnion.pack(builder, _o.getCommand());
    return createRewindMessage(
      builder,
      _commandType,
      _command);
  }
}

