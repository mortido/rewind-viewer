// automatically generated by the FlatBuffers compiler, do not modify

package rewind_viewer.fbs;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class IntInput extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static IntInput getRootAsIntInput(ByteBuffer _bb) { return getRootAsIntInput(_bb, new IntInput()); }
  public static IntInput getRootAsIntInput(ByteBuffer _bb, IntInput obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public IntInput __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int defaultValue() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int minValue() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int maxValue() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createIntInput(FlatBufferBuilder builder,
      int defaultValue,
      int minValue,
      int maxValue) {
    builder.startTable(3);
    IntInput.addMaxValue(builder, maxValue);
    IntInput.addMinValue(builder, minValue);
    IntInput.addDefaultValue(builder, defaultValue);
    return IntInput.endIntInput(builder);
  }

  public static void startIntInput(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addDefaultValue(FlatBufferBuilder builder, int defaultValue) { builder.addInt(0, defaultValue, 0); }
  public static void addMinValue(FlatBufferBuilder builder, int minValue) { builder.addInt(1, minValue, 0); }
  public static void addMaxValue(FlatBufferBuilder builder, int maxValue) { builder.addInt(2, maxValue, 0); }
  public static int endIntInput(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public IntInput get(int j) { return get(new IntInput(), j); }
    public IntInput get(IntInput obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

