// automatically generated by the FlatBuffers compiler, do not modify

package rewind_viewer.fbs;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Primitives extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Primitives getRootAsPrimitives(ByteBuffer _bb) { return getRootAsPrimitives(_bb, new Primitives()); }
  public static Primitives getRootAsPrimitives(ByteBuffer _bb, Primitives obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Primitives __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public rewind_viewer.fbs.PrimitiveStorage storage() { return storage(new rewind_viewer.fbs.PrimitiveStorage()); }
  public rewind_viewer.fbs.PrimitiveStorage storage(rewind_viewer.fbs.PrimitiveStorage obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public rewind_viewer.fbs.PrimitiveIndices indices(int j) { return indices(new rewind_viewer.fbs.PrimitiveIndices(), j); }
  public rewind_viewer.fbs.PrimitiveIndices indices(rewind_viewer.fbs.PrimitiveIndices obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int indicesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public rewind_viewer.fbs.PrimitiveIndices.Vector indicesVector() { return indicesVector(new rewind_viewer.fbs.PrimitiveIndices.Vector()); }
  public rewind_viewer.fbs.PrimitiveIndices.Vector indicesVector(rewind_viewer.fbs.PrimitiveIndices.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createPrimitives(FlatBufferBuilder builder,
      int storageOffset,
      int indicesOffset) {
    builder.startTable(2);
    Primitives.addIndices(builder, indicesOffset);
    Primitives.addStorage(builder, storageOffset);
    return Primitives.endPrimitives(builder);
  }

  public static void startPrimitives(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addStorage(FlatBufferBuilder builder, int storageOffset) { builder.addOffset(0, storageOffset, 0); }
  public static void addIndices(FlatBufferBuilder builder, int indicesOffset) { builder.addOffset(1, indicesOffset, 0); }
  public static int createIndicesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startIndicesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endPrimitives(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // storage
    builder.required(o, 6);  // indices
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Primitives get(int j) { return get(new Primitives(), j); }
    public Primitives get(Primitives obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

