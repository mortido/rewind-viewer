// automatically generated by the FlatBuffers compiler, do not modify

package rewind_viewer.fbs;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Tiles extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Tiles getRootAsTiles(ByteBuffer _bb) { return getRootAsTiles(_bb, new Tiles()); }
  public static Tiles getRootAsTiles(ByteBuffer _bb, Tiles obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Tiles __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public rewind_viewer.fbs.Vector2f position() { return position(new rewind_viewer.fbs.Vector2f()); }
  public rewind_viewer.fbs.Vector2f position(rewind_viewer.fbs.Vector2f obj) { int o = __offset(4); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public rewind_viewer.fbs.Vector2f cellSize() { return cellSize(new rewind_viewer.fbs.Vector2f()); }
  public rewind_viewer.fbs.Vector2f cellSize(rewind_viewer.fbs.Vector2f obj) { int o = __offset(6); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public int rowSize() { int o = __offset(8); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public long colors(int j) { int o = __offset(10); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int colorsLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public IntVector colorsVector() { return colorsVector(new IntVector()); }
  public IntVector colorsVector(IntVector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer colorsAsByteBuffer() { return __vector_as_bytebuffer(10, 4); }
  public ByteBuffer colorsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 4); }

  public static void startTiles(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addPosition(FlatBufferBuilder builder, int positionOffset) { builder.addStruct(0, positionOffset, 0); }
  public static void addCellSize(FlatBufferBuilder builder, int cellSizeOffset) { builder.addStruct(1, cellSizeOffset, 0); }
  public static void addRowSize(FlatBufferBuilder builder, int rowSize) { builder.addShort(2, (short) rowSize, (short) 0); }
  public static void addColors(FlatBufferBuilder builder, int colorsOffset) { builder.addOffset(3, colorsOffset, 0); }
  public static int createColorsVector(FlatBufferBuilder builder, long[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt((int) data[i]); return builder.endVector(); }
  public static void startColorsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endTiles(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // position
    builder.required(o, 6);  // cell_size
    builder.required(o, 10);  // colors
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Tiles get(int j) { return get(new Tiles(), j); }
    public Tiles get(Tiles obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

