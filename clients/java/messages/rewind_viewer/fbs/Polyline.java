// automatically generated by the FlatBuffers compiler, do not modify

package rewind_viewer.fbs;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Polyline extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Polyline getRootAsPolyline(ByteBuffer _bb) { return getRootAsPolyline(_bb, new Polyline()); }
  public static Polyline getRootAsPolyline(ByteBuffer _bb, Polyline obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Polyline __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public rewind_viewer.fbs.Color color() { return color(new rewind_viewer.fbs.Color()); }
  public rewind_viewer.fbs.Color color(rewind_viewer.fbs.Color obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public rewind_viewer.fbs.Vector2f points(int j) { return points(new rewind_viewer.fbs.Vector2f(), j); }
  public rewind_viewer.fbs.Vector2f points(rewind_viewer.fbs.Vector2f obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o) + j * 8, bb) : null; }
  public int pointsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public rewind_viewer.fbs.Vector2f.Vector pointsVector() { return pointsVector(new rewind_viewer.fbs.Vector2f.Vector()); }
  public rewind_viewer.fbs.Vector2f.Vector pointsVector(rewind_viewer.fbs.Vector2f.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 8, bb) : null; }

  public static int createPolyline(FlatBufferBuilder builder,
      int colorOffset,
      int pointsOffset) {
    builder.startTable(2);
    Polyline.addPoints(builder, pointsOffset);
    Polyline.addColor(builder, colorOffset);
    return Polyline.endPolyline(builder);
  }

  public static void startPolyline(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addColor(FlatBufferBuilder builder, int colorOffset) { builder.addOffset(0, colorOffset, 0); }
  public static void addPoints(FlatBufferBuilder builder, int pointsOffset) { builder.addOffset(1, pointsOffset, 0); }
  public static void startPointsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 4); }
  public static int endPolyline(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 6);  // points
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Polyline get(int j) { return get(new Polyline(), j); }
    public Polyline get(Polyline obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public PolylineT unpack() {
    PolylineT _o = new PolylineT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(PolylineT _o) {
    if (color() != null) _o.setColor(color().unpack());
    else _o.setColor(null);
    rewind_viewer.fbs.Vector2fT[] _oPoints = new rewind_viewer.fbs.Vector2fT[pointsLength()];
    for (int _j = 0; _j < pointsLength(); ++_j) {_oPoints[_j] = (points(_j) != null ? points(_j).unpack() : null);}
    _o.setPoints(_oPoints);
  }
  public static int pack(FlatBufferBuilder builder, PolylineT _o) {
    if (_o == null) return 0;
    int _color = _o.getColor() == null ? 0 : rewind_viewer.fbs.Color.pack(builder, _o.getColor());
    int _points = 0;
    rewind_viewer.fbs.Vector2fT[] _oPoints = _o.getPoints();
    if (_oPoints != null) {
      int _unused_offset = 0;
      startPointsVector(builder, _oPoints.length);
      for (int _j = _oPoints.length - 1; _j >=0; _j--) { _unused_offset = rewind_viewer.fbs.Vector2f.pack(builder, _oPoints[_j]);}
      _points = builder.endVector();
    }
    return createPolyline(
      builder,
      _color,
      _points);
  }
}

