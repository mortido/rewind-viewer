// automatically generated by the FlatBuffers compiler, do not modify

package rewind_viewer.fbs;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Subscribe extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Subscribe getRootAsSubscribe(ByteBuffer _bb) { return getRootAsSubscribe(_bb, new Subscribe()); }
  public static Subscribe getRootAsSubscribe(ByteBuffer _bb, Subscribe obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Subscribe __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte key() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public String name() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public boolean continuous() { int o = __offset(8); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean captureMouse() { int o = __offset(10); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createSubscribe(FlatBufferBuilder builder,
      byte key,
      int nameOffset,
      boolean continuous,
      boolean captureMouse) {
    builder.startTable(4);
    Subscribe.addName(builder, nameOffset);
    Subscribe.addCaptureMouse(builder, captureMouse);
    Subscribe.addContinuous(builder, continuous);
    Subscribe.addKey(builder, key);
    return Subscribe.endSubscribe(builder);
  }

  public static void startSubscribe(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addKey(FlatBufferBuilder builder, byte key) { builder.addByte(0, key, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(1, nameOffset, 0); }
  public static void addContinuous(FlatBufferBuilder builder, boolean continuous) { builder.addBoolean(2, continuous, false); }
  public static void addCaptureMouse(FlatBufferBuilder builder, boolean captureMouse) { builder.addBoolean(3, captureMouse, false); }
  public static int endSubscribe(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 6);  // name
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Subscribe get(int j) { return get(new Subscribe(), j); }
    public Subscribe get(Subscribe obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

