// automatically generated by the FlatBuffers compiler, do not modify

package rewind_viewer.fbs;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class BoolInput extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static BoolInput getRootAsBoolInput(ByteBuffer _bb) { return getRootAsBoolInput(_bb, new BoolInput()); }
  public static BoolInput getRootAsBoolInput(ByteBuffer _bb, BoolInput obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public BoolInput __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public boolean defaultValue() { int o = __offset(4); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createBoolInput(FlatBufferBuilder builder,
      boolean defaultValue) {
    builder.startTable(1);
    BoolInput.addDefaultValue(builder, defaultValue);
    return BoolInput.endBoolInput(builder);
  }

  public static void startBoolInput(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addDefaultValue(FlatBufferBuilder builder, boolean defaultValue) { builder.addBoolean(0, defaultValue, false); }
  public static int endBoolInput(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public BoolInput get(int j) { return get(new BoolInput(), j); }
    public BoolInput get(BoolInput obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

