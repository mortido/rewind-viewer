// automatically generated by the FlatBuffers compiler, do not modify

package rewind_viewer.fbs;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Triangle extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Triangle getRootAsTriangle(ByteBuffer _bb) { return getRootAsTriangle(_bb, new Triangle()); }
  public static Triangle getRootAsTriangle(ByteBuffer _bb, Triangle obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Triangle __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public rewind_viewer.fbs.Color color() { return color(new rewind_viewer.fbs.Color()); }
  public rewind_viewer.fbs.Color color(rewind_viewer.fbs.Color obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public rewind_viewer.fbs.Vector2f points(int j) { return points(new rewind_viewer.fbs.Vector2f(), j); }
  public rewind_viewer.fbs.Vector2f points(rewind_viewer.fbs.Vector2f obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o) + j * 8, bb) : null; }
  public int pointsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public rewind_viewer.fbs.Vector2f.Vector pointsVector() { return pointsVector(new rewind_viewer.fbs.Vector2f.Vector()); }
  public rewind_viewer.fbs.Vector2f.Vector pointsVector(rewind_viewer.fbs.Vector2f.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 8, bb) : null; }

  public static int createTriangle(FlatBufferBuilder builder,
      int colorOffset,
      int pointsOffset) {
    builder.startTable(2);
    Triangle.addPoints(builder, pointsOffset);
    Triangle.addColor(builder, colorOffset);
    return Triangle.endTriangle(builder);
  }

  public static void startTriangle(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addColor(FlatBufferBuilder builder, int colorOffset) { builder.addOffset(0, colorOffset, 0); }
  public static void addPoints(FlatBufferBuilder builder, int pointsOffset) { builder.addOffset(1, pointsOffset, 0); }
  public static void startPointsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 4); }
  public static int endTriangle(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 6);  // points
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Triangle get(int j) { return get(new Triangle(), j); }
    public Triangle get(Triangle obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

