// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rewind_viewer.fbs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ColorPoint : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ColorPoint GetRootAsColorPoint(ByteBuffer _bb) { return GetRootAsColorPoint(_bb, new ColorPoint()); }
  public static ColorPoint GetRootAsColorPoint(ByteBuffer _bb, ColorPoint obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ColorPoint __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Color { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public rewind_viewer.fbs.Vector2f? Position { get { int o = __p.__offset(6); return o != 0 ? (rewind_viewer.fbs.Vector2f?)(new rewind_viewer.fbs.Vector2f()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartColorPoint(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddColor(FlatBufferBuilder builder, uint color) { builder.AddUint(0, color, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<rewind_viewer.fbs.Vector2f> positionOffset) { builder.AddStruct(1, positionOffset.Value, 0); }
  public static Offset<rewind_viewer.fbs.ColorPoint> EndColorPoint(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 6);  // position
    return new Offset<rewind_viewer.fbs.ColorPoint>(o);
  }
}


static public class ColorPointVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Color*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Position*/, 8 /*rewind_viewer.fbs.Vector2f*/, 4, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
