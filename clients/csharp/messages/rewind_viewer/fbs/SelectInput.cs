// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rewind_viewer.fbs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SelectInput : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static SelectInput GetRootAsSelectInput(ByteBuffer _bb) { return GetRootAsSelectInput(_bb, new SelectInput()); }
  public static SelectInput GetRootAsSelectInput(ByteBuffer _bb, SelectInput obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SelectInput __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Options(int j) { int o = __p.__offset(4); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int OptionsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ushort SelectedOption { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }

  public static Offset<rewind_viewer.fbs.SelectInput> CreateSelectInput(FlatBufferBuilder builder,
      VectorOffset optionsOffset = default(VectorOffset),
      ushort selected_option = 0) {
    builder.StartTable(2);
    SelectInput.AddOptions(builder, optionsOffset);
    SelectInput.AddSelectedOption(builder, selected_option);
    return SelectInput.EndSelectInput(builder);
  }

  public static void StartSelectInput(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddOptions(FlatBufferBuilder builder, VectorOffset optionsOffset) { builder.AddOffset(0, optionsOffset.Value, 0); }
  public static VectorOffset CreateOptionsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOptionsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOptionsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOptionsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOptionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSelectedOption(FlatBufferBuilder builder, ushort selectedOption) { builder.AddUshort(1, selectedOption, 0); }
  public static Offset<rewind_viewer.fbs.SelectInput> EndSelectInput(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // options
    return new Offset<rewind_viewer.fbs.SelectInput>(o);
  }
}


static public class SelectInputVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfStrings(tablePos, 4 /*Options*/, true)
      && verifier.VerifyField(tablePos, 6 /*SelectedOption*/, 2 /*ushort*/, 2, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
