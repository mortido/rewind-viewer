// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rewind_viewer.fbs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Primitives : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Primitives GetRootAsPrimitives(ByteBuffer _bb) { return GetRootAsPrimitives(_bb, new Primitives()); }
  public static Primitives GetRootAsPrimitives(ByteBuffer _bb, Primitives obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Primitives __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public rewind_viewer.fbs.PrimitiveStorage? Storage { get { int o = __p.__offset(4); return o != 0 ? (rewind_viewer.fbs.PrimitiveStorage?)(new rewind_viewer.fbs.PrimitiveStorage()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public rewind_viewer.fbs.PrimitiveIndices? Indices(int j) { int o = __p.__offset(6); return o != 0 ? (rewind_viewer.fbs.PrimitiveIndices?)(new rewind_viewer.fbs.PrimitiveIndices()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int IndicesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<rewind_viewer.fbs.Primitives> CreatePrimitives(FlatBufferBuilder builder,
      Offset<rewind_viewer.fbs.PrimitiveStorage> storageOffset = default(Offset<rewind_viewer.fbs.PrimitiveStorage>),
      VectorOffset indicesOffset = default(VectorOffset)) {
    builder.StartTable(2);
    Primitives.AddIndices(builder, indicesOffset);
    Primitives.AddStorage(builder, storageOffset);
    return Primitives.EndPrimitives(builder);
  }

  public static void StartPrimitives(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddStorage(FlatBufferBuilder builder, Offset<rewind_viewer.fbs.PrimitiveStorage> storageOffset) { builder.AddOffset(0, storageOffset.Value, 0); }
  public static void AddIndices(FlatBufferBuilder builder, VectorOffset indicesOffset) { builder.AddOffset(1, indicesOffset.Value, 0); }
  public static VectorOffset CreateIndicesVector(FlatBufferBuilder builder, Offset<rewind_viewer.fbs.PrimitiveIndices>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateIndicesVectorBlock(FlatBufferBuilder builder, Offset<rewind_viewer.fbs.PrimitiveIndices>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIndicesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<rewind_viewer.fbs.PrimitiveIndices>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIndicesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<rewind_viewer.fbs.PrimitiveIndices>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartIndicesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<rewind_viewer.fbs.Primitives> EndPrimitives(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // storage
    builder.Required(o, 6);  // indices
    return new Offset<rewind_viewer.fbs.Primitives>(o);
  }
}


static public class PrimitivesVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyTable(tablePos, 4 /*Storage*/, rewind_viewer.fbs.PrimitiveStorageVerify.Verify, true)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*Indices*/, rewind_viewer.fbs.PrimitiveIndicesVerify.Verify, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
