// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rewind_viewer.fbs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct LogText : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static LogText GetRootAsLogText(ByteBuffer _bb) { return GetRootAsLogText(_bb, new LogText()); }
  public static LogText GetRootAsLogText(ByteBuffer _bb, LogText obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LogText __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Text { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTextBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTextArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<rewind_viewer.fbs.LogText> CreateLogText(FlatBufferBuilder builder,
      StringOffset textOffset = default(StringOffset)) {
    builder.StartTable(1);
    LogText.AddText(builder, textOffset);
    return LogText.EndLogText(builder);
  }

  public static void StartLogText(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddText(FlatBufferBuilder builder, StringOffset textOffset) { builder.AddOffset(0, textOffset.Value, 0); }
  public static Offset<rewind_viewer.fbs.LogText> EndLogText(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // text
    return new Offset<rewind_viewer.fbs.LogText>(o);
  }
  public LogTextT UnPack() {
    var _o = new LogTextT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LogTextT _o) {
    _o.Text = this.Text;
  }
  public static Offset<rewind_viewer.fbs.LogText> Pack(FlatBufferBuilder builder, LogTextT _o) {
    if (_o == null) return default(Offset<rewind_viewer.fbs.LogText>);
    var _text = _o.Text == null ? default(StringOffset) : builder.CreateString(_o.Text);
    return CreateLogText(
      builder,
      _text);
  }
}

public class LogTextT
{
  public string Text { get; set; }

  public LogTextT() {
    this.Text = null;
  }
}


static public class LogTextVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Text*/, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
