// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rewind_viewer.fbs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MousePath : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static MousePath GetRootAsMousePath(ByteBuffer _bb) { return GetRootAsMousePath(_bb, new MousePath()); }
  public static MousePath GetRootAsMousePath(ByteBuffer _bb, MousePath obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MousePath __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public rewind_viewer.fbs.Vector2f? Points(int j) { int o = __p.__offset(4); return o != 0 ? (rewind_viewer.fbs.Vector2f?)(new rewind_viewer.fbs.Vector2f()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int PointsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<rewind_viewer.fbs.MousePath> CreateMousePath(FlatBufferBuilder builder,
      VectorOffset pointsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    MousePath.AddPoints(builder, pointsOffset);
    return MousePath.EndMousePath(builder);
  }

  public static void StartMousePath(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPoints(FlatBufferBuilder builder, VectorOffset pointsOffset) { builder.AddOffset(0, pointsOffset.Value, 0); }
  public static void StartPointsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static Offset<rewind_viewer.fbs.MousePath> EndMousePath(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<rewind_viewer.fbs.MousePath>(o);
  }
}


static public class MousePathVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*Points*/, 8 /*rewind_viewer.fbs.Vector2f*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
