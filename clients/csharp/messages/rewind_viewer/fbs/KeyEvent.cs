// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rewind_viewer.fbs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct KeyEvent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static KeyEvent GetRootAsKeyEvent(ByteBuffer _bb) { return GetRootAsKeyEvent(_bb, new KeyEvent()); }
  public static KeyEvent GetRootAsKeyEvent(ByteBuffer _bb, KeyEvent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public KeyEvent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public sbyte Key { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }
  public rewind_viewer.fbs.MousePath? MousePaths(int j) { int o = __p.__offset(6); return o != 0 ? (rewind_viewer.fbs.MousePath?)(new rewind_viewer.fbs.MousePath()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MousePathsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<rewind_viewer.fbs.KeyEvent> CreateKeyEvent(FlatBufferBuilder builder,
      sbyte key = 0,
      VectorOffset mouse_pathsOffset = default(VectorOffset)) {
    builder.StartTable(2);
    KeyEvent.AddMousePaths(builder, mouse_pathsOffset);
    KeyEvent.AddKey(builder, key);
    return KeyEvent.EndKeyEvent(builder);
  }

  public static void StartKeyEvent(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddKey(FlatBufferBuilder builder, sbyte key) { builder.AddSbyte(0, key, 0); }
  public static void AddMousePaths(FlatBufferBuilder builder, VectorOffset mousePathsOffset) { builder.AddOffset(1, mousePathsOffset.Value, 0); }
  public static VectorOffset CreateMousePathsVector(FlatBufferBuilder builder, Offset<rewind_viewer.fbs.MousePath>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMousePathsVectorBlock(FlatBufferBuilder builder, Offset<rewind_viewer.fbs.MousePath>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMousePathsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<rewind_viewer.fbs.MousePath>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMousePathsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<rewind_viewer.fbs.MousePath>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMousePathsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<rewind_viewer.fbs.KeyEvent> EndKeyEvent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<rewind_viewer.fbs.KeyEvent>(o);
  }
}


static public class KeyEventVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Key*/, 1 /*sbyte*/, 1, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*MousePaths*/, rewind_viewer.fbs.MousePathVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
