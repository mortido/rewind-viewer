// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rewind_viewer.fbs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PrimitiveStorage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static PrimitiveStorage GetRootAsPrimitiveStorage(ByteBuffer _bb) { return GetRootAsPrimitiveStorage(_bb, new PrimitiveStorage()); }
  public static PrimitiveStorage GetRootAsPrimitiveStorage(ByteBuffer _bb, PrimitiveStorage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PrimitiveStorage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public rewind_viewer.fbs.ColorPoint? ColorVertexes(int j) { int o = __p.__offset(4); return o != 0 ? (rewind_viewer.fbs.ColorPoint?)(new rewind_viewer.fbs.ColorPoint()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ColorVertexesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public rewind_viewer.fbs.CircleSegment? ColorCircles(int j) { int o = __p.__offset(6); return o != 0 ? (rewind_viewer.fbs.CircleSegment?)(new rewind_viewer.fbs.CircleSegment()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ColorCirclesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public rewind_viewer.fbs.Vector2f? Vertexes(int j) { int o = __p.__offset(8); return o != 0 ? (rewind_viewer.fbs.Vector2f?)(new rewind_viewer.fbs.Vector2f()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int VertexesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public rewind_viewer.fbs.CircleSegment? Circles(int j) { int o = __p.__offset(10); return o != 0 ? (rewind_viewer.fbs.CircleSegment?)(new rewind_viewer.fbs.CircleSegment()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int CirclesLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<rewind_viewer.fbs.PrimitiveStorage> CreatePrimitiveStorage(FlatBufferBuilder builder,
      VectorOffset color_vertexesOffset = default(VectorOffset),
      VectorOffset color_circlesOffset = default(VectorOffset),
      VectorOffset vertexesOffset = default(VectorOffset),
      VectorOffset circlesOffset = default(VectorOffset)) {
    builder.StartTable(4);
    PrimitiveStorage.AddCircles(builder, circlesOffset);
    PrimitiveStorage.AddVertexes(builder, vertexesOffset);
    PrimitiveStorage.AddColorCircles(builder, color_circlesOffset);
    PrimitiveStorage.AddColorVertexes(builder, color_vertexesOffset);
    return PrimitiveStorage.EndPrimitiveStorage(builder);
  }

  public static void StartPrimitiveStorage(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddColorVertexes(FlatBufferBuilder builder, VectorOffset colorVertexesOffset) { builder.AddOffset(0, colorVertexesOffset.Value, 0); }
  public static VectorOffset CreateColorVertexesVector(FlatBufferBuilder builder, Offset<rewind_viewer.fbs.ColorPoint>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateColorVertexesVectorBlock(FlatBufferBuilder builder, Offset<rewind_viewer.fbs.ColorPoint>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateColorVertexesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<rewind_viewer.fbs.ColorPoint>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateColorVertexesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<rewind_viewer.fbs.ColorPoint>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartColorVertexesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddColorCircles(FlatBufferBuilder builder, VectorOffset colorCirclesOffset) { builder.AddOffset(1, colorCirclesOffset.Value, 0); }
  public static VectorOffset CreateColorCirclesVector(FlatBufferBuilder builder, Offset<rewind_viewer.fbs.CircleSegment>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateColorCirclesVectorBlock(FlatBufferBuilder builder, Offset<rewind_viewer.fbs.CircleSegment>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateColorCirclesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<rewind_viewer.fbs.CircleSegment>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateColorCirclesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<rewind_viewer.fbs.CircleSegment>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartColorCirclesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVertexes(FlatBufferBuilder builder, VectorOffset vertexesOffset) { builder.AddOffset(2, vertexesOffset.Value, 0); }
  public static void StartVertexesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static void AddCircles(FlatBufferBuilder builder, VectorOffset circlesOffset) { builder.AddOffset(3, circlesOffset.Value, 0); }
  public static VectorOffset CreateCirclesVector(FlatBufferBuilder builder, Offset<rewind_viewer.fbs.CircleSegment>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCirclesVectorBlock(FlatBufferBuilder builder, Offset<rewind_viewer.fbs.CircleSegment>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCirclesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<rewind_viewer.fbs.CircleSegment>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCirclesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<rewind_viewer.fbs.CircleSegment>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCirclesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<rewind_viewer.fbs.PrimitiveStorage> EndPrimitiveStorage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<rewind_viewer.fbs.PrimitiveStorage>(o);
  }
}


static public class PrimitiveStorageVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*ColorVertexes*/, rewind_viewer.fbs.ColorPointVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*ColorCircles*/, rewind_viewer.fbs.CircleSegmentVerify.Verify, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*Vertexes*/, 8 /*rewind_viewer.fbs.Vector2f*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*Circles*/, rewind_viewer.fbs.CircleSegmentVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
