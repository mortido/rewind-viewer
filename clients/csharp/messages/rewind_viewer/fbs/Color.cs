// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rewind_viewer.fbs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Color : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Color GetRootAsColor(ByteBuffer _bb) { return GetRootAsColor(_bb, new Color()); }
  public static Color GetRootAsColor(ByteBuffer _bb, Color obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Color __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Value { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public bool Fill { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<rewind_viewer.fbs.Color> CreateColor(FlatBufferBuilder builder,
      uint value = 0,
      bool fill = false) {
    builder.StartTable(2);
    Color.AddValue(builder, value);
    Color.AddFill(builder, fill);
    return Color.EndColor(builder);
  }

  public static void StartColor(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddValue(FlatBufferBuilder builder, uint value) { builder.AddUint(0, value, 0); }
  public static void AddFill(FlatBufferBuilder builder, bool fill) { builder.AddBool(1, fill, false); }
  public static Offset<rewind_viewer.fbs.Color> EndColor(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<rewind_viewer.fbs.Color>(o);
  }
  public ColorT UnPack() {
    var _o = new ColorT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ColorT _o) {
    _o.Value = this.Value;
    _o.Fill = this.Fill;
  }
  public static Offset<rewind_viewer.fbs.Color> Pack(FlatBufferBuilder builder, ColorT _o) {
    if (_o == null) return default(Offset<rewind_viewer.fbs.Color>);
    return CreateColor(
      builder,
      _o.Value,
      _o.Fill);
  }
}

public class ColorT
{
  public uint Value { get; set; }
  public bool Fill { get; set; }

  public ColorT() {
    this.Value = 0;
    this.Fill = false;
  }
}


static public class ColorVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Value*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Fill*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
