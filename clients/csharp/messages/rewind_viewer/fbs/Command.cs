// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rewind_viewer.fbs
{

public enum Command : byte
{
  NONE = 0,
  Circle = 1,
  Rectangle = 2,
  Triangle = 3,
  Polyline = 4,
  LogText = 5,
  Popup = 6,
  PopupRound = 7,
  Options = 8,
  EndFrame = 9,
};

public class CommandUnion {
  public Command Type { get; set; }
  public object Value { get; set; }

  public CommandUnion() {
    this.Type = Command.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public rewind_viewer.fbs.CircleT AsCircle() { return this.As<rewind_viewer.fbs.CircleT>(); }
  public static CommandUnion FromCircle(rewind_viewer.fbs.CircleT _circle) { return new CommandUnion{ Type = Command.Circle, Value = _circle }; }
  public rewind_viewer.fbs.RectangleT AsRectangle() { return this.As<rewind_viewer.fbs.RectangleT>(); }
  public static CommandUnion FromRectangle(rewind_viewer.fbs.RectangleT _rectangle) { return new CommandUnion{ Type = Command.Rectangle, Value = _rectangle }; }
  public rewind_viewer.fbs.TriangleT AsTriangle() { return this.As<rewind_viewer.fbs.TriangleT>(); }
  public static CommandUnion FromTriangle(rewind_viewer.fbs.TriangleT _triangle) { return new CommandUnion{ Type = Command.Triangle, Value = _triangle }; }
  public rewind_viewer.fbs.PolylineT AsPolyline() { return this.As<rewind_viewer.fbs.PolylineT>(); }
  public static CommandUnion FromPolyline(rewind_viewer.fbs.PolylineT _polyline) { return new CommandUnion{ Type = Command.Polyline, Value = _polyline }; }
  public rewind_viewer.fbs.LogTextT AsLogText() { return this.As<rewind_viewer.fbs.LogTextT>(); }
  public static CommandUnion FromLogText(rewind_viewer.fbs.LogTextT _logtext) { return new CommandUnion{ Type = Command.LogText, Value = _logtext }; }
  public rewind_viewer.fbs.PopupT AsPopup() { return this.As<rewind_viewer.fbs.PopupT>(); }
  public static CommandUnion FromPopup(rewind_viewer.fbs.PopupT _popup) { return new CommandUnion{ Type = Command.Popup, Value = _popup }; }
  public rewind_viewer.fbs.PopupRoundT AsPopupRound() { return this.As<rewind_viewer.fbs.PopupRoundT>(); }
  public static CommandUnion FromPopupRound(rewind_viewer.fbs.PopupRoundT _popupround) { return new CommandUnion{ Type = Command.PopupRound, Value = _popupround }; }
  public rewind_viewer.fbs.OptionsT AsOptions() { return this.As<rewind_viewer.fbs.OptionsT>(); }
  public static CommandUnion FromOptions(rewind_viewer.fbs.OptionsT _options) { return new CommandUnion{ Type = Command.Options, Value = _options }; }
  public rewind_viewer.fbs.EndFrameT AsEndFrame() { return this.As<rewind_viewer.fbs.EndFrameT>(); }
  public static CommandUnion FromEndFrame(rewind_viewer.fbs.EndFrameT _endframe) { return new CommandUnion{ Type = Command.EndFrame, Value = _endframe }; }

  public static int Pack(Google.FlatBuffers.FlatBufferBuilder builder, CommandUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case Command.Circle: return rewind_viewer.fbs.Circle.Pack(builder, _o.AsCircle()).Value;
      case Command.Rectangle: return rewind_viewer.fbs.Rectangle.Pack(builder, _o.AsRectangle()).Value;
      case Command.Triangle: return rewind_viewer.fbs.Triangle.Pack(builder, _o.AsTriangle()).Value;
      case Command.Polyline: return rewind_viewer.fbs.Polyline.Pack(builder, _o.AsPolyline()).Value;
      case Command.LogText: return rewind_viewer.fbs.LogText.Pack(builder, _o.AsLogText()).Value;
      case Command.Popup: return rewind_viewer.fbs.Popup.Pack(builder, _o.AsPopup()).Value;
      case Command.PopupRound: return rewind_viewer.fbs.PopupRound.Pack(builder, _o.AsPopupRound()).Value;
      case Command.Options: return rewind_viewer.fbs.Options.Pack(builder, _o.AsOptions()).Value;
      case Command.EndFrame: return rewind_viewer.fbs.EndFrame.Pack(builder, _o.AsEndFrame()).Value;
    }
  }
}



static public class CommandVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, byte typeId, uint tablePos)
  {
    bool result = true;
    switch((Command)typeId)
    {
      case Command.Circle:
        result = rewind_viewer.fbs.CircleVerify.Verify(verifier, tablePos);
        break;
      case Command.Rectangle:
        result = rewind_viewer.fbs.RectangleVerify.Verify(verifier, tablePos);
        break;
      case Command.Triangle:
        result = rewind_viewer.fbs.TriangleVerify.Verify(verifier, tablePos);
        break;
      case Command.Polyline:
        result = rewind_viewer.fbs.PolylineVerify.Verify(verifier, tablePos);
        break;
      case Command.LogText:
        result = rewind_viewer.fbs.LogTextVerify.Verify(verifier, tablePos);
        break;
      case Command.Popup:
        result = rewind_viewer.fbs.PopupVerify.Verify(verifier, tablePos);
        break;
      case Command.PopupRound:
        result = rewind_viewer.fbs.PopupRoundVerify.Verify(verifier, tablePos);
        break;
      case Command.Options:
        result = rewind_viewer.fbs.OptionsVerify.Verify(verifier, tablePos);
        break;
      case Command.EndFrame:
        result = rewind_viewer.fbs.EndFrameVerify.Verify(verifier, tablePos);
        break;
      default: result = true;
        break;
    }
    return result;
  }
}


}
