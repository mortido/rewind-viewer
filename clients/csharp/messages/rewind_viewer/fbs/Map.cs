// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rewind_viewer.fbs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Map : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Map GetRootAsMap(ByteBuffer _bb) { return GetRootAsMap(_bb, new Map()); }
  public static Map GetRootAsMap(ByteBuffer _bb, Map obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Map __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public rewind_viewer.fbs.Vector2f? Position { get { int o = __p.__offset(4); return o != 0 ? (rewind_viewer.fbs.Vector2f?)(new rewind_viewer.fbs.Vector2f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public rewind_viewer.fbs.Vector2f? Size { get { int o = __p.__offset(6); return o != 0 ? (rewind_viewer.fbs.Vector2f?)(new rewind_viewer.fbs.Vector2f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public ushort XGrid { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public ushort YGrid { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }

  public static void StartMap(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<rewind_viewer.fbs.Vector2f> positionOffset) { builder.AddStruct(0, positionOffset.Value, 0); }
  public static void AddSize(FlatBufferBuilder builder, Offset<rewind_viewer.fbs.Vector2f> sizeOffset) { builder.AddStruct(1, sizeOffset.Value, 0); }
  public static void AddXGrid(FlatBufferBuilder builder, ushort xGrid) { builder.AddUshort(2, xGrid, 0); }
  public static void AddYGrid(FlatBufferBuilder builder, ushort yGrid) { builder.AddUshort(3, yGrid, 0); }
  public static Offset<rewind_viewer.fbs.Map> EndMap(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // position
    builder.Required(o, 6);  // size
    return new Offset<rewind_viewer.fbs.Map>(o);
  }
}


static public class MapVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Position*/, 8 /*rewind_viewer.fbs.Vector2f*/, 4, true)
      && verifier.VerifyField(tablePos, 6 /*Size*/, 8 /*rewind_viewer.fbs.Vector2f*/, 4, true)
      && verifier.VerifyField(tablePos, 8 /*XGrid*/, 2 /*ushort*/, 2, false)
      && verifier.VerifyField(tablePos, 10 /*YGrid*/, 2 /*ushort*/, 2, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
