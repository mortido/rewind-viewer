// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rewind_viewer.fbs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Tiles : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Tiles GetRootAsTiles(ByteBuffer _bb) { return GetRootAsTiles(_bb, new Tiles()); }
  public static Tiles GetRootAsTiles(ByteBuffer _bb, Tiles obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Tiles __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public rewind_viewer.fbs.Vector2f? Position { get { int o = __p.__offset(4); return o != 0 ? (rewind_viewer.fbs.Vector2f?)(new rewind_viewer.fbs.Vector2f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public rewind_viewer.fbs.Vector2f? CellSize { get { int o = __p.__offset(6); return o != 0 ? (rewind_viewer.fbs.Vector2f?)(new rewind_viewer.fbs.Vector2f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public ushort RowSize { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public uint Colors(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int ColorsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<uint> GetColorsBytes() { return __p.__vector_as_span<uint>(10, 4); }
#else
  public ArraySegment<byte>? GetColorsBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public uint[] GetColorsArray() { return __p.__vector_as_array<uint>(10); }

  public static void StartTiles(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<rewind_viewer.fbs.Vector2f> positionOffset) { builder.AddStruct(0, positionOffset.Value, 0); }
  public static void AddCellSize(FlatBufferBuilder builder, Offset<rewind_viewer.fbs.Vector2f> cellSizeOffset) { builder.AddStruct(1, cellSizeOffset.Value, 0); }
  public static void AddRowSize(FlatBufferBuilder builder, ushort rowSize) { builder.AddUshort(2, rowSize, 0); }
  public static void AddColors(FlatBufferBuilder builder, VectorOffset colorsOffset) { builder.AddOffset(3, colorsOffset.Value, 0); }
  public static VectorOffset CreateColorsVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateColorsVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateColorsVectorBlock(FlatBufferBuilder builder, ArraySegment<uint> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateColorsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<uint>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartColorsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<rewind_viewer.fbs.Tiles> EndTiles(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // position
    builder.Required(o, 6);  // cell_size
    builder.Required(o, 10);  // colors
    return new Offset<rewind_viewer.fbs.Tiles>(o);
  }
}


static public class TilesVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Position*/, 8 /*rewind_viewer.fbs.Vector2f*/, 4, true)
      && verifier.VerifyField(tablePos, 6 /*CellSize*/, 8 /*rewind_viewer.fbs.Vector2f*/, 4, true)
      && verifier.VerifyField(tablePos, 8 /*RowSize*/, 2 /*ushort*/, 2, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*Colors*/, 4 /*uint*/, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
