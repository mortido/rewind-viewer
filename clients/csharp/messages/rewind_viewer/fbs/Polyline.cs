// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rewind_viewer.fbs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Polyline : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Polyline GetRootAsPolyline(ByteBuffer _bb) { return GetRootAsPolyline(_bb, new Polyline()); }
  public static Polyline GetRootAsPolyline(ByteBuffer _bb, Polyline obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Polyline __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public rewind_viewer.fbs.Color? Color { get { int o = __p.__offset(4); return o != 0 ? (rewind_viewer.fbs.Color?)(new rewind_viewer.fbs.Color()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public rewind_viewer.fbs.Vector2f? Points(int j) { int o = __p.__offset(6); return o != 0 ? (rewind_viewer.fbs.Vector2f?)(new rewind_viewer.fbs.Vector2f()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int PointsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<rewind_viewer.fbs.Polyline> CreatePolyline(FlatBufferBuilder builder,
      Offset<rewind_viewer.fbs.Color> colorOffset = default(Offset<rewind_viewer.fbs.Color>),
      VectorOffset pointsOffset = default(VectorOffset)) {
    builder.StartTable(2);
    Polyline.AddPoints(builder, pointsOffset);
    Polyline.AddColor(builder, colorOffset);
    return Polyline.EndPolyline(builder);
  }

  public static void StartPolyline(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddColor(FlatBufferBuilder builder, Offset<rewind_viewer.fbs.Color> colorOffset) { builder.AddOffset(0, colorOffset.Value, 0); }
  public static void AddPoints(FlatBufferBuilder builder, VectorOffset pointsOffset) { builder.AddOffset(1, pointsOffset.Value, 0); }
  public static void StartPointsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static Offset<rewind_viewer.fbs.Polyline> EndPolyline(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 6);  // points
    return new Offset<rewind_viewer.fbs.Polyline>(o);
  }
}


static public class PolylineVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyTable(tablePos, 4 /*Color*/, rewind_viewer.fbs.ColorVerify.Verify, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*Points*/, 8 /*rewind_viewer.fbs.Vector2f*/, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
