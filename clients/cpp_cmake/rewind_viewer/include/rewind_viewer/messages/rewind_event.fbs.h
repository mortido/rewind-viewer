// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REWINDEVENT_REWIND_VIEWER_FBS_H_
#define FLATBUFFERS_GENERATED_REWINDEVENT_REWIND_VIEWER_FBS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "vector2f.fbs.h"

namespace rewind_viewer {
namespace fbs {

struct MousePath;
struct MousePathBuilder;

struct RewindEvent;
struct RewindEventBuilder;

struct RewindEventList;
struct RewindEventListBuilder;

struct MousePath FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MousePathBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POINTS = 4
  };
  const ::flatbuffers::Vector<const rewind_viewer::fbs::Vector2f *> *points() const {
    return GetPointer<const ::flatbuffers::Vector<const rewind_viewer::fbs::Vector2f *> *>(VT_POINTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POINTS) &&
           verifier.VerifyVector(points()) &&
           verifier.EndTable();
  }
};

struct MousePathBuilder {
  typedef MousePath Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_points(::flatbuffers::Offset<::flatbuffers::Vector<const rewind_viewer::fbs::Vector2f *>> points) {
    fbb_.AddOffset(MousePath::VT_POINTS, points);
  }
  explicit MousePathBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MousePath> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MousePath>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MousePath> CreateMousePath(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<const rewind_viewer::fbs::Vector2f *>> points = 0) {
  MousePathBuilder builder_(_fbb);
  builder_.add_points(points);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MousePath> CreateMousePathDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<rewind_viewer::fbs::Vector2f> *points = nullptr) {
  auto points__ = points ? _fbb.CreateVectorOfStructs<rewind_viewer::fbs::Vector2f>(*points) : 0;
  return rewind_viewer::fbs::CreateMousePath(
      _fbb,
      points__);
}

struct RewindEvent FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RewindEventBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_MOUSE_PATHS = 6
  };
  int8_t key() const {
    return GetField<int8_t>(VT_KEY, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<rewind_viewer::fbs::MousePath>> *mouse_paths() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<rewind_viewer::fbs::MousePath>> *>(VT_MOUSE_PATHS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_KEY, 1) &&
           VerifyOffset(verifier, VT_MOUSE_PATHS) &&
           verifier.VerifyVector(mouse_paths()) &&
           verifier.VerifyVectorOfTables(mouse_paths()) &&
           verifier.EndTable();
  }
};

struct RewindEventBuilder {
  typedef RewindEvent Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_key(int8_t key) {
    fbb_.AddElement<int8_t>(RewindEvent::VT_KEY, key, 0);
  }
  void add_mouse_paths(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<rewind_viewer::fbs::MousePath>>> mouse_paths) {
    fbb_.AddOffset(RewindEvent::VT_MOUSE_PATHS, mouse_paths);
  }
  explicit RewindEventBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RewindEvent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RewindEvent>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RewindEvent> CreateRewindEvent(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int8_t key = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<rewind_viewer::fbs::MousePath>>> mouse_paths = 0) {
  RewindEventBuilder builder_(_fbb);
  builder_.add_mouse_paths(mouse_paths);
  builder_.add_key(key);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RewindEvent> CreateRewindEventDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int8_t key = 0,
    const std::vector<::flatbuffers::Offset<rewind_viewer::fbs::MousePath>> *mouse_paths = nullptr) {
  auto mouse_paths__ = mouse_paths ? _fbb.CreateVector<::flatbuffers::Offset<rewind_viewer::fbs::MousePath>>(*mouse_paths) : 0;
  return rewind_viewer::fbs::CreateRewindEvent(
      _fbb,
      key,
      mouse_paths__);
}

struct RewindEventList FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RewindEventListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EVENTS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<rewind_viewer::fbs::RewindEvent>> *events() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<rewind_viewer::fbs::RewindEvent>> *>(VT_EVENTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EVENTS) &&
           verifier.VerifyVector(events()) &&
           verifier.VerifyVectorOfTables(events()) &&
           verifier.EndTable();
  }
};

struct RewindEventListBuilder {
  typedef RewindEventList Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_events(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<rewind_viewer::fbs::RewindEvent>>> events) {
    fbb_.AddOffset(RewindEventList::VT_EVENTS, events);
  }
  explicit RewindEventListBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RewindEventList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RewindEventList>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RewindEventList> CreateRewindEventList(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<rewind_viewer::fbs::RewindEvent>>> events = 0) {
  RewindEventListBuilder builder_(_fbb);
  builder_.add_events(events);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RewindEventList> CreateRewindEventListDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<rewind_viewer::fbs::RewindEvent>> *events = nullptr) {
  auto events__ = events ? _fbb.CreateVector<::flatbuffers::Offset<rewind_viewer::fbs::RewindEvent>>(*events) : 0;
  return rewind_viewer::fbs::CreateRewindEventList(
      _fbb,
      events__);
}

inline const rewind_viewer::fbs::RewindEventList *GetRewindEventList(const void *buf) {
  return ::flatbuffers::GetRoot<rewind_viewer::fbs::RewindEventList>(buf);
}

inline const rewind_viewer::fbs::RewindEventList *GetSizePrefixedRewindEventList(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<rewind_viewer::fbs::RewindEventList>(buf);
}

inline bool VerifyRewindEventListBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<rewind_viewer::fbs::RewindEventList>(nullptr);
}

inline bool VerifySizePrefixedRewindEventListBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<rewind_viewer::fbs::RewindEventList>(nullptr);
}

inline void FinishRewindEventListBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<rewind_viewer::fbs::RewindEventList> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRewindEventListBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<rewind_viewer::fbs::RewindEventList> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace fbs
}  // namespace rewind_viewer

#endif  // FLATBUFFERS_GENERATED_REWINDEVENT_REWIND_VIEWER_FBS_H_
