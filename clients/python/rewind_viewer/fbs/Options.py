# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Options(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Options()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Options
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Options
    def Map(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from rewind_viewer.fbs.Map import Map
            obj = Map()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Options
    def Layer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from rewind_viewer.fbs.Layer import Layer
            obj = Layer()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def OptionsStart(builder):
    builder.StartObject(2)

def Start(builder):
    OptionsStart(builder)

def OptionsAddMap(builder, map):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(map), 0)

def AddMap(builder, map):
    OptionsAddMap(builder, map)

def OptionsAddLayer(builder, layer):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(layer), 0)

def AddLayer(builder, layer):
    OptionsAddLayer(builder, layer)

def OptionsEnd(builder):
    return builder.EndObject()

def End(builder):
    return OptionsEnd(builder)
