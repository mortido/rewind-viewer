# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Triangle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Triangle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTriangle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Triangle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Triangle
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from rewind_viewer.fbs.Color import Color
            obj = Color()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Triangle
    def Points(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 8
            from rewind_viewer.fbs.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Triangle
    def PointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Triangle
    def PointsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def TriangleStart(builder):
    builder.StartObject(2)

def Start(builder):
    TriangleStart(builder)

def TriangleAddColor(builder, color):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(color), 0)

def AddColor(builder, color):
    TriangleAddColor(builder, color)

def TriangleAddPoints(builder, points):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(points), 0)

def AddPoints(builder, points):
    TriangleAddPoints(builder, points)

def TriangleStartPointsVector(builder, numElems):
    return builder.StartVector(8, numElems, 4)

def StartPointsVector(builder, numElems):
    return TriangleStartPointsVector(builder, numElems)

def TriangleEnd(builder):
    return builder.EndObject()

def End(builder):
    return TriangleEnd(builder)
