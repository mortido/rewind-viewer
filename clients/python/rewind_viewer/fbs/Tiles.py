# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Tiles(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Tiles()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTiles(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Tiles
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Tiles
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from rewind_viewer.fbs.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Tiles
    def CellSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from rewind_viewer.fbs.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Tiles
    def RowSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # Tiles
    def Colors(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Tiles
    def ColorsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # Tiles
    def ColorsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Tiles
    def ColorsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def TilesStart(builder):
    builder.StartObject(4)

def Start(builder):
    TilesStart(builder)

def TilesAddPosition(builder, position):
    builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)

def AddPosition(builder, position):
    TilesAddPosition(builder, position)

def TilesAddCellSize(builder, cellSize):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(cellSize), 0)

def AddCellSize(builder, cellSize):
    TilesAddCellSize(builder, cellSize)

def TilesAddRowSize(builder, rowSize):
    builder.PrependUint16Slot(2, rowSize, 0)

def AddRowSize(builder, rowSize):
    TilesAddRowSize(builder, rowSize)

def TilesAddColors(builder, colors):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(colors), 0)

def AddColors(builder, colors):
    TilesAddColors(builder, colors)

def TilesStartColorsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartColorsVector(builder, numElems):
    return TilesStartColorsVector(builder, numElems)

def TilesEnd(builder):
    return builder.EndObject()

def End(builder):
    return TilesEnd(builder)
