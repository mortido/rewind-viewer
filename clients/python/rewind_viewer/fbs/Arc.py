# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Arc(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Arc()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsArc(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Arc
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Arc
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from rewind_viewer.fbs.Color import Color
            obj = Color()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Arc
    def Center(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from rewind_viewer.fbs.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Arc
    def Radius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Arc
    def StartAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Arc
    def EndAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def ArcStart(builder):
    builder.StartObject(5)

def Start(builder):
    ArcStart(builder)

def ArcAddColor(builder, color):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(color), 0)

def AddColor(builder, color):
    ArcAddColor(builder, color)

def ArcAddCenter(builder, center):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(center), 0)

def AddCenter(builder, center):
    ArcAddCenter(builder, center)

def ArcAddRadius(builder, radius):
    builder.PrependFloat32Slot(2, radius, 0.0)

def AddRadius(builder, radius):
    ArcAddRadius(builder, radius)

def ArcAddStartAngle(builder, startAngle):
    builder.PrependFloat32Slot(3, startAngle, 0.0)

def AddStartAngle(builder, startAngle):
    ArcAddStartAngle(builder, startAngle)

def ArcAddEndAngle(builder, endAngle):
    builder.PrependFloat32Slot(4, endAngle, 0.0)

def AddEndAngle(builder, endAngle):
    ArcAddEndAngle(builder, endAngle)

def ArcEnd(builder):
    return builder.EndObject()

def End(builder):
    return ArcEnd(builder)
