# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Rectangle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Rectangle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRectangle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Rectangle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Rectangle
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from rewind_viewer.fbs.Color import Color
            obj = Color()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Rectangle
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from rewind_viewer.fbs.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Rectangle
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from rewind_viewer.fbs.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def RectangleStart(builder):
    builder.StartObject(3)

def Start(builder):
    RectangleStart(builder)

def RectangleAddColor(builder, color):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(color), 0)

def AddColor(builder, color):
    RectangleAddColor(builder, color)

def RectangleAddPosition(builder, position):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)

def AddPosition(builder, position):
    RectangleAddPosition(builder, position)

def RectangleAddSize(builder, size):
    builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(size), 0)

def AddSize(builder, size):
    RectangleAddSize(builder, size)

def RectangleEnd(builder):
    return builder.EndObject()

def End(builder):
    return RectangleEnd(builder)

import rewind_viewer.fbs.Color
import rewind_viewer.fbs.Vector2f
try:
    from typing import Optional
except:
    pass

class RectangleT(object):

    # RectangleT
    def __init__(self):
        self.color = None  # type: Optional[rewind_viewer.fbs.Color.ColorT]
        self.position = None  # type: Optional[rewind_viewer.fbs.Vector2f.Vector2fT]
        self.size = None  # type: Optional[rewind_viewer.fbs.Vector2f.Vector2fT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        rectangle = Rectangle()
        rectangle.Init(buf, pos)
        return cls.InitFromObj(rectangle)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, rectangle):
        x = RectangleT()
        x._UnPack(rectangle)
        return x

    # RectangleT
    def _UnPack(self, rectangle):
        if rectangle is None:
            return
        if rectangle.Color() is not None:
            self.color = rewind_viewer.fbs.Color.ColorT.InitFromObj(rectangle.Color())
        if rectangle.Position() is not None:
            self.position = rewind_viewer.fbs.Vector2f.Vector2fT.InitFromObj(rectangle.Position())
        if rectangle.Size() is not None:
            self.size = rewind_viewer.fbs.Vector2f.Vector2fT.InitFromObj(rectangle.Size())

    # RectangleT
    def Pack(self, builder):
        if self.color is not None:
            color = self.color.Pack(builder)
        RectangleStart(builder)
        if self.color is not None:
            RectangleAddColor(builder, color)
        if self.position is not None:
            position = self.position.Pack(builder)
            RectangleAddPosition(builder, position)
        if self.size is not None:
            size = self.size.Pack(builder)
            RectangleAddSize(builder, size)
        rectangle = RectangleEnd(builder)
        return rectangle
