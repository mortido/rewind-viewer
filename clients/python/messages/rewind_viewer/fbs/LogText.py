# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LogText(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LogText()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLogText(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LogText
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LogText
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def LogTextStart(builder):
    builder.StartObject(1)

def Start(builder):
    LogTextStart(builder)

def LogTextAddText(builder, text):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)

def AddText(builder, text):
    LogTextAddText(builder, text)

def LogTextEnd(builder):
    return builder.EndObject()

def End(builder):
    return LogTextEnd(builder)


class LogTextT(object):

    # LogTextT
    def __init__(self):
        self.text = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        logText = LogText()
        logText.Init(buf, pos)
        return cls.InitFromObj(logText)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, logText):
        x = LogTextT()
        x._UnPack(logText)
        return x

    # LogTextT
    def _UnPack(self, logText):
        if logText is None:
            return
        self.text = logText.Text()

    # LogTextT
    def Pack(self, builder):
        if self.text is not None:
            text = builder.CreateString(self.text)
        LogTextStart(builder)
        if self.text is not None:
            LogTextAddText(builder, text)
        logText = LogTextEnd(builder)
        return logText
