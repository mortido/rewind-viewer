# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Arc(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Arc()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsArc(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Arc
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Arc
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from rewind_viewer.fbs.Color import Color
            obj = Color()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Arc
    def Center(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from rewind_viewer.fbs.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Arc
    def Radius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Arc
    def StartAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Arc
    def EndAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def ArcStart(builder):
    builder.StartObject(5)

def Start(builder):
    ArcStart(builder)

def ArcAddColor(builder, color):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(color), 0)

def AddColor(builder, color):
    ArcAddColor(builder, color)

def ArcAddCenter(builder, center):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(center), 0)

def AddCenter(builder, center):
    ArcAddCenter(builder, center)

def ArcAddRadius(builder, radius):
    builder.PrependFloat32Slot(2, radius, 0.0)

def AddRadius(builder, radius):
    ArcAddRadius(builder, radius)

def ArcAddStartAngle(builder, startAngle):
    builder.PrependFloat32Slot(3, startAngle, 0.0)

def AddStartAngle(builder, startAngle):
    ArcAddStartAngle(builder, startAngle)

def ArcAddEndAngle(builder, endAngle):
    builder.PrependFloat32Slot(4, endAngle, 0.0)

def AddEndAngle(builder, endAngle):
    ArcAddEndAngle(builder, endAngle)

def ArcEnd(builder):
    return builder.EndObject()

def End(builder):
    return ArcEnd(builder)

import rewind_viewer.fbs.Color
import rewind_viewer.fbs.Vector2f
try:
    from typing import Optional
except:
    pass

class ArcT(object):

    # ArcT
    def __init__(self):
        self.color = None  # type: Optional[rewind_viewer.fbs.Color.ColorT]
        self.center = None  # type: Optional[rewind_viewer.fbs.Vector2f.Vector2fT]
        self.radius = 0.0  # type: float
        self.startAngle = 0.0  # type: float
        self.endAngle = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        arc = Arc()
        arc.Init(buf, pos)
        return cls.InitFromObj(arc)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, arc):
        x = ArcT()
        x._UnPack(arc)
        return x

    # ArcT
    def _UnPack(self, arc):
        if arc is None:
            return
        if arc.Color() is not None:
            self.color = rewind_viewer.fbs.Color.ColorT.InitFromObj(arc.Color())
        if arc.Center() is not None:
            self.center = rewind_viewer.fbs.Vector2f.Vector2fT.InitFromObj(arc.Center())
        self.radius = arc.Radius()
        self.startAngle = arc.StartAngle()
        self.endAngle = arc.EndAngle()

    # ArcT
    def Pack(self, builder):
        if self.color is not None:
            color = self.color.Pack(builder)
        ArcStart(builder)
        if self.color is not None:
            ArcAddColor(builder, color)
        if self.center is not None:
            center = self.center.Pack(builder)
            ArcAddCenter(builder, center)
        ArcAddRadius(builder, self.radius)
        ArcAddStartAngle(builder, self.startAngle)
        ArcAddEndAngle(builder, self.endAngle)
        arc = ArcEnd(builder)
        return arc
