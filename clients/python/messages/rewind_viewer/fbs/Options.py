# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Options(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Options()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Options
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Options
    def Map(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from rewind_viewer.fbs.Map import Map
            obj = Map()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Options
    def Layer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from rewind_viewer.fbs.Layer import Layer
            obj = Layer()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def OptionsStart(builder):
    builder.StartObject(2)

def Start(builder):
    OptionsStart(builder)

def OptionsAddMap(builder, map):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(map), 0)

def AddMap(builder, map):
    OptionsAddMap(builder, map)

def OptionsAddLayer(builder, layer):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(layer), 0)

def AddLayer(builder, layer):
    OptionsAddLayer(builder, layer)

def OptionsEnd(builder):
    return builder.EndObject()

def End(builder):
    return OptionsEnd(builder)

import rewind_viewer.fbs.Layer
import rewind_viewer.fbs.Map
try:
    from typing import Optional
except:
    pass

class OptionsT(object):

    # OptionsT
    def __init__(self):
        self.map = None  # type: Optional[rewind_viewer.fbs.Map.MapT]
        self.layer = None  # type: Optional[rewind_viewer.fbs.Layer.LayerT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        options = Options()
        options.Init(buf, pos)
        return cls.InitFromObj(options)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, options):
        x = OptionsT()
        x._UnPack(options)
        return x

    # OptionsT
    def _UnPack(self, options):
        if options is None:
            return
        if options.Map() is not None:
            self.map = rewind_viewer.fbs.Map.MapT.InitFromObj(options.Map())
        if options.Layer() is not None:
            self.layer = rewind_viewer.fbs.Layer.LayerT.InitFromObj(options.Layer())

    # OptionsT
    def Pack(self, builder):
        if self.map is not None:
            map = self.map.Pack(builder)
        if self.layer is not None:
            layer = self.layer.Pack(builder)
        OptionsStart(builder)
        if self.map is not None:
            OptionsAddMap(builder, map)
        if self.layer is not None:
            OptionsAddLayer(builder, layer)
        options = OptionsEnd(builder)
        return options
