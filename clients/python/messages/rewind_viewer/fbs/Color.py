# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Color(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Color()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsColor(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Color
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Color
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Color
    def Fill(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def ColorStart(builder):
    builder.StartObject(2)

def Start(builder):
    ColorStart(builder)

def ColorAddValue(builder, value):
    builder.PrependUint32Slot(0, value, 0)

def AddValue(builder, value):
    ColorAddValue(builder, value)

def ColorAddFill(builder, fill):
    builder.PrependBoolSlot(1, fill, 0)

def AddFill(builder, fill):
    ColorAddFill(builder, fill)

def ColorEnd(builder):
    return builder.EndObject()

def End(builder):
    return ColorEnd(builder)


class ColorT(object):

    # ColorT
    def __init__(self):
        self.value = 0  # type: int
        self.fill = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        color = Color()
        color.Init(buf, pos)
        return cls.InitFromObj(color)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, color):
        x = ColorT()
        x._UnPack(color)
        return x

    # ColorT
    def _UnPack(self, color):
        if color is None:
            return
        self.value = color.Value()
        self.fill = color.Fill()

    # ColorT
    def Pack(self, builder):
        ColorStart(builder)
        ColorAddValue(builder, self.value)
        ColorAddFill(builder, self.fill)
        color = ColorEnd(builder)
        return color
