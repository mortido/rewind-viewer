# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PopupRound(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PopupRound()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPopupRound(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PopupRound
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PopupRound
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PopupRound
    def AreaCenter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from rewind_viewer.fbs.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PopupRound
    def AreaRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def PopupRoundStart(builder):
    builder.StartObject(3)

def Start(builder):
    PopupRoundStart(builder)

def PopupRoundAddText(builder, text):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)

def AddText(builder, text):
    PopupRoundAddText(builder, text)

def PopupRoundAddAreaCenter(builder, areaCenter):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(areaCenter), 0)

def AddAreaCenter(builder, areaCenter):
    PopupRoundAddAreaCenter(builder, areaCenter)

def PopupRoundAddAreaRadius(builder, areaRadius):
    builder.PrependFloat32Slot(2, areaRadius, 0.0)

def AddAreaRadius(builder, areaRadius):
    PopupRoundAddAreaRadius(builder, areaRadius)

def PopupRoundEnd(builder):
    return builder.EndObject()

def End(builder):
    return PopupRoundEnd(builder)

import rewind_viewer.fbs.Vector2f
try:
    from typing import Optional
except:
    pass

class PopupRoundT(object):

    # PopupRoundT
    def __init__(self):
        self.text = None  # type: str
        self.areaCenter = None  # type: Optional[rewind_viewer.fbs.Vector2f.Vector2fT]
        self.areaRadius = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        popupRound = PopupRound()
        popupRound.Init(buf, pos)
        return cls.InitFromObj(popupRound)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, popupRound):
        x = PopupRoundT()
        x._UnPack(popupRound)
        return x

    # PopupRoundT
    def _UnPack(self, popupRound):
        if popupRound is None:
            return
        self.text = popupRound.Text()
        if popupRound.AreaCenter() is not None:
            self.areaCenter = rewind_viewer.fbs.Vector2f.Vector2fT.InitFromObj(popupRound.AreaCenter())
        self.areaRadius = popupRound.AreaRadius()

    # PopupRoundT
    def Pack(self, builder):
        if self.text is not None:
            text = builder.CreateString(self.text)
        PopupRoundStart(builder)
        if self.text is not None:
            PopupRoundAddText(builder, text)
        if self.areaCenter is not None:
            areaCenter = self.areaCenter.Pack(builder)
            PopupRoundAddAreaCenter(builder, areaCenter)
        PopupRoundAddAreaRadius(builder, self.areaRadius)
        popupRound = PopupRoundEnd(builder)
        return popupRound
