# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EndFrame(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EndFrame()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEndFrame(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EndFrame
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

def EndFrameStart(builder):
    builder.StartObject(0)

def Start(builder):
    EndFrameStart(builder)

def EndFrameEnd(builder):
    return builder.EndObject()

def End(builder):
    return EndFrameEnd(builder)


class EndFrameT(object):

    # EndFrameT
    def __init__(self):
        pass

    @classmethod
    def InitFromBuf(cls, buf, pos):
        endFrame = EndFrame()
        endFrame.Init(buf, pos)
        return cls.InitFromObj(endFrame)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, endFrame):
        x = EndFrameT()
        x._UnPack(endFrame)
        return x

    # EndFrameT
    def _UnPack(self, endFrame):
        if endFrame is None:
            return

    # EndFrameT
    def Pack(self, builder):
        EndFrameStart(builder)
        endFrame = EndFrameEnd(builder)
        return endFrame
