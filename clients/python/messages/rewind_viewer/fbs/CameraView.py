# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CameraView(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CameraView()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCameraView(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CameraView
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CameraView
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CameraView
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from rewind_viewer.fbs.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CameraView
    def ViewRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def CameraViewStart(builder):
    builder.StartObject(3)

def Start(builder):
    CameraViewStart(builder)

def CameraViewAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    CameraViewAddName(builder, name)

def CameraViewAddPosition(builder, position):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)

def AddPosition(builder, position):
    CameraViewAddPosition(builder, position)

def CameraViewAddViewRadius(builder, viewRadius):
    builder.PrependFloat32Slot(2, viewRadius, 0.0)

def AddViewRadius(builder, viewRadius):
    CameraViewAddViewRadius(builder, viewRadius)

def CameraViewEnd(builder):
    return builder.EndObject()

def End(builder):
    return CameraViewEnd(builder)

import rewind_viewer.fbs.Vector2f
try:
    from typing import Optional
except:
    pass

class CameraViewT(object):

    # CameraViewT
    def __init__(self):
        self.name = None  # type: str
        self.position = None  # type: Optional[rewind_viewer.fbs.Vector2f.Vector2fT]
        self.viewRadius = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cameraView = CameraView()
        cameraView.Init(buf, pos)
        return cls.InitFromObj(cameraView)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cameraView):
        x = CameraViewT()
        x._UnPack(cameraView)
        return x

    # CameraViewT
    def _UnPack(self, cameraView):
        if cameraView is None:
            return
        self.name = cameraView.Name()
        if cameraView.Position() is not None:
            self.position = rewind_viewer.fbs.Vector2f.Vector2fT.InitFromObj(cameraView.Position())
        self.viewRadius = cameraView.ViewRadius()

    # CameraViewT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        CameraViewStart(builder)
        if self.name is not None:
            CameraViewAddName(builder, name)
        if self.position is not None:
            position = self.position.Pack(builder)
            CameraViewAddPosition(builder, position)
        CameraViewAddViewRadius(builder, self.viewRadius)
        cameraView = CameraViewEnd(builder)
        return cameraView
