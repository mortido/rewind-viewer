# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Tiles(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Tiles()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTiles(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Tiles
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Tiles
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from rewind_viewer.fbs.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Tiles
    def CellSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from rewind_viewer.fbs.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Tiles
    def RowSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # Tiles
    def Colors(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Tiles
    def ColorsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # Tiles
    def ColorsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Tiles
    def ColorsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def TilesStart(builder):
    builder.StartObject(4)

def Start(builder):
    TilesStart(builder)

def TilesAddPosition(builder, position):
    builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)

def AddPosition(builder, position):
    TilesAddPosition(builder, position)

def TilesAddCellSize(builder, cellSize):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(cellSize), 0)

def AddCellSize(builder, cellSize):
    TilesAddCellSize(builder, cellSize)

def TilesAddRowSize(builder, rowSize):
    builder.PrependUint16Slot(2, rowSize, 0)

def AddRowSize(builder, rowSize):
    TilesAddRowSize(builder, rowSize)

def TilesAddColors(builder, colors):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(colors), 0)

def AddColors(builder, colors):
    TilesAddColors(builder, colors)

def TilesStartColorsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartColorsVector(builder, numElems):
    return TilesStartColorsVector(builder, numElems)

def TilesEnd(builder):
    return builder.EndObject()

def End(builder):
    return TilesEnd(builder)

import rewind_viewer.fbs.Vector2f
try:
    from typing import List, Optional
except:
    pass

class TilesT(object):

    # TilesT
    def __init__(self):
        self.position = None  # type: Optional[rewind_viewer.fbs.Vector2f.Vector2fT]
        self.cellSize = None  # type: Optional[rewind_viewer.fbs.Vector2f.Vector2fT]
        self.rowSize = 0  # type: int
        self.colors = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        tiles = Tiles()
        tiles.Init(buf, pos)
        return cls.InitFromObj(tiles)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, tiles):
        x = TilesT()
        x._UnPack(tiles)
        return x

    # TilesT
    def _UnPack(self, tiles):
        if tiles is None:
            return
        if tiles.Position() is not None:
            self.position = rewind_viewer.fbs.Vector2f.Vector2fT.InitFromObj(tiles.Position())
        if tiles.CellSize() is not None:
            self.cellSize = rewind_viewer.fbs.Vector2f.Vector2fT.InitFromObj(tiles.CellSize())
        self.rowSize = tiles.RowSize()
        if not tiles.ColorsIsNone():
            if np is None:
                self.colors = []
                for i in range(tiles.ColorsLength()):
                    self.colors.append(tiles.Colors(i))
            else:
                self.colors = tiles.ColorsAsNumpy()

    # TilesT
    def Pack(self, builder):
        if self.colors is not None:
            if np is not None and type(self.colors) is np.ndarray:
                colors = builder.CreateNumpyVector(self.colors)
            else:
                TilesStartColorsVector(builder, len(self.colors))
                for i in reversed(range(len(self.colors))):
                    builder.PrependUint32(self.colors[i])
                colors = builder.EndVector()
        TilesStart(builder)
        if self.position is not None:
            position = self.position.Pack(builder)
            TilesAddPosition(builder, position)
        if self.cellSize is not None:
            cellSize = self.cellSize.Pack(builder)
            TilesAddCellSize(builder, cellSize)
        TilesAddRowSize(builder, self.rowSize)
        if self.colors is not None:
            TilesAddColors(builder, colors)
        tiles = TilesEnd(builder)
        return tiles
