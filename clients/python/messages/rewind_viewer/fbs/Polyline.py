# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Polyline(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Polyline()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPolyline(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Polyline
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Polyline
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from rewind_viewer.fbs.Color import Color
            obj = Color()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Polyline
    def Points(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 8
            from rewind_viewer.fbs.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Polyline
    def PointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Polyline
    def PointsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def PolylineStart(builder):
    builder.StartObject(2)

def Start(builder):
    PolylineStart(builder)

def PolylineAddColor(builder, color):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(color), 0)

def AddColor(builder, color):
    PolylineAddColor(builder, color)

def PolylineAddPoints(builder, points):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(points), 0)

def AddPoints(builder, points):
    PolylineAddPoints(builder, points)

def PolylineStartPointsVector(builder, numElems):
    return builder.StartVector(8, numElems, 4)

def StartPointsVector(builder, numElems):
    return PolylineStartPointsVector(builder, numElems)

def PolylineEnd(builder):
    return builder.EndObject()

def End(builder):
    return PolylineEnd(builder)

import rewind_viewer.fbs.Color
import rewind_viewer.fbs.Vector2f
try:
    from typing import List, Optional
except:
    pass

class PolylineT(object):

    # PolylineT
    def __init__(self):
        self.color = None  # type: Optional[rewind_viewer.fbs.Color.ColorT]
        self.points = None  # type: List[rewind_viewer.fbs.Vector2f.Vector2fT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        polyline = Polyline()
        polyline.Init(buf, pos)
        return cls.InitFromObj(polyline)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, polyline):
        x = PolylineT()
        x._UnPack(polyline)
        return x

    # PolylineT
    def _UnPack(self, polyline):
        if polyline is None:
            return
        if polyline.Color() is not None:
            self.color = rewind_viewer.fbs.Color.ColorT.InitFromObj(polyline.Color())
        if not polyline.PointsIsNone():
            self.points = []
            for i in range(polyline.PointsLength()):
                if polyline.Points(i) is None:
                    self.points.append(None)
                else:
                    vector2f_ = rewind_viewer.fbs.Vector2f.Vector2fT.InitFromObj(polyline.Points(i))
                    self.points.append(vector2f_)

    # PolylineT
    def Pack(self, builder):
        if self.color is not None:
            color = self.color.Pack(builder)
        if self.points is not None:
            PolylineStartPointsVector(builder, len(self.points))
            for i in reversed(range(len(self.points))):
                self.points[i].Pack(builder)
            points = builder.EndVector()
        PolylineStart(builder)
        if self.color is not None:
            PolylineAddColor(builder, color)
        if self.points is not None:
            PolylineAddPoints(builder, points)
        polyline = PolylineEnd(builder)
        return polyline
