# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CircleSegment(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CircleSegment()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCircleSegment(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CircleSegment
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CircleSegment
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from rewind_viewer.fbs.Color import Color
            obj = Color()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CircleSegment
    def Center(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from rewind_viewer.fbs.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CircleSegment
    def Radius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CircleSegment
    def StartAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CircleSegment
    def EndAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def CircleSegmentStart(builder):
    builder.StartObject(5)

def Start(builder):
    CircleSegmentStart(builder)

def CircleSegmentAddColor(builder, color):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(color), 0)

def AddColor(builder, color):
    CircleSegmentAddColor(builder, color)

def CircleSegmentAddCenter(builder, center):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(center), 0)

def AddCenter(builder, center):
    CircleSegmentAddCenter(builder, center)

def CircleSegmentAddRadius(builder, radius):
    builder.PrependFloat32Slot(2, radius, 0.0)

def AddRadius(builder, radius):
    CircleSegmentAddRadius(builder, radius)

def CircleSegmentAddStartAngle(builder, startAngle):
    builder.PrependFloat32Slot(3, startAngle, 0.0)

def AddStartAngle(builder, startAngle):
    CircleSegmentAddStartAngle(builder, startAngle)

def CircleSegmentAddEndAngle(builder, endAngle):
    builder.PrependFloat32Slot(4, endAngle, 0.0)

def AddEndAngle(builder, endAngle):
    CircleSegmentAddEndAngle(builder, endAngle)

def CircleSegmentEnd(builder):
    return builder.EndObject()

def End(builder):
    return CircleSegmentEnd(builder)

import rewind_viewer.fbs.Color
import rewind_viewer.fbs.Vector2f
try:
    from typing import Optional
except:
    pass

class CircleSegmentT(object):

    # CircleSegmentT
    def __init__(self):
        self.color = None  # type: Optional[rewind_viewer.fbs.Color.ColorT]
        self.center = None  # type: Optional[rewind_viewer.fbs.Vector2f.Vector2fT]
        self.radius = 0.0  # type: float
        self.startAngle = 0.0  # type: float
        self.endAngle = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        circleSegment = CircleSegment()
        circleSegment.Init(buf, pos)
        return cls.InitFromObj(circleSegment)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, circleSegment):
        x = CircleSegmentT()
        x._UnPack(circleSegment)
        return x

    # CircleSegmentT
    def _UnPack(self, circleSegment):
        if circleSegment is None:
            return
        if circleSegment.Color() is not None:
            self.color = rewind_viewer.fbs.Color.ColorT.InitFromObj(circleSegment.Color())
        if circleSegment.Center() is not None:
            self.center = rewind_viewer.fbs.Vector2f.Vector2fT.InitFromObj(circleSegment.Center())
        self.radius = circleSegment.Radius()
        self.startAngle = circleSegment.StartAngle()
        self.endAngle = circleSegment.EndAngle()

    # CircleSegmentT
    def Pack(self, builder):
        if self.color is not None:
            color = self.color.Pack(builder)
        CircleSegmentStart(builder)
        if self.color is not None:
            CircleSegmentAddColor(builder, color)
        if self.center is not None:
            center = self.center.Pack(builder)
            CircleSegmentAddCenter(builder, center)
        CircleSegmentAddRadius(builder, self.radius)
        CircleSegmentAddStartAngle(builder, self.startAngle)
        CircleSegmentAddEndAngle(builder, self.endAngle)
        circleSegment = CircleSegmentEnd(builder)
        return circleSegment
