# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RewindMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RewindMessage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRewindMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RewindMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RewindMessage
    def CommandType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # RewindMessage
    def Command(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def RewindMessageStart(builder):
    builder.StartObject(2)

def Start(builder):
    RewindMessageStart(builder)

def RewindMessageAddCommandType(builder, commandType):
    builder.PrependUint8Slot(0, commandType, 0)

def AddCommandType(builder, commandType):
    RewindMessageAddCommandType(builder, commandType)

def RewindMessageAddCommand(builder, command):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(command), 0)

def AddCommand(builder, command):
    RewindMessageAddCommand(builder, command)

def RewindMessageEnd(builder):
    return builder.EndObject()

def End(builder):
    return RewindMessageEnd(builder)

import rewind_viewer.fbs.Circle
import rewind_viewer.fbs.Command
import rewind_viewer.fbs.EndFrame
import rewind_viewer.fbs.LogText
import rewind_viewer.fbs.Options
import rewind_viewer.fbs.Polyline
import rewind_viewer.fbs.Popup
import rewind_viewer.fbs.PopupRound
import rewind_viewer.fbs.Rectangle
import rewind_viewer.fbs.Triangle
try:
    from typing import Union
except:
    pass

class RewindMessageT(object):

    # RewindMessageT
    def __init__(self):
        self.commandType = 0  # type: int
        self.command = None  # type: Union[None, rewind_viewer.fbs.Circle.CircleT, rewind_viewer.fbs.Rectangle.RectangleT, rewind_viewer.fbs.Triangle.TriangleT, rewind_viewer.fbs.Polyline.PolylineT, rewind_viewer.fbs.LogText.LogTextT, rewind_viewer.fbs.Popup.PopupT, rewind_viewer.fbs.PopupRound.PopupRoundT, rewind_viewer.fbs.Options.OptionsT, rewind_viewer.fbs.EndFrame.EndFrameT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        rewindMessage = RewindMessage()
        rewindMessage.Init(buf, pos)
        return cls.InitFromObj(rewindMessage)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, rewindMessage):
        x = RewindMessageT()
        x._UnPack(rewindMessage)
        return x

    # RewindMessageT
    def _UnPack(self, rewindMessage):
        if rewindMessage is None:
            return
        self.commandType = rewindMessage.CommandType()
        self.command = rewind_viewer.fbs.Command.CommandCreator(self.commandType, rewindMessage.Command())

    # RewindMessageT
    def Pack(self, builder):
        if self.command is not None:
            command = self.command.Pack(builder)
        RewindMessageStart(builder)
        RewindMessageAddCommandType(builder, self.commandType)
        if self.command is not None:
            RewindMessageAddCommand(builder, command)
        rewindMessage = RewindMessageEnd(builder)
        return rewindMessage
