# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Popup(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Popup()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPopup(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Popup
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Popup
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Popup
    def AreaPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from rewind_viewer.fbs.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Popup
    def AreaSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from rewind_viewer.fbs.Vector2f import Vector2f
            obj = Vector2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def PopupStart(builder):
    builder.StartObject(3)

def Start(builder):
    PopupStart(builder)

def PopupAddText(builder, text):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)

def AddText(builder, text):
    PopupAddText(builder, text)

def PopupAddAreaPosition(builder, areaPosition):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(areaPosition), 0)

def AddAreaPosition(builder, areaPosition):
    PopupAddAreaPosition(builder, areaPosition)

def PopupAddAreaSize(builder, areaSize):
    builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(areaSize), 0)

def AddAreaSize(builder, areaSize):
    PopupAddAreaSize(builder, areaSize)

def PopupEnd(builder):
    return builder.EndObject()

def End(builder):
    return PopupEnd(builder)

import rewind_viewer.fbs.Vector2f
try:
    from typing import Optional
except:
    pass

class PopupT(object):

    # PopupT
    def __init__(self):
        self.text = None  # type: str
        self.areaPosition = None  # type: Optional[rewind_viewer.fbs.Vector2f.Vector2fT]
        self.areaSize = None  # type: Optional[rewind_viewer.fbs.Vector2f.Vector2fT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        popup = Popup()
        popup.Init(buf, pos)
        return cls.InitFromObj(popup)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, popup):
        x = PopupT()
        x._UnPack(popup)
        return x

    # PopupT
    def _UnPack(self, popup):
        if popup is None:
            return
        self.text = popup.Text()
        if popup.AreaPosition() is not None:
            self.areaPosition = rewind_viewer.fbs.Vector2f.Vector2fT.InitFromObj(popup.AreaPosition())
        if popup.AreaSize() is not None:
            self.areaSize = rewind_viewer.fbs.Vector2f.Vector2fT.InitFromObj(popup.AreaSize())

    # PopupT
    def Pack(self, builder):
        if self.text is not None:
            text = builder.CreateString(self.text)
        PopupStart(builder)
        if self.text is not None:
            PopupAddText(builder, text)
        if self.areaPosition is not None:
            areaPosition = self.areaPosition.Pack(builder)
            PopupAddAreaPosition(builder, areaPosition)
        if self.areaSize is not None:
            areaSize = self.areaSize.Pack(builder)
            PopupAddAreaSize(builder, areaSize)
        popup = PopupEnd(builder)
        return popup
