// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type IntInput struct {
	_tab flatbuffers.Table
}

func GetRootAsIntInput(buf []byte, offset flatbuffers.UOffsetT) *IntInput {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &IntInput{}
	x.Init(buf, n+offset)
	return x
}

func FinishIntInputBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsIntInput(buf []byte, offset flatbuffers.UOffsetT) *IntInput {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &IntInput{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedIntInputBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *IntInput) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *IntInput) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *IntInput) DefaultValue() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *IntInput) MutateDefaultValue(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *IntInput) MinValue() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *IntInput) MutateMinValue(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *IntInput) MaxValue() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *IntInput) MutateMaxValue(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func IntInputStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func IntInputAddDefaultValue(builder *flatbuffers.Builder, defaultValue int32) {
	builder.PrependInt32Slot(0, defaultValue, 0)
}
func IntInputAddMinValue(builder *flatbuffers.Builder, minValue int32) {
	builder.PrependInt32Slot(1, minValue, 0)
}
func IntInputAddMaxValue(builder *flatbuffers.Builder, maxValue int32) {
	builder.PrependInt32Slot(2, maxValue, 0)
}
func IntInputEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
