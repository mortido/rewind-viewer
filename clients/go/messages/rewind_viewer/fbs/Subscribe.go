// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Subscribe struct {
	_tab flatbuffers.Table
}

func GetRootAsSubscribe(buf []byte, offset flatbuffers.UOffsetT) *Subscribe {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Subscribe{}
	x.Init(buf, n+offset)
	return x
}

func FinishSubscribeBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsSubscribe(buf []byte, offset flatbuffers.UOffsetT) *Subscribe {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Subscribe{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSubscribeBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Subscribe) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Subscribe) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Subscribe) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Subscribe) Key() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Subscribe) MutateKey(n int8) bool {
	return rcv._tab.MutateInt8Slot(6, n)
}

func (rcv *Subscribe) Continuous() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Subscribe) MutateContinuous(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *Subscribe) CaptureMouse() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Subscribe) MutateCaptureMouse(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *Subscribe) MinPositionChange() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.001
}

func (rcv *Subscribe) MutateMinPositionChange(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func SubscribeStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func SubscribeAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func SubscribeAddKey(builder *flatbuffers.Builder, key int8) {
	builder.PrependInt8Slot(1, key, 0)
}
func SubscribeAddContinuous(builder *flatbuffers.Builder, continuous bool) {
	builder.PrependBoolSlot(2, continuous, false)
}
func SubscribeAddCaptureMouse(builder *flatbuffers.Builder, captureMouse bool) {
	builder.PrependBoolSlot(3, captureMouse, false)
}
func SubscribeAddMinPositionChange(builder *flatbuffers.Builder, minPositionChange float32) {
	builder.PrependFloat32Slot(4, minPositionChange, 0.001)
}
func SubscribeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
