// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RewindMessageT struct {
	Command *CommandT `json:"command"`
}

func (t *RewindMessageT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	commandOffset := t.Command.Pack(builder)

	RewindMessageStart(builder)
	if t.Command != nil {
		RewindMessageAddCommandType(builder, t.Command.Type)
	}
	RewindMessageAddCommand(builder, commandOffset)
	return RewindMessageEnd(builder)
}

func (rcv *RewindMessage) UnPackTo(t *RewindMessageT) {
	commandTable := flatbuffers.Table{}
	if rcv.Command(&commandTable) {
		t.Command = rcv.CommandType().UnPack(commandTable)
	}
}

func (rcv *RewindMessage) UnPack() *RewindMessageT {
	if rcv == nil {
		return nil
	}
	t := &RewindMessageT{}
	rcv.UnPackTo(t)
	return t
}

type RewindMessage struct {
	_tab flatbuffers.Table
}

func GetRootAsRewindMessage(buf []byte, offset flatbuffers.UOffsetT) *RewindMessage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RewindMessage{}
	x.Init(buf, n+offset)
	return x
}

func FinishRewindMessageBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsRewindMessage(buf []byte, offset flatbuffers.UOffsetT) *RewindMessage {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RewindMessage{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRewindMessageBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *RewindMessage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RewindMessage) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RewindMessage) CommandType() Command {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return Command(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *RewindMessage) MutateCommandType(n Command) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *RewindMessage) Command(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func RewindMessageStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func RewindMessageAddCommandType(builder *flatbuffers.Builder, commandType Command) {
	builder.PrependByteSlot(0, byte(commandType), 0)
}
func RewindMessageAddCommand(builder *flatbuffers.Builder, command flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(command), 0)
}
func RewindMessageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
