// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FloatInput struct {
	_tab flatbuffers.Table
}

func GetRootAsFloatInput(buf []byte, offset flatbuffers.UOffsetT) *FloatInput {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FloatInput{}
	x.Init(buf, n+offset)
	return x
}

func FinishFloatInputBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsFloatInput(buf []byte, offset flatbuffers.UOffsetT) *FloatInput {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FloatInput{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedFloatInputBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *FloatInput) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FloatInput) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FloatInput) DefaultValue() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *FloatInput) MutateDefaultValue(n float32) bool {
	return rcv._tab.MutateFloat32Slot(4, n)
}

func (rcv *FloatInput) MinValue() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *FloatInput) MutateMinValue(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *FloatInput) MaxValue() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *FloatInput) MutateMaxValue(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func FloatInputStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func FloatInputAddDefaultValue(builder *flatbuffers.Builder, defaultValue float32) {
	builder.PrependFloat32Slot(0, defaultValue, 0.0)
}
func FloatInputAddMinValue(builder *flatbuffers.Builder, minValue float32) {
	builder.PrependFloat32Slot(1, minValue, 0.0)
}
func FloatInputAddMaxValue(builder *flatbuffers.Builder, maxValue float32) {
	builder.PrependFloat32Slot(2, maxValue, 0.0)
}
func FloatInputEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
