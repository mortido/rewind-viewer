// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SelectInput struct {
	_tab flatbuffers.Table
}

func GetRootAsSelectInput(buf []byte, offset flatbuffers.UOffsetT) *SelectInput {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SelectInput{}
	x.Init(buf, n+offset)
	return x
}

func FinishSelectInputBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsSelectInput(buf []byte, offset flatbuffers.UOffsetT) *SelectInput {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SelectInput{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSelectInputBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *SelectInput) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SelectInput) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SelectInput) Options(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SelectInput) OptionsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SelectInput) SelectedOption() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SelectInput) MutateSelectedOption(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func SelectInputStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func SelectInputAddOptions(builder *flatbuffers.Builder, options flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(options), 0)
}
func SelectInputStartOptionsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SelectInputAddSelectedOption(builder *flatbuffers.Builder, selectedOption uint16) {
	builder.PrependUint16Slot(1, selectedOption, 0)
}
func SelectInputEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
