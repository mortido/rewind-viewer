// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Layer struct {
	_tab flatbuffers.Table
}

func GetRootAsLayer(buf []byte, offset flatbuffers.UOffsetT) *Layer {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Layer{}
	x.Init(buf, n+offset)
	return x
}

func FinishLayerBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsLayer(buf []byte, offset flatbuffers.UOffsetT) *Layer {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Layer{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedLayerBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Layer) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Layer) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Layer) Id() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Layer) MutateId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *Layer) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Layer) UsePermanentFrame() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Layer) MutateUsePermanentFrame(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *Layer) Origin() LayerOrigin {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return LayerOrigin(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Layer) MutateOrigin(n LayerOrigin) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

func LayerStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func LayerAddId(builder *flatbuffers.Builder, id uint32) {
	builder.PrependUint32Slot(0, id, 0)
}
func LayerAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func LayerAddUsePermanentFrame(builder *flatbuffers.Builder, usePermanentFrame bool) {
	builder.PrependBoolSlot(2, usePermanentFrame, false)
}
func LayerAddOrigin(builder *flatbuffers.Builder, origin LayerOrigin) {
	builder.PrependInt8Slot(3, int8(origin), 0)
}
func LayerEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
