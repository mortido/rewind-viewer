// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CameraView struct {
	_tab flatbuffers.Table
}

func GetRootAsCameraView(buf []byte, offset flatbuffers.UOffsetT) *CameraView {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CameraView{}
	x.Init(buf, n+offset)
	return x
}

func FinishCameraViewBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCameraView(buf []byte, offset flatbuffers.UOffsetT) *CameraView {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CameraView{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCameraViewBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CameraView) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CameraView) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CameraView) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CameraView) Position(obj *Vector2f) *Vector2f {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vector2f)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CameraView) ViewRadius() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CameraView) MutateViewRadius(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func CameraViewStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func CameraViewAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func CameraViewAddPosition(builder *flatbuffers.Builder, position flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(position), 0)
}
func CameraViewAddViewRadius(builder *flatbuffers.Builder, viewRadius float32) {
	builder.PrependFloat32Slot(2, viewRadius, 0.0)
}
func CameraViewEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
