// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LogTextT struct {
	Text string `json:"text"`
}

func (t *LogTextT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	textOffset := flatbuffers.UOffsetT(0)
	if t.Text != "" {
		textOffset = builder.CreateString(t.Text)
	}
	LogTextStart(builder)
	LogTextAddText(builder, textOffset)
	return LogTextEnd(builder)
}

func (rcv *LogText) UnPackTo(t *LogTextT) {
	t.Text = string(rcv.Text())
}

func (rcv *LogText) UnPack() *LogTextT {
	if rcv == nil {
		return nil
	}
	t := &LogTextT{}
	rcv.UnPackTo(t)
	return t
}

type LogText struct {
	_tab flatbuffers.Table
}

func GetRootAsLogText(buf []byte, offset flatbuffers.UOffsetT) *LogText {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LogText{}
	x.Init(buf, n+offset)
	return x
}

func FinishLogTextBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsLogText(buf []byte, offset flatbuffers.UOffsetT) *LogText {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LogText{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedLogTextBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *LogText) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LogText) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LogText) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func LogTextStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func LogTextAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(text), 0)
}
func LogTextEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
