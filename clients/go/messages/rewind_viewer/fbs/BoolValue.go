// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BoolValue struct {
	_tab flatbuffers.Table
}

func GetRootAsBoolValue(buf []byte, offset flatbuffers.UOffsetT) *BoolValue {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BoolValue{}
	x.Init(buf, n+offset)
	return x
}

func FinishBoolValueBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsBoolValue(buf []byte, offset flatbuffers.UOffsetT) *BoolValue {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BoolValue{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedBoolValueBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *BoolValue) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BoolValue) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BoolValue) Value() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *BoolValue) MutateValue(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func BoolValueStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func BoolValueAddValue(builder *flatbuffers.Builder, value bool) {
	builder.PrependBoolSlot(0, value, false)
}
func BoolValueEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
