// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type OptionsT struct {
	Map *MapT `json:"map"`
	Layer *LayerT `json:"layer"`
}

func (t *OptionsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	map_Offset := t.Map.Pack(builder)
	layerOffset := t.Layer.Pack(builder)
	OptionsStart(builder)
	OptionsAddMap(builder, map_Offset)
	OptionsAddLayer(builder, layerOffset)
	return OptionsEnd(builder)
}

func (rcv *Options) UnPackTo(t *OptionsT) {
	t.Map = rcv.Map(nil).UnPack()
	t.Layer = rcv.Layer(nil).UnPack()
}

func (rcv *Options) UnPack() *OptionsT {
	if rcv == nil {
		return nil
	}
	t := &OptionsT{}
	rcv.UnPackTo(t)
	return t
}

type Options struct {
	_tab flatbuffers.Table
}

func GetRootAsOptions(buf []byte, offset flatbuffers.UOffsetT) *Options {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Options{}
	x.Init(buf, n+offset)
	return x
}

func FinishOptionsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsOptions(buf []byte, offset flatbuffers.UOffsetT) *Options {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Options{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedOptionsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Options) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Options) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Options) Map(obj *Map) *Map {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Map)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Options) Layer(obj *Layer) *Layer {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Layer)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func OptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func OptionsAddMap(builder *flatbuffers.Builder, map_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(map_), 0)
}
func OptionsAddLayer(builder *flatbuffers.Builder, layer flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(layer), 0)
}
func OptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
