// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Arc struct {
	_tab flatbuffers.Table
}

func GetRootAsArc(buf []byte, offset flatbuffers.UOffsetT) *Arc {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Arc{}
	x.Init(buf, n+offset)
	return x
}

func FinishArcBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsArc(buf []byte, offset flatbuffers.UOffsetT) *Arc {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Arc{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedArcBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Arc) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Arc) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Arc) Color(obj *Color) *Color {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Color)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Arc) Center(obj *Vector2f) *Vector2f {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vector2f)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Arc) Radius() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Arc) MutateRadius(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func (rcv *Arc) StartAngle() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Arc) MutateStartAngle(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

func (rcv *Arc) EndAngle() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Arc) MutateEndAngle(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func ArcStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func ArcAddColor(builder *flatbuffers.Builder, color flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(color), 0)
}
func ArcAddCenter(builder *flatbuffers.Builder, center flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(center), 0)
}
func ArcAddRadius(builder *flatbuffers.Builder, radius float32) {
	builder.PrependFloat32Slot(2, radius, 0.0)
}
func ArcAddStartAngle(builder *flatbuffers.Builder, startAngle float32) {
	builder.PrependFloat32Slot(3, startAngle, 0.0)
}
func ArcAddEndAngle(builder *flatbuffers.Builder, endAngle float32) {
	builder.PrependFloat32Slot(4, endAngle, 0.0)
}
func ArcEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
