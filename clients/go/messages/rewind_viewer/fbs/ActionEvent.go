// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ActionEvent struct {
	_tab flatbuffers.Table
}

func GetRootAsActionEvent(buf []byte, offset flatbuffers.UOffsetT) *ActionEvent {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ActionEvent{}
	x.Init(buf, n+offset)
	return x
}

func FinishActionEventBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsActionEvent(buf []byte, offset flatbuffers.UOffsetT) *ActionEvent {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ActionEvent{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedActionEventBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ActionEvent) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ActionEvent) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ActionEvent) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ActionEvent) ValueType() ActionValue {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ActionValue(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ActionEvent) MutateValueType(n ActionValue) bool {
	return rcv._tab.MutateByteSlot(6, byte(n))
}

func (rcv *ActionEvent) Value(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func ActionEventStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ActionEventAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func ActionEventAddValueType(builder *flatbuffers.Builder, valueType ActionValue) {
	builder.PrependByteSlot(1, byte(valueType), 0)
}
func ActionEventAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(value), 0)
}
func ActionEventEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
