// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PopupRoundT struct {
	Text string `json:"text"`
	AreaCenter *Vector2fT `json:"area_center"`
	AreaRadius float32 `json:"area_radius"`
}

func (t *PopupRoundT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	textOffset := flatbuffers.UOffsetT(0)
	if t.Text != "" {
		textOffset = builder.CreateString(t.Text)
	}
	PopupRoundStart(builder)
	PopupRoundAddText(builder, textOffset)
	areaCenterOffset := t.AreaCenter.Pack(builder)
	PopupRoundAddAreaCenter(builder, areaCenterOffset)
	PopupRoundAddAreaRadius(builder, t.AreaRadius)
	return PopupRoundEnd(builder)
}

func (rcv *PopupRound) UnPackTo(t *PopupRoundT) {
	t.Text = string(rcv.Text())
	t.AreaCenter = rcv.AreaCenter(nil).UnPack()
	t.AreaRadius = rcv.AreaRadius()
}

func (rcv *PopupRound) UnPack() *PopupRoundT {
	if rcv == nil {
		return nil
	}
	t := &PopupRoundT{}
	rcv.UnPackTo(t)
	return t
}

type PopupRound struct {
	_tab flatbuffers.Table
}

func GetRootAsPopupRound(buf []byte, offset flatbuffers.UOffsetT) *PopupRound {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PopupRound{}
	x.Init(buf, n+offset)
	return x
}

func FinishPopupRoundBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPopupRound(buf []byte, offset flatbuffers.UOffsetT) *PopupRound {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PopupRound{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPopupRoundBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *PopupRound) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PopupRound) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PopupRound) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PopupRound) AreaCenter(obj *Vector2f) *Vector2f {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vector2f)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *PopupRound) AreaRadius() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *PopupRound) MutateAreaRadius(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func PopupRoundStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func PopupRoundAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(text), 0)
}
func PopupRoundAddAreaCenter(builder *flatbuffers.Builder, areaCenter flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(areaCenter), 0)
}
func PopupRoundAddAreaRadius(builder *flatbuffers.Builder, areaRadius float32) {
	builder.PrependFloat32Slot(2, areaRadius, 0.0)
}
func PopupRoundEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
