// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ActionInput, unionToActionInput, unionListToActionInput } from '../../rewind-viewer/fbs/action-input.js';


export class CreateAction {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CreateAction {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCreateAction(bb:flatbuffers.ByteBuffer, obj?:CreateAction):CreateAction {
  return (obj || new CreateAction()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCreateAction(bb:flatbuffers.ByteBuffer, obj?:CreateAction):CreateAction {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CreateAction()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

inputType():ActionInput {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : ActionInput.NONE;
}

input<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startCreateAction(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addInputType(builder:flatbuffers.Builder, inputType:ActionInput) {
  builder.addFieldInt8(1, inputType, ActionInput.NONE);
}

static addInput(builder:flatbuffers.Builder, inputOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, inputOffset, 0);
}

static endCreateAction(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // name
  return offset;
}

static createCreateAction(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, inputType:ActionInput, inputOffset:flatbuffers.Offset):flatbuffers.Offset {
  CreateAction.startCreateAction(builder);
  CreateAction.addName(builder, nameOffset);
  CreateAction.addInputType(builder, inputType);
  CreateAction.addInput(builder, inputOffset);
  return CreateAction.endCreateAction(builder);
}
}
