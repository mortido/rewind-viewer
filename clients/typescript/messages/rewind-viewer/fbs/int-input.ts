// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class IntInput {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):IntInput {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsIntInput(bb:flatbuffers.ByteBuffer, obj?:IntInput):IntInput {
  return (obj || new IntInput()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsIntInput(bb:flatbuffers.ByteBuffer, obj?:IntInput):IntInput {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new IntInput()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

defaultValue():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

minValue():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maxValue():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startIntInput(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addDefaultValue(builder:flatbuffers.Builder, defaultValue:number) {
  builder.addFieldInt32(0, defaultValue, 0);
}

static addMinValue(builder:flatbuffers.Builder, minValue:number) {
  builder.addFieldInt32(1, minValue, 0);
}

static addMaxValue(builder:flatbuffers.Builder, maxValue:number) {
  builder.addFieldInt32(2, maxValue, 0);
}

static endIntInput(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createIntInput(builder:flatbuffers.Builder, defaultValue:number, minValue:number, maxValue:number):flatbuffers.Offset {
  IntInput.startIntInput(builder);
  IntInput.addDefaultValue(builder, defaultValue);
  IntInput.addMinValue(builder, minValue);
  IntInput.addMaxValue(builder, maxValue);
  return IntInput.endIntInput(builder);
}
}
