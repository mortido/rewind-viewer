// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Color } from '../../rewind-viewer/fbs/color.js';
import { Vector2f } from '../../rewind-viewer/fbs/vector2f.js';


export class Arc {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Arc {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsArc(bb:flatbuffers.ByteBuffer, obj?:Arc):Arc {
  return (obj || new Arc()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsArc(bb:flatbuffers.ByteBuffer, obj?:Arc):Arc {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Arc()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

color(obj?:Color):Color|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Color()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

center(obj?:Vector2f):Vector2f|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Vector2f()).__init(this.bb_pos + offset, this.bb!) : null;
}

radius():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

startAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

endAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startArc(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addColor(builder:flatbuffers.Builder, colorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, colorOffset, 0);
}

static addCenter(builder:flatbuffers.Builder, centerOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, centerOffset, 0);
}

static addRadius(builder:flatbuffers.Builder, radius:number) {
  builder.addFieldFloat32(2, radius, 0.0);
}

static addStartAngle(builder:flatbuffers.Builder, startAngle:number) {
  builder.addFieldFloat32(3, startAngle, 0.0);
}

static addEndAngle(builder:flatbuffers.Builder, endAngle:number) {
  builder.addFieldFloat32(4, endAngle, 0.0);
}

static endArc(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // center
  return offset;
}

}
