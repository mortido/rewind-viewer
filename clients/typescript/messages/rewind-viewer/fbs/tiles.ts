// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Vector2f } from '../../rewind-viewer/fbs/vector2f.js';


export class Tiles {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Tiles {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTiles(bb:flatbuffers.ByteBuffer, obj?:Tiles):Tiles {
  return (obj || new Tiles()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTiles(bb:flatbuffers.ByteBuffer, obj?:Tiles):Tiles {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Tiles()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

position(obj?:Vector2f):Vector2f|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Vector2f()).__init(this.bb_pos + offset, this.bb!) : null;
}

cellSize(obj?:Vector2f):Vector2f|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Vector2f()).__init(this.bb_pos + offset, this.bb!) : null;
}

rowSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

colors(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

colorsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

colorsArray():Uint32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startTiles(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addPosition(builder:flatbuffers.Builder, positionOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, positionOffset, 0);
}

static addCellSize(builder:flatbuffers.Builder, cellSizeOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, cellSizeOffset, 0);
}

static addRowSize(builder:flatbuffers.Builder, rowSize:number) {
  builder.addFieldInt16(2, rowSize, 0);
}

static addColors(builder:flatbuffers.Builder, colorsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, colorsOffset, 0);
}

static createColorsVector(builder:flatbuffers.Builder, data:number[]|Uint32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createColorsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createColorsVector(builder:flatbuffers.Builder, data:number[]|Uint32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startColorsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endTiles(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // position
  builder.requiredField(offset, 6) // cell_size
  builder.requiredField(offset, 10) // colors
  return offset;
}

}
