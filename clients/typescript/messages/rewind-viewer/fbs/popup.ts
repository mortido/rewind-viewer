// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Vector2f, Vector2fT } from '../../rewind-viewer/fbs/vector2f.js';


export class Popup implements flatbuffers.IUnpackableObject<PopupT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Popup {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPopup(bb:flatbuffers.ByteBuffer, obj?:Popup):Popup {
  return (obj || new Popup()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPopup(bb:flatbuffers.ByteBuffer, obj?:Popup):Popup {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Popup()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

text():string|null
text(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
text(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

areaPosition(obj?:Vector2f):Vector2f|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Vector2f()).__init(this.bb_pos + offset, this.bb!) : null;
}

areaSize(obj?:Vector2f):Vector2f|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Vector2f()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startPopup(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addText(builder:flatbuffers.Builder, textOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, textOffset, 0);
}

static addAreaPosition(builder:flatbuffers.Builder, areaPositionOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, areaPositionOffset, 0);
}

static addAreaSize(builder:flatbuffers.Builder, areaSizeOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, areaSizeOffset, 0);
}

static endPopup(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // text
  builder.requiredField(offset, 6) // area_position
  builder.requiredField(offset, 8) // area_size
  return offset;
}


unpack(): PopupT {
  return new PopupT(
    this.text(),
    (this.areaPosition() !== null ? this.areaPosition()!.unpack() : null),
    (this.areaSize() !== null ? this.areaSize()!.unpack() : null)
  );
}


unpackTo(_o: PopupT): void {
  _o.text = this.text();
  _o.areaPosition = (this.areaPosition() !== null ? this.areaPosition()!.unpack() : null);
  _o.areaSize = (this.areaSize() !== null ? this.areaSize()!.unpack() : null);
}
}

export class PopupT implements flatbuffers.IGeneratedObject {
constructor(
  public text: string|Uint8Array|null = null,
  public areaPosition: Vector2fT|null = null,
  public areaSize: Vector2fT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const text = (this.text !== null ? builder.createString(this.text!) : 0);

  Popup.startPopup(builder);
  Popup.addText(builder, text);
  Popup.addAreaPosition(builder, (this.areaPosition !== null ? this.areaPosition!.pack(builder) : 0));
  Popup.addAreaSize(builder, (this.areaSize !== null ? this.areaSize!.pack(builder) : 0));

  return Popup.endPopup(builder);
}
}
