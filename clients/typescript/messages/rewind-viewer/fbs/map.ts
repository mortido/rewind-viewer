// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Vector2f } from '../../rewind-viewer/fbs/vector2f.js';


export class Map {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Map {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMap(bb:flatbuffers.ByteBuffer, obj?:Map):Map {
  return (obj || new Map()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMap(bb:flatbuffers.ByteBuffer, obj?:Map):Map {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Map()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

position(obj?:Vector2f):Vector2f|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Vector2f()).__init(this.bb_pos + offset, this.bb!) : null;
}

size(obj?:Vector2f):Vector2f|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Vector2f()).__init(this.bb_pos + offset, this.bb!) : null;
}

xGrid():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

yGrid():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

static startMap(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addPosition(builder:flatbuffers.Builder, positionOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, positionOffset, 0);
}

static addSize(builder:flatbuffers.Builder, sizeOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, sizeOffset, 0);
}

static addXGrid(builder:flatbuffers.Builder, xGrid:number) {
  builder.addFieldInt16(2, xGrid, 0);
}

static addYGrid(builder:flatbuffers.Builder, yGrid:number) {
  builder.addFieldInt16(3, yGrid, 0);
}

static endMap(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // position
  builder.requiredField(offset, 6) // size
  return offset;
}

}
