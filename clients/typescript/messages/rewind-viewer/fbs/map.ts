// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class Map implements flatbuffers.IUnpackableObject<MapT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Map {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMap(bb:flatbuffers.ByteBuffer, obj?:Map):Map {
  return (obj || new Map()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMap(bb:flatbuffers.ByteBuffer, obj?:Map):Map {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Map()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

width():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

height():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

xGrid():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

yGrid():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

static startMap(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addWidth(builder:flatbuffers.Builder, width:number) {
  builder.addFieldFloat32(0, width, 0.0);
}

static addHeight(builder:flatbuffers.Builder, height:number) {
  builder.addFieldFloat32(1, height, 0.0);
}

static addXGrid(builder:flatbuffers.Builder, xGrid:number) {
  builder.addFieldInt16(2, xGrid, 0);
}

static addYGrid(builder:flatbuffers.Builder, yGrid:number) {
  builder.addFieldInt16(3, yGrid, 0);
}

static endMap(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMap(builder:flatbuffers.Builder, width:number, height:number, xGrid:number, yGrid:number):flatbuffers.Offset {
  Map.startMap(builder);
  Map.addWidth(builder, width);
  Map.addHeight(builder, height);
  Map.addXGrid(builder, xGrid);
  Map.addYGrid(builder, yGrid);
  return Map.endMap(builder);
}

unpack(): MapT {
  return new MapT(
    this.width(),
    this.height(),
    this.xGrid(),
    this.yGrid()
  );
}


unpackTo(_o: MapT): void {
  _o.width = this.width();
  _o.height = this.height();
  _o.xGrid = this.xGrid();
  _o.yGrid = this.yGrid();
}
}

export class MapT implements flatbuffers.IGeneratedObject {
constructor(
  public width: number = 0.0,
  public height: number = 0.0,
  public xGrid: number = 0,
  public yGrid: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return Map.createMap(builder,
    this.width,
    this.height,
    this.xGrid,
    this.yGrid
  );
}
}
