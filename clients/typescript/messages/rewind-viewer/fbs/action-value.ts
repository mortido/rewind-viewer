// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { BoolValue } from '../../rewind-viewer/fbs/bool-value.js';
import { FloatValue } from '../../rewind-viewer/fbs/float-value.js';
import { IntValue } from '../../rewind-viewer/fbs/int-value.js';
import { StringValue } from '../../rewind-viewer/fbs/string-value.js';


export enum ActionValue {
  NONE = 0,
  IntValue = 1,
  FloatValue = 2,
  BoolValue = 3,
  StringValue = 4
}

export function unionToActionValue(
  type: ActionValue,
  accessor: (obj:BoolValue|FloatValue|IntValue|StringValue) => BoolValue|FloatValue|IntValue|StringValue|null
): BoolValue|FloatValue|IntValue|StringValue|null {
  switch(ActionValue[type]) {
    case 'NONE': return null; 
    case 'IntValue': return accessor(new IntValue())! as IntValue;
    case 'FloatValue': return accessor(new FloatValue())! as FloatValue;
    case 'BoolValue': return accessor(new BoolValue())! as BoolValue;
    case 'StringValue': return accessor(new StringValue())! as StringValue;
    default: return null;
  }
}

export function unionListToActionValue(
  type: ActionValue, 
  accessor: (index: number, obj:BoolValue|FloatValue|IntValue|StringValue) => BoolValue|FloatValue|IntValue|StringValue|null, 
  index: number
): BoolValue|FloatValue|IntValue|StringValue|null {
  switch(ActionValue[type]) {
    case 'NONE': return null; 
    case 'IntValue': return accessor(index, new IntValue())! as IntValue;
    case 'FloatValue': return accessor(index, new FloatValue())! as FloatValue;
    case 'BoolValue': return accessor(index, new BoolValue())! as BoolValue;
    case 'StringValue': return accessor(index, new StringValue())! as StringValue;
    default: return null;
  }
}
