// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { LayerOrigin } from '../../rewind-viewer/fbs/layer-origin.js';


export class Layer {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Layer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLayer(bb:flatbuffers.ByteBuffer, obj?:Layer):Layer {
  return (obj || new Layer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLayer(bb:flatbuffers.ByteBuffer, obj?:Layer):Layer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Layer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

usePermanentFrame():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

origin():LayerOrigin {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : LayerOrigin.GAME;
}

static startLayer(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt32(0, id, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static addUsePermanentFrame(builder:flatbuffers.Builder, usePermanentFrame:boolean) {
  builder.addFieldInt8(2, +usePermanentFrame, +false);
}

static addOrigin(builder:flatbuffers.Builder, origin:LayerOrigin) {
  builder.addFieldInt8(3, origin, LayerOrigin.GAME);
}

static endLayer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createLayer(builder:flatbuffers.Builder, id:number, nameOffset:flatbuffers.Offset, usePermanentFrame:boolean, origin:LayerOrigin):flatbuffers.Offset {
  Layer.startLayer(builder);
  Layer.addId(builder, id);
  Layer.addName(builder, nameOffset);
  Layer.addUsePermanentFrame(builder, usePermanentFrame);
  Layer.addOrigin(builder, origin);
  return Layer.endLayer(builder);
}
}
