// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Color, ColorT } from '../../rewind-viewer/fbs/color.js';
import { Vector2f, Vector2fT } from '../../rewind-viewer/fbs/vector2f.js';


export class Triangle implements flatbuffers.IUnpackableObject<TriangleT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Triangle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTriangle(bb:flatbuffers.ByteBuffer, obj?:Triangle):Triangle {
  return (obj || new Triangle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTriangle(bb:flatbuffers.ByteBuffer, obj?:Triangle):Triangle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Triangle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

color(obj?:Color):Color|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Color()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

points(index: number, obj?:Vector2f):Vector2f|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Vector2f()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 8, this.bb!) : null;
}

pointsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startTriangle(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addColor(builder:flatbuffers.Builder, colorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, colorOffset, 0);
}

static addPoints(builder:flatbuffers.Builder, pointsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, pointsOffset, 0);
}

static startPointsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 4);
}

static endTriangle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // points
  return offset;
}

static createTriangle(builder:flatbuffers.Builder, colorOffset:flatbuffers.Offset, pointsOffset:flatbuffers.Offset):flatbuffers.Offset {
  Triangle.startTriangle(builder);
  Triangle.addColor(builder, colorOffset);
  Triangle.addPoints(builder, pointsOffset);
  return Triangle.endTriangle(builder);
}

unpack(): TriangleT {
  return new TriangleT(
    (this.color() !== null ? this.color()!.unpack() : null),
    this.bb!.createObjList<Vector2f, Vector2fT>(this.points.bind(this), this.pointsLength())
  );
}


unpackTo(_o: TriangleT): void {
  _o.color = (this.color() !== null ? this.color()!.unpack() : null);
  _o.points = this.bb!.createObjList<Vector2f, Vector2fT>(this.points.bind(this), this.pointsLength());
}
}

export class TriangleT implements flatbuffers.IGeneratedObject {
constructor(
  public color: ColorT|null = null,
  public points: (Vector2fT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const color = (this.color !== null ? this.color!.pack(builder) : 0);
  const points = builder.createStructOffsetList(this.points, Triangle.startPointsVector);

  return Triangle.createTriangle(builder,
    color,
    points
  );
}
}
