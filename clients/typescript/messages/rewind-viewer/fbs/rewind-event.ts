// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { MousePath } from '../../rewind-viewer/fbs/mouse-path.js';


export class RewindEvent {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RewindEvent {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRewindEvent(bb:flatbuffers.ByteBuffer, obj?:RewindEvent):RewindEvent {
  return (obj || new RewindEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRewindEvent(bb:flatbuffers.ByteBuffer, obj?:RewindEvent):RewindEvent {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RewindEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

key():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

mousePath(index: number, obj?:MousePath):MousePath|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new MousePath()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

mousePathLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startRewindEvent(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addKey(builder:flatbuffers.Builder, key:number) {
  builder.addFieldInt8(0, key, 0);
}

static addMousePath(builder:flatbuffers.Builder, mousePathOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, mousePathOffset, 0);
}

static createMousePathVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMousePathVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endRewindEvent(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRewindEvent(builder:flatbuffers.Builder, key:number, mousePathOffset:flatbuffers.Offset):flatbuffers.Offset {
  RewindEvent.startRewindEvent(builder);
  RewindEvent.addKey(builder, key);
  RewindEvent.addMousePath(builder, mousePathOffset);
  return RewindEvent.endRewindEvent(builder);
}
}
