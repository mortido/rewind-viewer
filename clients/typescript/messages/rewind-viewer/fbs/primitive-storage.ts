// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { CircleSegment } from '../../rewind-viewer/fbs/circle-segment.js';
import { ColorPoint } from '../../rewind-viewer/fbs/color-point.js';
import { Vector2f } from '../../rewind-viewer/fbs/vector2f.js';


export class PrimitiveStorage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PrimitiveStorage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPrimitiveStorage(bb:flatbuffers.ByteBuffer, obj?:PrimitiveStorage):PrimitiveStorage {
  return (obj || new PrimitiveStorage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPrimitiveStorage(bb:flatbuffers.ByteBuffer, obj?:PrimitiveStorage):PrimitiveStorage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PrimitiveStorage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

colorVertexes(index: number, obj?:ColorPoint):ColorPoint|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ColorPoint()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

colorVertexesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

colorCircles(index: number, obj?:CircleSegment):CircleSegment|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new CircleSegment()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

colorCirclesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

vertexes(index: number, obj?:Vector2f):Vector2f|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Vector2f()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 8, this.bb!) : null;
}

vertexesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

circles(index: number, obj?:CircleSegment):CircleSegment|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new CircleSegment()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

circlesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startPrimitiveStorage(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addColorVertexes(builder:flatbuffers.Builder, colorVertexesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, colorVertexesOffset, 0);
}

static createColorVertexesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startColorVertexesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addColorCircles(builder:flatbuffers.Builder, colorCirclesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, colorCirclesOffset, 0);
}

static createColorCirclesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startColorCirclesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addVertexes(builder:flatbuffers.Builder, vertexesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, vertexesOffset, 0);
}

static startVertexesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 4);
}

static addCircles(builder:flatbuffers.Builder, circlesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, circlesOffset, 0);
}

static createCirclesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCirclesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endPrimitiveStorage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPrimitiveStorage(builder:flatbuffers.Builder, colorVertexesOffset:flatbuffers.Offset, colorCirclesOffset:flatbuffers.Offset, vertexesOffset:flatbuffers.Offset, circlesOffset:flatbuffers.Offset):flatbuffers.Offset {
  PrimitiveStorage.startPrimitiveStorage(builder);
  PrimitiveStorage.addColorVertexes(builder, colorVertexesOffset);
  PrimitiveStorage.addColorCircles(builder, colorCirclesOffset);
  PrimitiveStorage.addVertexes(builder, vertexesOffset);
  PrimitiveStorage.addCircles(builder, circlesOffset);
  return PrimitiveStorage.endPrimitiveStorage(builder);
}
}
