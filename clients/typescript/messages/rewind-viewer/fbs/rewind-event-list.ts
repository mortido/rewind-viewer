// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ActionEvent } from '../../rewind-viewer/fbs/action-event.js';
import { KeyEvent } from '../../rewind-viewer/fbs/key-event.js';


export class RewindEventList {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RewindEventList {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRewindEventList(bb:flatbuffers.ByteBuffer, obj?:RewindEventList):RewindEventList {
  return (obj || new RewindEventList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRewindEventList(bb:flatbuffers.ByteBuffer, obj?:RewindEventList):RewindEventList {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RewindEventList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

keyEvents(index: number, obj?:KeyEvent):KeyEvent|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new KeyEvent()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

keyEventsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

actionEvents(index: number, obj?:ActionEvent):ActionEvent|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new ActionEvent()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

actionEventsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startRewindEventList(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addKeyEvents(builder:flatbuffers.Builder, keyEventsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, keyEventsOffset, 0);
}

static createKeyEventsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startKeyEventsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addActionEvents(builder:flatbuffers.Builder, actionEventsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, actionEventsOffset, 0);
}

static createActionEventsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startActionEventsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endRewindEventList(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishRewindEventListBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedRewindEventListBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createRewindEventList(builder:flatbuffers.Builder, keyEventsOffset:flatbuffers.Offset, actionEventsOffset:flatbuffers.Offset):flatbuffers.Offset {
  RewindEventList.startRewindEventList(builder);
  RewindEventList.addKeyEvents(builder, keyEventsOffset);
  RewindEventList.addActionEvents(builder, actionEventsOffset);
  return RewindEventList.endRewindEventList(builder);
}
}
