// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { PrimitiveIndices } from '../../rewind-viewer/fbs/primitive-indices.js';
import { PrimitiveStorage } from '../../rewind-viewer/fbs/primitive-storage.js';


export class Primitives {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Primitives {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPrimitives(bb:flatbuffers.ByteBuffer, obj?:Primitives):Primitives {
  return (obj || new Primitives()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPrimitives(bb:flatbuffers.ByteBuffer, obj?:Primitives):Primitives {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Primitives()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

storage(obj?:PrimitiveStorage):PrimitiveStorage|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new PrimitiveStorage()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

indices(index: number, obj?:PrimitiveIndices):PrimitiveIndices|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new PrimitiveIndices()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

indicesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startPrimitives(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addStorage(builder:flatbuffers.Builder, storageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, storageOffset, 0);
}

static addIndices(builder:flatbuffers.Builder, indicesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, indicesOffset, 0);
}

static createIndicesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startIndicesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endPrimitives(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // storage
  builder.requiredField(offset, 6) // indices
  return offset;
}

static createPrimitives(builder:flatbuffers.Builder, storageOffset:flatbuffers.Offset, indicesOffset:flatbuffers.Offset):flatbuffers.Offset {
  Primitives.startPrimitives(builder);
  Primitives.addStorage(builder, storageOffset);
  Primitives.addIndices(builder, indicesOffset);
  return Primitives.endPrimitives(builder);
}
}
