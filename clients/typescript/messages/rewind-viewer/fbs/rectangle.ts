// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Color, ColorT } from '../../rewind-viewer/fbs/color.js';
import { Vector2f, Vector2fT } from '../../rewind-viewer/fbs/vector2f.js';


export class Rectangle implements flatbuffers.IUnpackableObject<RectangleT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Rectangle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRectangle(bb:flatbuffers.ByteBuffer, obj?:Rectangle):Rectangle {
  return (obj || new Rectangle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRectangle(bb:flatbuffers.ByteBuffer, obj?:Rectangle):Rectangle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Rectangle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

color(obj?:Color):Color|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Color()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

position(obj?:Vector2f):Vector2f|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Vector2f()).__init(this.bb_pos + offset, this.bb!) : null;
}

size(obj?:Vector2f):Vector2f|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Vector2f()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startRectangle(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addColor(builder:flatbuffers.Builder, colorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, colorOffset, 0);
}

static addPosition(builder:flatbuffers.Builder, positionOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, positionOffset, 0);
}

static addSize(builder:flatbuffers.Builder, sizeOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, sizeOffset, 0);
}

static endRectangle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // color
  builder.requiredField(offset, 6) // position
  builder.requiredField(offset, 8) // size
  return offset;
}


unpack(): RectangleT {
  return new RectangleT(
    (this.color() !== null ? this.color()!.unpack() : null),
    (this.position() !== null ? this.position()!.unpack() : null),
    (this.size() !== null ? this.size()!.unpack() : null)
  );
}


unpackTo(_o: RectangleT): void {
  _o.color = (this.color() !== null ? this.color()!.unpack() : null);
  _o.position = (this.position() !== null ? this.position()!.unpack() : null);
  _o.size = (this.size() !== null ? this.size()!.unpack() : null);
}
}

export class RectangleT implements flatbuffers.IGeneratedObject {
constructor(
  public color: ColorT|null = null,
  public position: Vector2fT|null = null,
  public size: Vector2fT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const color = (this.color !== null ? this.color!.pack(builder) : 0);

  Rectangle.startRectangle(builder);
  Rectangle.addColor(builder, color);
  Rectangle.addPosition(builder, (this.position !== null ? this.position!.pack(builder) : 0));
  Rectangle.addSize(builder, (this.size !== null ? this.size!.pack(builder) : 0));

  return Rectangle.endRectangle(builder);
}
}
