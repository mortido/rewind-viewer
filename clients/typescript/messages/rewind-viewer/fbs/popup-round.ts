// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Vector2f } from '../../rewind-viewer/fbs/vector2f.js';


export class PopupRound {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PopupRound {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPopupRound(bb:flatbuffers.ByteBuffer, obj?:PopupRound):PopupRound {
  return (obj || new PopupRound()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPopupRound(bb:flatbuffers.ByteBuffer, obj?:PopupRound):PopupRound {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PopupRound()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

text():string|null
text(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
text(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

areaCenter(obj?:Vector2f):Vector2f|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Vector2f()).__init(this.bb_pos + offset, this.bb!) : null;
}

areaRadius():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startPopupRound(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addText(builder:flatbuffers.Builder, textOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, textOffset, 0);
}

static addAreaCenter(builder:flatbuffers.Builder, areaCenterOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, areaCenterOffset, 0);
}

static addAreaRadius(builder:flatbuffers.Builder, areaRadius:number) {
  builder.addFieldFloat32(2, areaRadius, 0.0);
}

static endPopupRound(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // text
  builder.requiredField(offset, 6) // area_center
  return offset;
}

}
