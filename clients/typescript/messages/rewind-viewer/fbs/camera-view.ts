// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Vector2f, Vector2fT } from '../../rewind-viewer/fbs/vector2f.js';


export class CameraView implements flatbuffers.IUnpackableObject<CameraViewT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CameraView {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCameraView(bb:flatbuffers.ByteBuffer, obj?:CameraView):CameraView {
  return (obj || new CameraView()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCameraView(bb:flatbuffers.ByteBuffer, obj?:CameraView):CameraView {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CameraView()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

position(obj?:Vector2f):Vector2f|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Vector2f()).__init(this.bb_pos + offset, this.bb!) : null;
}

viewRadius():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startCameraView(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addPosition(builder:flatbuffers.Builder, positionOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, positionOffset, 0);
}

static addViewRadius(builder:flatbuffers.Builder, viewRadius:number) {
  builder.addFieldFloat32(2, viewRadius, 0.0);
}

static endCameraView(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // name
  builder.requiredField(offset, 6) // position
  return offset;
}


unpack(): CameraViewT {
  return new CameraViewT(
    this.name(),
    (this.position() !== null ? this.position()!.unpack() : null),
    this.viewRadius()
  );
}


unpackTo(_o: CameraViewT): void {
  _o.name = this.name();
  _o.position = (this.position() !== null ? this.position()!.unpack() : null);
  _o.viewRadius = this.viewRadius();
}
}

export class CameraViewT implements flatbuffers.IGeneratedObject {
constructor(
  public name: string|Uint8Array|null = null,
  public position: Vector2fT|null = null,
  public viewRadius: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);

  CameraView.startCameraView(builder);
  CameraView.addName(builder, name);
  CameraView.addPosition(builder, (this.position !== null ? this.position!.pack(builder) : 0));
  CameraView.addViewRadius(builder, this.viewRadius);

  return CameraView.endCameraView(builder);
}
}
