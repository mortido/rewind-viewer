// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class Subscribe {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Subscribe {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSubscribe(bb:flatbuffers.ByteBuffer, obj?:Subscribe):Subscribe {
  return (obj || new Subscribe()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSubscribe(bb:flatbuffers.ByteBuffer, obj?:Subscribe):Subscribe {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Subscribe()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

key():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

continuous():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

captureMouse():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startSubscribe(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addKey(builder:flatbuffers.Builder, key:number) {
  builder.addFieldInt8(0, key, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static addContinuous(builder:flatbuffers.Builder, continuous:boolean) {
  builder.addFieldInt8(2, +continuous, +false);
}

static addCaptureMouse(builder:flatbuffers.Builder, captureMouse:boolean) {
  builder.addFieldInt8(3, +captureMouse, +false);
}

static endSubscribe(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // name
  return offset;
}

static createSubscribe(builder:flatbuffers.Builder, key:number, nameOffset:flatbuffers.Offset, continuous:boolean, captureMouse:boolean):flatbuffers.Offset {
  Subscribe.startSubscribe(builder);
  Subscribe.addKey(builder, key);
  Subscribe.addName(builder, nameOffset);
  Subscribe.addContinuous(builder, continuous);
  Subscribe.addCaptureMouse(builder, captureMouse);
  return Subscribe.endSubscribe(builder);
}
}
