// automatically generated by the FlatBuffers compiler, do not modify

package rewind_viewer.fbs;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Color extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Color getRootAsColor(ByteBuffer _bb) { return getRootAsColor(_bb, new Color()); }
  public static Color getRootAsColor(ByteBuffer _bb, Color obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Color __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long value() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public boolean fill() { int o = __offset(6); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createColor(FlatBufferBuilder builder,
      long value,
      boolean fill) {
    builder.startTable(2);
    Color.addValue(builder, value);
    Color.addFill(builder, fill);
    return Color.endColor(builder);
  }

  public static void startColor(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addValue(FlatBufferBuilder builder, long value) { builder.addInt(0, (int) value, (int) 0L); }
  public static void addFill(FlatBufferBuilder builder, boolean fill) { builder.addBoolean(1, fill, false); }
  public static int endColor(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Color get(int j) { return get(new Color(), j); }
    public Color get(Color obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public ColorT unpack() {
    ColorT _o = new ColorT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(ColorT _o) {
    long _oValue = value();
    _o.setValue(_oValue);
    boolean _oFill = fill();
    _o.setFill(_oFill);
  }
  public static int pack(FlatBufferBuilder builder, ColorT _o) {
    if (_o == null) return 0;
    return createColor(
      builder,
      _o.getValue(),
      _o.getFill());
  }
}

