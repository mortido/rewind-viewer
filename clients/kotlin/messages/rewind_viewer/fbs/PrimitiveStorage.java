// automatically generated by the FlatBuffers compiler, do not modify

package rewind_viewer.fbs;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class PrimitiveStorage extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static PrimitiveStorage getRootAsPrimitiveStorage(ByteBuffer _bb) { return getRootAsPrimitiveStorage(_bb, new PrimitiveStorage()); }
  public static PrimitiveStorage getRootAsPrimitiveStorage(ByteBuffer _bb, PrimitiveStorage obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PrimitiveStorage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public rewind_viewer.fbs.ColorPoint colorVertexes(int j) { return colorVertexes(new rewind_viewer.fbs.ColorPoint(), j); }
  public rewind_viewer.fbs.ColorPoint colorVertexes(rewind_viewer.fbs.ColorPoint obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int colorVertexesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public rewind_viewer.fbs.ColorPoint.Vector colorVertexesVector() { return colorVertexesVector(new rewind_viewer.fbs.ColorPoint.Vector()); }
  public rewind_viewer.fbs.ColorPoint.Vector colorVertexesVector(rewind_viewer.fbs.ColorPoint.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public rewind_viewer.fbs.CircleSegment colorCircles(int j) { return colorCircles(new rewind_viewer.fbs.CircleSegment(), j); }
  public rewind_viewer.fbs.CircleSegment colorCircles(rewind_viewer.fbs.CircleSegment obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int colorCirclesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public rewind_viewer.fbs.CircleSegment.Vector colorCirclesVector() { return colorCirclesVector(new rewind_viewer.fbs.CircleSegment.Vector()); }
  public rewind_viewer.fbs.CircleSegment.Vector colorCirclesVector(rewind_viewer.fbs.CircleSegment.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public rewind_viewer.fbs.Vector2f vertexes(int j) { return vertexes(new rewind_viewer.fbs.Vector2f(), j); }
  public rewind_viewer.fbs.Vector2f vertexes(rewind_viewer.fbs.Vector2f obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o) + j * 8, bb) : null; }
  public int vertexesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public rewind_viewer.fbs.Vector2f.Vector vertexesVector() { return vertexesVector(new rewind_viewer.fbs.Vector2f.Vector()); }
  public rewind_viewer.fbs.Vector2f.Vector vertexesVector(rewind_viewer.fbs.Vector2f.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 8, bb) : null; }
  public rewind_viewer.fbs.CircleSegment circles(int j) { return circles(new rewind_viewer.fbs.CircleSegment(), j); }
  public rewind_viewer.fbs.CircleSegment circles(rewind_viewer.fbs.CircleSegment obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int circlesLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public rewind_viewer.fbs.CircleSegment.Vector circlesVector() { return circlesVector(new rewind_viewer.fbs.CircleSegment.Vector()); }
  public rewind_viewer.fbs.CircleSegment.Vector circlesVector(rewind_viewer.fbs.CircleSegment.Vector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createPrimitiveStorage(FlatBufferBuilder builder,
      int colorVertexesOffset,
      int colorCirclesOffset,
      int vertexesOffset,
      int circlesOffset) {
    builder.startTable(4);
    PrimitiveStorage.addCircles(builder, circlesOffset);
    PrimitiveStorage.addVertexes(builder, vertexesOffset);
    PrimitiveStorage.addColorCircles(builder, colorCirclesOffset);
    PrimitiveStorage.addColorVertexes(builder, colorVertexesOffset);
    return PrimitiveStorage.endPrimitiveStorage(builder);
  }

  public static void startPrimitiveStorage(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addColorVertexes(FlatBufferBuilder builder, int colorVertexesOffset) { builder.addOffset(0, colorVertexesOffset, 0); }
  public static int createColorVertexesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startColorVertexesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addColorCircles(FlatBufferBuilder builder, int colorCirclesOffset) { builder.addOffset(1, colorCirclesOffset, 0); }
  public static int createColorCirclesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startColorCirclesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addVertexes(FlatBufferBuilder builder, int vertexesOffset) { builder.addOffset(2, vertexesOffset, 0); }
  public static void startVertexesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 4); }
  public static void addCircles(FlatBufferBuilder builder, int circlesOffset) { builder.addOffset(3, circlesOffset, 0); }
  public static int createCirclesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCirclesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endPrimitiveStorage(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PrimitiveStorage get(int j) { return get(new PrimitiveStorage(), j); }
    public PrimitiveStorage get(PrimitiveStorage obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

