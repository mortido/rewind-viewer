// automatically generated by the FlatBuffers compiler, do not modify

package rewind_viewer.fbs;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Circle extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Circle getRootAsCircle(ByteBuffer _bb) { return getRootAsCircle(_bb, new Circle()); }
  public static Circle getRootAsCircle(ByteBuffer _bb, Circle obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Circle __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public rewind_viewer.fbs.Color color() { return color(new rewind_viewer.fbs.Color()); }
  public rewind_viewer.fbs.Color color(rewind_viewer.fbs.Color obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public rewind_viewer.fbs.Vector2f center() { return center(new rewind_viewer.fbs.Vector2f()); }
  public rewind_viewer.fbs.Vector2f center(rewind_viewer.fbs.Vector2f obj) { int o = __offset(6); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public float radius() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static void startCircle(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addColor(FlatBufferBuilder builder, int colorOffset) { builder.addOffset(0, colorOffset, 0); }
  public static void addCenter(FlatBufferBuilder builder, int centerOffset) { builder.addStruct(1, centerOffset, 0); }
  public static void addRadius(FlatBufferBuilder builder, float radius) { builder.addFloat(2, radius, 0.0f); }
  public static int endCircle(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // color
    builder.required(o, 6);  // center
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Circle get(int j) { return get(new Circle(), j); }
    public Circle get(Circle obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public CircleT unpack() {
    CircleT _o = new CircleT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(CircleT _o) {
    if (color() != null) _o.setColor(color().unpack());
    else _o.setColor(null);
    if (center() != null) center().unpackTo(_o.getCenter());
    else _o.setCenter(null);
    float _oRadius = radius();
    _o.setRadius(_oRadius);
  }
  public static int pack(FlatBufferBuilder builder, CircleT _o) {
    if (_o == null) return 0;
    int _color = _o.getColor() == null ? 0 : rewind_viewer.fbs.Color.pack(builder, _o.getColor());
    startCircle(builder);
    addColor(builder, _color);
    addCenter(builder, rewind_viewer.fbs.Vector2f.pack(builder, _o.getCenter()));
    addRadius(builder, _o.getRadius());
    return endCircle(builder);
  }
}

