// automatically generated by the FlatBuffers compiler, do not modify

package rewind_viewer.fbs;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class PrimitiveIndices extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static PrimitiveIndices getRootAsPrimitiveIndices(ByteBuffer _bb) { return getRootAsPrimitiveIndices(_bb, new PrimitiveIndices()); }
  public static PrimitiveIndices getRootAsPrimitiveIndices(ByteBuffer _bb, PrimitiveIndices obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PrimitiveIndices __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long stencilCircles(int j) { int o = __offset(4); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int stencilCirclesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public IntVector stencilCirclesVector() { return stencilCirclesVector(new IntVector()); }
  public IntVector stencilCirclesVector(IntVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer stencilCirclesAsByteBuffer() { return __vector_as_bytebuffer(4, 4); }
  public ByteBuffer stencilCirclesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 4); }
  public long stencilSegments(int j) { int o = __offset(6); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int stencilSegmentsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public IntVector stencilSegmentsVector() { return stencilSegmentsVector(new IntVector()); }
  public IntVector stencilSegmentsVector(IntVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer stencilSegmentsAsByteBuffer() { return __vector_as_bytebuffer(6, 4); }
  public ByteBuffer stencilSegmentsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 4); }
  public long stencilTriangles(int j) { int o = __offset(8); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int stencilTrianglesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public IntVector stencilTrianglesVector() { return stencilTrianglesVector(new IntVector()); }
  public IntVector stencilTrianglesVector(IntVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer stencilTrianglesAsByteBuffer() { return __vector_as_bytebuffer(8, 4); }
  public ByteBuffer stencilTrianglesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 4); }
  public long filledCircles(int j) { int o = __offset(10); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int filledCirclesLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public IntVector filledCirclesVector() { return filledCirclesVector(new IntVector()); }
  public IntVector filledCirclesVector(IntVector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer filledCirclesAsByteBuffer() { return __vector_as_bytebuffer(10, 4); }
  public ByteBuffer filledCirclesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 4); }
  public long filledSegments(int j) { int o = __offset(12); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int filledSegmentsLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public IntVector filledSegmentsVector() { return filledSegmentsVector(new IntVector()); }
  public IntVector filledSegmentsVector(IntVector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer filledSegmentsAsByteBuffer() { return __vector_as_bytebuffer(12, 4); }
  public ByteBuffer filledSegmentsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 4); }
  public long thinCircles(int j) { int o = __offset(14); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int thinCirclesLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public IntVector thinCirclesVector() { return thinCirclesVector(new IntVector()); }
  public IntVector thinCirclesVector(IntVector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer thinCirclesAsByteBuffer() { return __vector_as_bytebuffer(14, 4); }
  public ByteBuffer thinCirclesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 4); }
  public long triangles(int j) { int o = __offset(16); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int trianglesLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public IntVector trianglesVector() { return trianglesVector(new IntVector()); }
  public IntVector trianglesVector(IntVector obj) { int o = __offset(16); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer trianglesAsByteBuffer() { return __vector_as_bytebuffer(16, 4); }
  public ByteBuffer trianglesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 4); }
  public long lines(int j) { int o = __offset(18); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int linesLength() { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; }
  public IntVector linesVector() { return linesVector(new IntVector()); }
  public IntVector linesVector(IntVector obj) { int o = __offset(18); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer linesAsByteBuffer() { return __vector_as_bytebuffer(18, 4); }
  public ByteBuffer linesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 4); }

  public static int createPrimitiveIndices(FlatBufferBuilder builder,
      int stencilCirclesOffset,
      int stencilSegmentsOffset,
      int stencilTrianglesOffset,
      int filledCirclesOffset,
      int filledSegmentsOffset,
      int thinCirclesOffset,
      int trianglesOffset,
      int linesOffset) {
    builder.startTable(8);
    PrimitiveIndices.addLines(builder, linesOffset);
    PrimitiveIndices.addTriangles(builder, trianglesOffset);
    PrimitiveIndices.addThinCircles(builder, thinCirclesOffset);
    PrimitiveIndices.addFilledSegments(builder, filledSegmentsOffset);
    PrimitiveIndices.addFilledCircles(builder, filledCirclesOffset);
    PrimitiveIndices.addStencilTriangles(builder, stencilTrianglesOffset);
    PrimitiveIndices.addStencilSegments(builder, stencilSegmentsOffset);
    PrimitiveIndices.addStencilCircles(builder, stencilCirclesOffset);
    return PrimitiveIndices.endPrimitiveIndices(builder);
  }

  public static void startPrimitiveIndices(FlatBufferBuilder builder) { builder.startTable(8); }
  public static void addStencilCircles(FlatBufferBuilder builder, int stencilCirclesOffset) { builder.addOffset(0, stencilCirclesOffset, 0); }
  public static int createStencilCirclesVector(FlatBufferBuilder builder, long[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt((int) data[i]); return builder.endVector(); }
  public static void startStencilCirclesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addStencilSegments(FlatBufferBuilder builder, int stencilSegmentsOffset) { builder.addOffset(1, stencilSegmentsOffset, 0); }
  public static int createStencilSegmentsVector(FlatBufferBuilder builder, long[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt((int) data[i]); return builder.endVector(); }
  public static void startStencilSegmentsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addStencilTriangles(FlatBufferBuilder builder, int stencilTrianglesOffset) { builder.addOffset(2, stencilTrianglesOffset, 0); }
  public static int createStencilTrianglesVector(FlatBufferBuilder builder, long[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt((int) data[i]); return builder.endVector(); }
  public static void startStencilTrianglesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addFilledCircles(FlatBufferBuilder builder, int filledCirclesOffset) { builder.addOffset(3, filledCirclesOffset, 0); }
  public static int createFilledCirclesVector(FlatBufferBuilder builder, long[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt((int) data[i]); return builder.endVector(); }
  public static void startFilledCirclesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addFilledSegments(FlatBufferBuilder builder, int filledSegmentsOffset) { builder.addOffset(4, filledSegmentsOffset, 0); }
  public static int createFilledSegmentsVector(FlatBufferBuilder builder, long[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt((int) data[i]); return builder.endVector(); }
  public static void startFilledSegmentsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addThinCircles(FlatBufferBuilder builder, int thinCirclesOffset) { builder.addOffset(5, thinCirclesOffset, 0); }
  public static int createThinCirclesVector(FlatBufferBuilder builder, long[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt((int) data[i]); return builder.endVector(); }
  public static void startThinCirclesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTriangles(FlatBufferBuilder builder, int trianglesOffset) { builder.addOffset(6, trianglesOffset, 0); }
  public static int createTrianglesVector(FlatBufferBuilder builder, long[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt((int) data[i]); return builder.endVector(); }
  public static void startTrianglesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addLines(FlatBufferBuilder builder, int linesOffset) { builder.addOffset(7, linesOffset, 0); }
  public static int createLinesVector(FlatBufferBuilder builder, long[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt((int) data[i]); return builder.endVector(); }
  public static void startLinesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endPrimitiveIndices(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PrimitiveIndices get(int j) { return get(new PrimitiveIndices(), j); }
    public PrimitiveIndices get(PrimitiveIndices obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

