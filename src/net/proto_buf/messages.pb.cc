// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/proto_buf/messages.proto

#include "net/proto_buf/messages.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace net {
namespace messages {

inline constexpr Vector2f::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Vector2f::Vector2f(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Vector2fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector2fDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector2fDefaultTypeInternal() {}
  union {
    Vector2f _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector2fDefaultTypeInternal _Vector2f_default_instance_;

inline constexpr Options::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        use_permanent_frame_{false},
        layer_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR Options::Options(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionsDefaultTypeInternal() {}
  union {
    Options _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionsDefaultTypeInternal _Options_default_instance_;

inline constexpr Map::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : width_{0},
        height_{0},
        x_grid_{0u},
        y_grid_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Map::Map(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapDefaultTypeInternal() {}
  union {
    Map _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapDefaultTypeInternal _Map_default_instance_;

inline constexpr LogText::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : text_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LogText::LogText(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LogTextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogTextDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogTextDefaultTypeInternal() {}
  union {
    LogText _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogTextDefaultTypeInternal _LogText_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR EndFrame::EndFrame(::_pbi::ConstantInitialized) {}
struct EndFrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EndFrameDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EndFrameDefaultTypeInternal() {}
  union {
    EndFrame _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EndFrameDefaultTypeInternal _EndFrame_default_instance_;

inline constexpr Color::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : value_{0u},
        fill_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Color::Color(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColorDefaultTypeInternal() {}
  union {
    Color _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColorDefaultTypeInternal _Color_default_instance_;

inline constexpr Triangle::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        points_{},
        color_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Triangle::Triangle(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TriangleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TriangleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TriangleDefaultTypeInternal() {}
  union {
    Triangle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TriangleDefaultTypeInternal _Triangle_default_instance_;

inline constexpr Rectangle::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        color_{nullptr},
        top_left_{nullptr},
        bottom_right_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Rectangle::Rectangle(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RectangleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RectangleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RectangleDefaultTypeInternal() {}
  union {
    Rectangle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RectangleDefaultTypeInternal _Rectangle_default_instance_;

inline constexpr PopupRound::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        text_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        center_{nullptr},
        radius_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PopupRound::PopupRound(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PopupRoundDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PopupRoundDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PopupRoundDefaultTypeInternal() {}
  union {
    PopupRound _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PopupRoundDefaultTypeInternal _PopupRound_default_instance_;

inline constexpr Popup::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        text_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        position_{nullptr},
        width_{0},
        height_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Popup::Popup(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PopupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PopupDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PopupDefaultTypeInternal() {}
  union {
    Popup _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PopupDefaultTypeInternal _Popup_default_instance_;

inline constexpr Polyline::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        points_{},
        color_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Polyline::Polyline(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PolylineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolylineDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolylineDefaultTypeInternal() {}
  union {
    Polyline _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolylineDefaultTypeInternal _Polyline_default_instance_;

inline constexpr Circle::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        color_{nullptr},
        center_{nullptr},
        radius_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Circle::Circle(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CircleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CircleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CircleDefaultTypeInternal() {}
  union {
    Circle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CircleDefaultTypeInternal _Circle_default_instance_;

inline constexpr DrawMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : command_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR DrawMessage::DrawMessage(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DrawMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DrawMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DrawMessageDefaultTypeInternal() {}
  union {
    DrawMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DrawMessageDefaultTypeInternal _DrawMessage_default_instance_;
}  // namespace messages
}  // namespace net
static ::_pb::Metadata file_level_metadata_net_2fproto_5fbuf_2fmessages_2eproto[13];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_net_2fproto_5fbuf_2fmessages_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_net_2fproto_5fbuf_2fmessages_2eproto = nullptr;
const ::uint32_t TableStruct_net_2fproto_5fbuf_2fmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::net::messages::Vector2f, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::net::messages::Vector2f, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::net::messages::Vector2f, _impl_.y_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::net::messages::Color, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::net::messages::Color, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::net::messages::Color, _impl_.fill_),
    PROTOBUF_FIELD_OFFSET(::net::messages::Circle, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::net::messages::Circle, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::net::messages::Circle, _impl_.color_),
    PROTOBUF_FIELD_OFFSET(::net::messages::Circle, _impl_.center_),
    PROTOBUF_FIELD_OFFSET(::net::messages::Circle, _impl_.radius_),
    0,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::net::messages::Rectangle, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::net::messages::Rectangle, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::net::messages::Rectangle, _impl_.color_),
    PROTOBUF_FIELD_OFFSET(::net::messages::Rectangle, _impl_.top_left_),
    PROTOBUF_FIELD_OFFSET(::net::messages::Rectangle, _impl_.bottom_right_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::net::messages::Triangle, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::net::messages::Triangle, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::net::messages::Triangle, _impl_.color_),
    PROTOBUF_FIELD_OFFSET(::net::messages::Triangle, _impl_.points_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::net::messages::Polyline, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::net::messages::Polyline, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::net::messages::Polyline, _impl_.color_),
    PROTOBUF_FIELD_OFFSET(::net::messages::Polyline, _impl_.points_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::net::messages::LogText, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::net::messages::LogText, _impl_.text_),
    PROTOBUF_FIELD_OFFSET(::net::messages::Popup, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::net::messages::Popup, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::net::messages::Popup, _impl_.text_),
    PROTOBUF_FIELD_OFFSET(::net::messages::Popup, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::net::messages::Popup, _impl_.width_),
    PROTOBUF_FIELD_OFFSET(::net::messages::Popup, _impl_.height_),
    ~0u,
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::net::messages::PopupRound, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::net::messages::PopupRound, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::net::messages::PopupRound, _impl_.text_),
    PROTOBUF_FIELD_OFFSET(::net::messages::PopupRound, _impl_.center_),
    PROTOBUF_FIELD_OFFSET(::net::messages::PopupRound, _impl_.radius_),
    ~0u,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::net::messages::Options, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::net::messages::Options, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::net::messages::Options, _impl_.use_permanent_frame_),
    PROTOBUF_FIELD_OFFSET(::net::messages::Options, _impl_.layer_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::net::messages::Map, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::net::messages::Map, _impl_.width_),
    PROTOBUF_FIELD_OFFSET(::net::messages::Map, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::net::messages::Map, _impl_.x_grid_),
    PROTOBUF_FIELD_OFFSET(::net::messages::Map, _impl_.y_grid_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::net::messages::EndFrame, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::net::messages::DrawMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::net::messages::DrawMessage, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::net::messages::DrawMessage, _impl_.command_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::net::messages::Vector2f)},
        {10, -1, -1, sizeof(::net::messages::Color)},
        {20, 31, -1, sizeof(::net::messages::Circle)},
        {34, 45, -1, sizeof(::net::messages::Rectangle)},
        {48, 58, -1, sizeof(::net::messages::Triangle)},
        {60, 70, -1, sizeof(::net::messages::Polyline)},
        {72, -1, -1, sizeof(::net::messages::LogText)},
        {81, 93, -1, sizeof(::net::messages::Popup)},
        {97, 108, -1, sizeof(::net::messages::PopupRound)},
        {111, 121, -1, sizeof(::net::messages::Options)},
        {123, -1, -1, sizeof(::net::messages::Map)},
        {135, -1, -1, sizeof(::net::messages::EndFrame)},
        {143, -1, -1, sizeof(::net::messages::DrawMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::net::messages::_Vector2f_default_instance_._instance,
    &::net::messages::_Color_default_instance_._instance,
    &::net::messages::_Circle_default_instance_._instance,
    &::net::messages::_Rectangle_default_instance_._instance,
    &::net::messages::_Triangle_default_instance_._instance,
    &::net::messages::_Polyline_default_instance_._instance,
    &::net::messages::_LogText_default_instance_._instance,
    &::net::messages::_Popup_default_instance_._instance,
    &::net::messages::_PopupRound_default_instance_._instance,
    &::net::messages::_Options_default_instance_._instance,
    &::net::messages::_Map_default_instance_._instance,
    &::net::messages::_EndFrame_default_instance_._instance,
    &::net::messages::_DrawMessage_default_instance_._instance,
};
const char descriptor_table_protodef_net_2fproto_5fbuf_2fmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\034net/proto_buf/messages.proto\022\014net.mess"
    "ages\" \n\010Vector2f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"$"
    "\n\005Color\022\r\n\005value\030\001 \001(\r\022\014\n\004fill\030\002 \001(\010\"d\n\006"
    "Circle\022\"\n\005color\030\001 \001(\0132\023.net.messages.Col"
    "or\022&\n\006center\030\002 \001(\0132\026.net.messages.Vector"
    "2f\022\016\n\006radius\030\003 \001(\002\"\207\001\n\tRectangle\022\"\n\005colo"
    "r\030\001 \001(\0132\023.net.messages.Color\022(\n\010top_left"
    "\030\002 \001(\0132\026.net.messages.Vector2f\022,\n\014bottom"
    "_right\030\003 \001(\0132\026.net.messages.Vector2f\"V\n\010"
    "Triangle\022\"\n\005color\030\001 \001(\0132\023.net.messages.C"
    "olor\022&\n\006points\030\002 \003(\0132\026.net.messages.Vect"
    "or2f\"V\n\010Polyline\022\"\n\005color\030\001 \001(\0132\023.net.me"
    "ssages.Color\022&\n\006points\030\002 \003(\0132\026.net.messa"
    "ges.Vector2f\"\027\n\007LogText\022\014\n\004text\030\001 \001(\t\"^\n"
    "\005Popup\022\014\n\004text\030\001 \001(\t\022(\n\010position\030\002 \001(\0132\026"
    ".net.messages.Vector2f\022\r\n\005width\030\003 \001(\002\022\016\n"
    "\006height\030\004 \001(\002\"R\n\nPopupRound\022\014\n\004text\030\001 \001("
    "\t\022&\n\006center\030\002 \001(\0132\026.net.messages.Vector2"
    "f\022\016\n\006radius\030\003 \001(\002\"a\n\007Options\022 \n\023use_perm"
    "anent_frame\030\001 \001(\010H\000\210\001\001\022\022\n\005layer\030\002 \001(\rH\001\210"
    "\001\001B\026\n\024_use_permanent_frameB\010\n\006_layer\"D\n\003"
    "Map\022\r\n\005width\030\001 \001(\002\022\016\n\006height\030\002 \001(\002\022\016\n\006x_"
    "grid\030\003 \001(\r\022\016\n\006y_grid\030\004 \001(\r\"\n\n\010EndFrame\"\301"
    "\003\n\013DrawMessage\022&\n\006circle\030\001 \001(\0132\024.net.mes"
    "sages.CircleH\000\022,\n\trectangle\030\002 \001(\0132\027.net."
    "messages.RectangleH\000\022*\n\010triangle\030\003 \001(\0132\026"
    ".net.messages.TriangleH\000\022*\n\010polyline\030\004 \001"
    "(\0132\026.net.messages.PolylineH\000\022)\n\010log_text"
    "\030\005 \001(\0132\025.net.messages.LogTextH\000\022$\n\005popup"
    "\030\006 \001(\0132\023.net.messages.PopupH\000\022/\n\013popup_r"
    "ound\030\007 \001(\0132\030.net.messages.PopupRoundH\000\022("
    "\n\007options\030\010 \001(\0132\025.net.messages.OptionsH\000"
    "\022 \n\003map\030\t \001(\0132\021.net.messages.MapH\000\022+\n\ten"
    "d_frame\030\n \001(\0132\026.net.messages.EndFrameH\000B"
    "\t\n\007commandb\006proto3"
};
static ::absl::once_flag descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto = {
    false,
    false,
    1378,
    descriptor_table_protodef_net_2fproto_5fbuf_2fmessages_2eproto,
    "net/proto_buf/messages.proto",
    &descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_once,
    nullptr,
    0,
    13,
    schemas,
    file_default_instances,
    TableStruct_net_2fproto_5fbuf_2fmessages_2eproto::offsets,
    file_level_metadata_net_2fproto_5fbuf_2fmessages_2eproto,
    file_level_enum_descriptors_net_2fproto_5fbuf_2fmessages_2eproto,
    file_level_service_descriptors_net_2fproto_5fbuf_2fmessages_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_getter() {
  return &descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_net_2fproto_5fbuf_2fmessages_2eproto(&descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto);
namespace net {
namespace messages {
// ===================================================================

class Vector2f::_Internal {
 public:
};

Vector2f::Vector2f(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.messages.Vector2f)
}
Vector2f::Vector2f(
    ::google::protobuf::Arena* arena, const Vector2f& from)
    : Vector2f(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Vector2f::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Vector2f::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, y_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::y_));
}
Vector2f::~Vector2f() {
  // @@protoc_insertion_point(destructor:net.messages.Vector2f)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Vector2f::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Vector2f::Clear() {
// @@protoc_insertion_point(message_clear_start:net.messages.Vector2f)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Vector2f::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Vector2f::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Vector2f_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Vector2f, _impl_.y_)}},
    // float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Vector2f, _impl_.x_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float x = 1;
    {PROTOBUF_FIELD_OFFSET(Vector2f, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y = 2;
    {PROTOBUF_FIELD_OFFSET(Vector2f, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Vector2f::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.messages.Vector2f)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.messages.Vector2f)
  return target;
}

::size_t Vector2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.messages.Vector2f)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 5;
  }

  // float y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Vector2f::_class_data_ = {
    Vector2f::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Vector2f::GetClassData() const {
  return &_class_data_;
}

void Vector2f::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Vector2f*>(&to_msg);
  auto& from = static_cast<const Vector2f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:net.messages.Vector2f)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Vector2f::CopyFrom(const Vector2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.messages.Vector2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Vector2f::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Vector2f::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Vector2f::InternalSwap(Vector2f* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector2f, _impl_.y_)
      + sizeof(Vector2f::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Vector2f, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Vector2f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_getter, &descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_once,
      file_level_metadata_net_2fproto_5fbuf_2fmessages_2eproto[0]);
}
// ===================================================================

class Color::_Internal {
 public:
};

Color::Color(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.messages.Color)
}
Color::Color(
    ::google::protobuf::Arena* arena, const Color& from)
    : Color(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Color::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Color::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, value_),
           0,
           offsetof(Impl_, fill_) -
               offsetof(Impl_, value_) +
               sizeof(Impl_::fill_));
}
Color::~Color() {
  // @@protoc_insertion_point(destructor:net.messages.Color)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Color::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:net.messages.Color)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.value_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.fill_) -
      reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.fill_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Color::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Color::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Color_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool fill = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Color, _impl_.fill_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Color, _impl_.fill_)}},
    // uint32 value = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Color, _impl_.value_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Color, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 value = 1;
    {PROTOBUF_FIELD_OFFSET(Color, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bool fill = 2;
    {PROTOBUF_FIELD_OFFSET(Color, _impl_.fill_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Color::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.messages.Color)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_value(), target);
  }

  // bool fill = 2;
  if (this->_internal_fill() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_fill(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.messages.Color)
  return target;
}

::size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.messages.Color)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_value());
  }

  // bool fill = 2;
  if (this->_internal_fill() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Color::_class_data_ = {
    Color::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Color::GetClassData() const {
  return &_class_data_;
}

void Color::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Color*>(&to_msg);
  auto& from = static_cast<const Color&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:net.messages.Color)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_fill() != 0) {
    _this->_internal_set_fill(from._internal_fill());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.messages.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Color::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Color::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Color::InternalSwap(Color* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Color, _impl_.fill_)
      + sizeof(Color::_impl_.fill_)
      - PROTOBUF_FIELD_OFFSET(Color, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::google::protobuf::Metadata Color::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_getter, &descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_once,
      file_level_metadata_net_2fproto_5fbuf_2fmessages_2eproto[1]);
}
// ===================================================================

class Circle::_Internal {
 public:
  using HasBits = decltype(std::declval<Circle>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Circle, _impl_._has_bits_);
  static const ::net::messages::Color& color(const Circle* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::net::messages::Vector2f& center(const Circle* msg);
  static void set_has_center(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::net::messages::Color& Circle::_Internal::color(const Circle* msg) {
  return *msg->_impl_.color_;
}
const ::net::messages::Vector2f& Circle::_Internal::center(const Circle* msg) {
  return *msg->_impl_.center_;
}
Circle::Circle(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.messages.Circle)
}
inline PROTOBUF_NDEBUG_INLINE Circle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Circle::Circle(
    ::google::protobuf::Arena* arena,
    const Circle& from)
    : ::google::protobuf::Message(arena) {
  Circle* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.color_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::net::messages::Color>(arena, *from._impl_.color_)
                : nullptr;
  _impl_.center_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::net::messages::Vector2f>(arena, *from._impl_.center_)
                : nullptr;
  _impl_.radius_ = from._impl_.radius_;

  // @@protoc_insertion_point(copy_constructor:net.messages.Circle)
}
inline PROTOBUF_NDEBUG_INLINE Circle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Circle::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, color_),
           0,
           offsetof(Impl_, radius_) -
               offsetof(Impl_, color_) +
               sizeof(Impl_::radius_));
}
Circle::~Circle() {
  // @@protoc_insertion_point(destructor:net.messages.Circle)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Circle::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.color_;
  delete _impl_.center_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Circle::Clear() {
// @@protoc_insertion_point(message_clear_start:net.messages.Circle)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.color_ != nullptr);
      _impl_.color_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.center_ != nullptr);
      _impl_.center_->Clear();
    }
  }
  _impl_.radius_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Circle::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> Circle::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Circle, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Circle_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .net.messages.Color color = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Circle, _impl_.color_)}},
    // .net.messages.Vector2f center = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Circle, _impl_.center_)}},
    // float radius = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Circle, _impl_.radius_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .net.messages.Color color = 1;
    {PROTOBUF_FIELD_OFFSET(Circle, _impl_.color_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .net.messages.Vector2f center = 2;
    {PROTOBUF_FIELD_OFFSET(Circle, _impl_.center_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float radius = 3;
    {PROTOBUF_FIELD_OFFSET(Circle, _impl_.radius_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::net::messages::Color>()},
    {::_pbi::TcParser::GetTable<::net::messages::Vector2f>()},
  }}, {{
  }},
};

::uint8_t* Circle::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.messages.Circle)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .net.messages.Color color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // .net.messages.Vector2f center = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::center(this),
        _Internal::center(this).GetCachedSize(), target, stream);
  }

  // float radius = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  ::uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.messages.Circle)
  return target;
}

::size_t Circle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.messages.Circle)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .net.messages.Color color = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.color_);
    }

    // .net.messages.Vector2f center = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.center_);
    }

  }
  // float radius = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  ::uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Circle::_class_data_ = {
    Circle::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Circle::GetClassData() const {
  return &_class_data_;
}

void Circle::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Circle*>(&to_msg);
  auto& from = static_cast<const Circle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:net.messages.Circle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_color()->::net::messages::Color::MergeFrom(
          from._internal_color());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_center()->::net::messages::Vector2f::MergeFrom(
          from._internal_center());
    }
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_radius = from._internal_radius();
  ::uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    _this->_internal_set_radius(from._internal_radius());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Circle::CopyFrom(const Circle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.messages.Circle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Circle::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Circle::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Circle::InternalSwap(Circle* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Circle, _impl_.radius_)
      + sizeof(Circle::_impl_.radius_)
      - PROTOBUF_FIELD_OFFSET(Circle, _impl_.color_)>(
          reinterpret_cast<char*>(&_impl_.color_),
          reinterpret_cast<char*>(&other->_impl_.color_));
}

::google::protobuf::Metadata Circle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_getter, &descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_once,
      file_level_metadata_net_2fproto_5fbuf_2fmessages_2eproto[2]);
}
// ===================================================================

class Rectangle::_Internal {
 public:
  using HasBits = decltype(std::declval<Rectangle>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Rectangle, _impl_._has_bits_);
  static const ::net::messages::Color& color(const Rectangle* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::net::messages::Vector2f& top_left(const Rectangle* msg);
  static void set_has_top_left(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::net::messages::Vector2f& bottom_right(const Rectangle* msg);
  static void set_has_bottom_right(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::net::messages::Color& Rectangle::_Internal::color(const Rectangle* msg) {
  return *msg->_impl_.color_;
}
const ::net::messages::Vector2f& Rectangle::_Internal::top_left(const Rectangle* msg) {
  return *msg->_impl_.top_left_;
}
const ::net::messages::Vector2f& Rectangle::_Internal::bottom_right(const Rectangle* msg) {
  return *msg->_impl_.bottom_right_;
}
Rectangle::Rectangle(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.messages.Rectangle)
}
inline PROTOBUF_NDEBUG_INLINE Rectangle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Rectangle::Rectangle(
    ::google::protobuf::Arena* arena,
    const Rectangle& from)
    : ::google::protobuf::Message(arena) {
  Rectangle* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.color_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::net::messages::Color>(arena, *from._impl_.color_)
                : nullptr;
  _impl_.top_left_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::net::messages::Vector2f>(arena, *from._impl_.top_left_)
                : nullptr;
  _impl_.bottom_right_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::net::messages::Vector2f>(arena, *from._impl_.bottom_right_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:net.messages.Rectangle)
}
inline PROTOBUF_NDEBUG_INLINE Rectangle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Rectangle::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, color_),
           0,
           offsetof(Impl_, bottom_right_) -
               offsetof(Impl_, color_) +
               sizeof(Impl_::bottom_right_));
}
Rectangle::~Rectangle() {
  // @@protoc_insertion_point(destructor:net.messages.Rectangle)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Rectangle::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.color_;
  delete _impl_.top_left_;
  delete _impl_.bottom_right_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Rectangle::Clear() {
// @@protoc_insertion_point(message_clear_start:net.messages.Rectangle)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.color_ != nullptr);
      _impl_.color_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.top_left_ != nullptr);
      _impl_.top_left_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.bottom_right_ != nullptr);
      _impl_.bottom_right_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Rectangle::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> Rectangle::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Rectangle, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Rectangle_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .net.messages.Color color = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Rectangle, _impl_.color_)}},
    // .net.messages.Vector2f top_left = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Rectangle, _impl_.top_left_)}},
    // .net.messages.Vector2f bottom_right = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Rectangle, _impl_.bottom_right_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .net.messages.Color color = 1;
    {PROTOBUF_FIELD_OFFSET(Rectangle, _impl_.color_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .net.messages.Vector2f top_left = 2;
    {PROTOBUF_FIELD_OFFSET(Rectangle, _impl_.top_left_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .net.messages.Vector2f bottom_right = 3;
    {PROTOBUF_FIELD_OFFSET(Rectangle, _impl_.bottom_right_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::net::messages::Color>()},
    {::_pbi::TcParser::GetTable<::net::messages::Vector2f>()},
    {::_pbi::TcParser::GetTable<::net::messages::Vector2f>()},
  }}, {{
  }},
};

::uint8_t* Rectangle::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.messages.Rectangle)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .net.messages.Color color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // .net.messages.Vector2f top_left = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::top_left(this),
        _Internal::top_left(this).GetCachedSize(), target, stream);
  }

  // .net.messages.Vector2f bottom_right = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::bottom_right(this),
        _Internal::bottom_right(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.messages.Rectangle)
  return target;
}

::size_t Rectangle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.messages.Rectangle)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .net.messages.Color color = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.color_);
    }

    // .net.messages.Vector2f top_left = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.top_left_);
    }

    // .net.messages.Vector2f bottom_right = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.bottom_right_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Rectangle::_class_data_ = {
    Rectangle::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Rectangle::GetClassData() const {
  return &_class_data_;
}

void Rectangle::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Rectangle*>(&to_msg);
  auto& from = static_cast<const Rectangle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:net.messages.Rectangle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_color()->::net::messages::Color::MergeFrom(
          from._internal_color());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_top_left()->::net::messages::Vector2f::MergeFrom(
          from._internal_top_left());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_bottom_right()->::net::messages::Vector2f::MergeFrom(
          from._internal_bottom_right());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Rectangle::CopyFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.messages.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Rectangle::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Rectangle::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Rectangle::InternalSwap(Rectangle* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rectangle, _impl_.bottom_right_)
      + sizeof(Rectangle::_impl_.bottom_right_)
      - PROTOBUF_FIELD_OFFSET(Rectangle, _impl_.color_)>(
          reinterpret_cast<char*>(&_impl_.color_),
          reinterpret_cast<char*>(&other->_impl_.color_));
}

::google::protobuf::Metadata Rectangle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_getter, &descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_once,
      file_level_metadata_net_2fproto_5fbuf_2fmessages_2eproto[3]);
}
// ===================================================================

class Triangle::_Internal {
 public:
  using HasBits = decltype(std::declval<Triangle>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Triangle, _impl_._has_bits_);
  static const ::net::messages::Color& color(const Triangle* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::net::messages::Color& Triangle::_Internal::color(const Triangle* msg) {
  return *msg->_impl_.color_;
}
Triangle::Triangle(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.messages.Triangle)
}
inline PROTOBUF_NDEBUG_INLINE Triangle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        points_{visibility, arena, from.points_} {}

Triangle::Triangle(
    ::google::protobuf::Arena* arena,
    const Triangle& from)
    : ::google::protobuf::Message(arena) {
  Triangle* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.color_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::net::messages::Color>(arena, *from._impl_.color_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:net.messages.Triangle)
}
inline PROTOBUF_NDEBUG_INLINE Triangle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        points_{visibility, arena} {}

inline void Triangle::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.color_ = {};
}
Triangle::~Triangle() {
  // @@protoc_insertion_point(destructor:net.messages.Triangle)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Triangle::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.color_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Triangle::Clear() {
// @@protoc_insertion_point(message_clear_start:net.messages.Triangle)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.color_ != nullptr);
    _impl_.color_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Triangle::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Triangle::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Triangle, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Triangle_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .net.messages.Vector2f points = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(Triangle, _impl_.points_)}},
    // .net.messages.Color color = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Triangle, _impl_.color_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .net.messages.Color color = 1;
    {PROTOBUF_FIELD_OFFSET(Triangle, _impl_.color_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .net.messages.Vector2f points = 2;
    {PROTOBUF_FIELD_OFFSET(Triangle, _impl_.points_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::net::messages::Color>()},
    {::_pbi::TcParser::GetTable<::net::messages::Vector2f>()},
  }}, {{
  }},
};

::uint8_t* Triangle::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.messages.Triangle)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .net.messages.Color color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // repeated .net.messages.Vector2f points = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.messages.Triangle)
  return target;
}

::size_t Triangle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.messages.Triangle)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .net.messages.Vector2f points = 2;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_internal_points()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .net.messages.Color color = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.color_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Triangle::_class_data_ = {
    Triangle::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Triangle::GetClassData() const {
  return &_class_data_;
}

void Triangle::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Triangle*>(&to_msg);
  auto& from = static_cast<const Triangle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:net.messages.Triangle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_points()->MergeFrom(
      from._internal_points());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_color()->::net::messages::Color::MergeFrom(
        from._internal_color());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Triangle::CopyFrom(const Triangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.messages.Triangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Triangle::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Triangle::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Triangle::InternalSwap(Triangle* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
  swap(_impl_.color_, other->_impl_.color_);
}

::google::protobuf::Metadata Triangle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_getter, &descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_once,
      file_level_metadata_net_2fproto_5fbuf_2fmessages_2eproto[4]);
}
// ===================================================================

class Polyline::_Internal {
 public:
  using HasBits = decltype(std::declval<Polyline>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Polyline, _impl_._has_bits_);
  static const ::net::messages::Color& color(const Polyline* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::net::messages::Color& Polyline::_Internal::color(const Polyline* msg) {
  return *msg->_impl_.color_;
}
Polyline::Polyline(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.messages.Polyline)
}
inline PROTOBUF_NDEBUG_INLINE Polyline::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        points_{visibility, arena, from.points_} {}

Polyline::Polyline(
    ::google::protobuf::Arena* arena,
    const Polyline& from)
    : ::google::protobuf::Message(arena) {
  Polyline* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.color_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::net::messages::Color>(arena, *from._impl_.color_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:net.messages.Polyline)
}
inline PROTOBUF_NDEBUG_INLINE Polyline::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        points_{visibility, arena} {}

inline void Polyline::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.color_ = {};
}
Polyline::~Polyline() {
  // @@protoc_insertion_point(destructor:net.messages.Polyline)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Polyline::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.color_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Polyline::Clear() {
// @@protoc_insertion_point(message_clear_start:net.messages.Polyline)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.color_ != nullptr);
    _impl_.color_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Polyline::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Polyline::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Polyline, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Polyline_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .net.messages.Vector2f points = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(Polyline, _impl_.points_)}},
    // .net.messages.Color color = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Polyline, _impl_.color_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .net.messages.Color color = 1;
    {PROTOBUF_FIELD_OFFSET(Polyline, _impl_.color_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .net.messages.Vector2f points = 2;
    {PROTOBUF_FIELD_OFFSET(Polyline, _impl_.points_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::net::messages::Color>()},
    {::_pbi::TcParser::GetTable<::net::messages::Vector2f>()},
  }}, {{
  }},
};

::uint8_t* Polyline::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.messages.Polyline)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .net.messages.Color color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // repeated .net.messages.Vector2f points = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.messages.Polyline)
  return target;
}

::size_t Polyline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.messages.Polyline)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .net.messages.Vector2f points = 2;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_internal_points()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .net.messages.Color color = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.color_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Polyline::_class_data_ = {
    Polyline::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Polyline::GetClassData() const {
  return &_class_data_;
}

void Polyline::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Polyline*>(&to_msg);
  auto& from = static_cast<const Polyline&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:net.messages.Polyline)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_points()->MergeFrom(
      from._internal_points());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_color()->::net::messages::Color::MergeFrom(
        from._internal_color());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Polyline::CopyFrom(const Polyline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.messages.Polyline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Polyline::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Polyline::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Polyline::InternalSwap(Polyline* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
  swap(_impl_.color_, other->_impl_.color_);
}

::google::protobuf::Metadata Polyline::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_getter, &descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_once,
      file_level_metadata_net_2fproto_5fbuf_2fmessages_2eproto[5]);
}
// ===================================================================

class LogText::_Internal {
 public:
};

LogText::LogText(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.messages.LogText)
}
inline PROTOBUF_NDEBUG_INLINE LogText::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : text_(arena, from.text_),
        _cached_size_{0} {}

LogText::LogText(
    ::google::protobuf::Arena* arena,
    const LogText& from)
    : ::google::protobuf::Message(arena) {
  LogText* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:net.messages.LogText)
}
inline PROTOBUF_NDEBUG_INLINE LogText::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : text_(arena),
        _cached_size_{0} {}

inline void LogText::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
LogText::~LogText() {
  // @@protoc_insertion_point(destructor:net.messages.LogText)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LogText::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.text_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LogText::Clear() {
// @@protoc_insertion_point(message_clear_start:net.messages.LogText)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LogText::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 33, 2> LogText::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_LogText_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string text = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(LogText, _impl_.text_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string text = 1;
    {PROTOBUF_FIELD_OFFSET(LogText, _impl_.text_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\24\4\0\0\0\0\0\0"
    "net.messages.LogText"
    "text"
  }},
};

::uint8_t* LogText::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.messages.LogText)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    const std::string& _s = this->_internal_text();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "net.messages.LogText.text");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.messages.LogText)
  return target;
}

::size_t LogText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.messages.LogText)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LogText::_class_data_ = {
    LogText::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LogText::GetClassData() const {
  return &_class_data_;
}

void LogText::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LogText*>(&to_msg);
  auto& from = static_cast<const LogText&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:net.messages.LogText)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LogText::CopyFrom(const LogText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.messages.LogText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LogText::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LogText::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LogText::InternalSwap(LogText* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_, &other->_impl_.text_, arena);
}

::google::protobuf::Metadata LogText::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_getter, &descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_once,
      file_level_metadata_net_2fproto_5fbuf_2fmessages_2eproto[6]);
}
// ===================================================================

class Popup::_Internal {
 public:
  using HasBits = decltype(std::declval<Popup>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Popup, _impl_._has_bits_);
  static const ::net::messages::Vector2f& position(const Popup* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::net::messages::Vector2f& Popup::_Internal::position(const Popup* msg) {
  return *msg->_impl_.position_;
}
Popup::Popup(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.messages.Popup)
}
inline PROTOBUF_NDEBUG_INLINE Popup::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        text_(arena, from.text_) {}

Popup::Popup(
    ::google::protobuf::Arena* arena,
    const Popup& from)
    : ::google::protobuf::Message(arena) {
  Popup* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::net::messages::Vector2f>(arena, *from._impl_.position_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, width_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, width_),
           offsetof(Impl_, height_) -
               offsetof(Impl_, width_) +
               sizeof(Impl_::height_));

  // @@protoc_insertion_point(copy_constructor:net.messages.Popup)
}
inline PROTOBUF_NDEBUG_INLINE Popup::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        text_(arena) {}

inline void Popup::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, height_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::height_));
}
Popup::~Popup() {
  // @@protoc_insertion_point(destructor:net.messages.Popup)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Popup::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.text_.Destroy();
  delete _impl_.position_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Popup::Clear() {
// @@protoc_insertion_point(message_clear_start:net.messages.Popup)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.position_ != nullptr);
    _impl_.position_->Clear();
  }
  ::memset(&_impl_.width_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Popup::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 31, 2> Popup::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Popup, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Popup_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float height = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(Popup, _impl_.height_)}},
    // string text = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Popup, _impl_.text_)}},
    // .net.messages.Vector2f position = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Popup, _impl_.position_)}},
    // float width = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Popup, _impl_.width_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string text = 1;
    {PROTOBUF_FIELD_OFFSET(Popup, _impl_.text_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .net.messages.Vector2f position = 2;
    {PROTOBUF_FIELD_OFFSET(Popup, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float width = 3;
    {PROTOBUF_FIELD_OFFSET(Popup, _impl_.width_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float height = 4;
    {PROTOBUF_FIELD_OFFSET(Popup, _impl_.height_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::net::messages::Vector2f>()},
  }}, {{
    "\22\4\0\0\0\0\0\0"
    "net.messages.Popup"
    "text"
  }},
};

::uint8_t* Popup::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.messages.Popup)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    const std::string& _s = this->_internal_text();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "net.messages.Popup.text");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .net.messages.Vector2f position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // float width = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  ::uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_width(), target);
  }

  // float height = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  ::uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.messages.Popup)
  return target;
}

::size_t Popup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.messages.Popup)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_text());
  }

  // .net.messages.Vector2f position = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_);
  }

  // float width = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  ::uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 5;
  }

  // float height = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  ::uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Popup::_class_data_ = {
    Popup::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Popup::GetClassData() const {
  return &_class_data_;
}

void Popup::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Popup*>(&to_msg);
  auto& from = static_cast<const Popup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:net.messages.Popup)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_position()->::net::messages::Vector2f::MergeFrom(
        from._internal_position());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_width = from._internal_width();
  ::uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_height = from._internal_height();
  ::uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Popup::CopyFrom(const Popup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.messages.Popup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Popup::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Popup::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Popup::InternalSwap(Popup* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_, &other->_impl_.text_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Popup, _impl_.height_)
      + sizeof(Popup::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(Popup, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata Popup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_getter, &descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_once,
      file_level_metadata_net_2fproto_5fbuf_2fmessages_2eproto[7]);
}
// ===================================================================

class PopupRound::_Internal {
 public:
  using HasBits = decltype(std::declval<PopupRound>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PopupRound, _impl_._has_bits_);
  static const ::net::messages::Vector2f& center(const PopupRound* msg);
  static void set_has_center(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::net::messages::Vector2f& PopupRound::_Internal::center(const PopupRound* msg) {
  return *msg->_impl_.center_;
}
PopupRound::PopupRound(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.messages.PopupRound)
}
inline PROTOBUF_NDEBUG_INLINE PopupRound::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        text_(arena, from.text_) {}

PopupRound::PopupRound(
    ::google::protobuf::Arena* arena,
    const PopupRound& from)
    : ::google::protobuf::Message(arena) {
  PopupRound* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.center_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::net::messages::Vector2f>(arena, *from._impl_.center_)
                : nullptr;
  _impl_.radius_ = from._impl_.radius_;

  // @@protoc_insertion_point(copy_constructor:net.messages.PopupRound)
}
inline PROTOBUF_NDEBUG_INLINE PopupRound::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        text_(arena) {}

inline void PopupRound::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, center_),
           0,
           offsetof(Impl_, radius_) -
               offsetof(Impl_, center_) +
               sizeof(Impl_::radius_));
}
PopupRound::~PopupRound() {
  // @@protoc_insertion_point(destructor:net.messages.PopupRound)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PopupRound::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.text_.Destroy();
  delete _impl_.center_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PopupRound::Clear() {
// @@protoc_insertion_point(message_clear_start:net.messages.PopupRound)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.center_ != nullptr);
    _impl_.center_->Clear();
  }
  _impl_.radius_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PopupRound::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 36, 2> PopupRound::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PopupRound, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PopupRound_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string text = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PopupRound, _impl_.text_)}},
    // .net.messages.Vector2f center = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(PopupRound, _impl_.center_)}},
    // float radius = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(PopupRound, _impl_.radius_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string text = 1;
    {PROTOBUF_FIELD_OFFSET(PopupRound, _impl_.text_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .net.messages.Vector2f center = 2;
    {PROTOBUF_FIELD_OFFSET(PopupRound, _impl_.center_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float radius = 3;
    {PROTOBUF_FIELD_OFFSET(PopupRound, _impl_.radius_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::net::messages::Vector2f>()},
  }}, {{
    "\27\4\0\0\0\0\0\0"
    "net.messages.PopupRound"
    "text"
  }},
};

::uint8_t* PopupRound::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.messages.PopupRound)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    const std::string& _s = this->_internal_text();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "net.messages.PopupRound.text");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .net.messages.Vector2f center = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::center(this),
        _Internal::center(this).GetCachedSize(), target, stream);
  }

  // float radius = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  ::uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.messages.PopupRound)
  return target;
}

::size_t PopupRound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.messages.PopupRound)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_text());
  }

  // .net.messages.Vector2f center = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.center_);
  }

  // float radius = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  ::uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PopupRound::_class_data_ = {
    PopupRound::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* PopupRound::GetClassData() const {
  return &_class_data_;
}

void PopupRound::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PopupRound*>(&to_msg);
  auto& from = static_cast<const PopupRound&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:net.messages.PopupRound)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_center()->::net::messages::Vector2f::MergeFrom(
        from._internal_center());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_radius = from._internal_radius();
  ::uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    _this->_internal_set_radius(from._internal_radius());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PopupRound::CopyFrom(const PopupRound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.messages.PopupRound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PopupRound::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PopupRound::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PopupRound::InternalSwap(PopupRound* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_, &other->_impl_.text_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PopupRound, _impl_.radius_)
      + sizeof(PopupRound::_impl_.radius_)
      - PROTOBUF_FIELD_OFFSET(PopupRound, _impl_.center_)>(
          reinterpret_cast<char*>(&_impl_.center_),
          reinterpret_cast<char*>(&other->_impl_.center_));
}

::google::protobuf::Metadata PopupRound::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_getter, &descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_once,
      file_level_metadata_net_2fproto_5fbuf_2fmessages_2eproto[8]);
}
// ===================================================================

class Options::_Internal {
 public:
  using HasBits = decltype(std::declval<Options>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Options, _impl_._has_bits_);
  static void set_has_use_permanent_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Options::Options(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.messages.Options)
}
Options::Options(
    ::google::protobuf::Arena* arena, const Options& from)
    : Options(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Options::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Options::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, use_permanent_frame_),
           0,
           offsetof(Impl_, layer_) -
               offsetof(Impl_, use_permanent_frame_) +
               sizeof(Impl_::layer_));
}
Options::~Options() {
  // @@protoc_insertion_point(destructor:net.messages.Options)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Options::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Options::Clear() {
// @@protoc_insertion_point(message_clear_start:net.messages.Options)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.use_permanent_frame_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.layer_) -
        reinterpret_cast<char*>(&_impl_.use_permanent_frame_)) + sizeof(_impl_.layer_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Options::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Options::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Options, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Options_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional uint32 layer = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Options, _impl_.layer_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(Options, _impl_.layer_)}},
    // optional bool use_permanent_frame = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Options, _impl_.use_permanent_frame_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(Options, _impl_.use_permanent_frame_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool use_permanent_frame = 1;
    {PROTOBUF_FIELD_OFFSET(Options, _impl_.use_permanent_frame_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional uint32 layer = 2;
    {PROTOBUF_FIELD_OFFSET(Options, _impl_.layer_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Options::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.messages.Options)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool use_permanent_frame = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_use_permanent_frame(), target);
  }

  // optional uint32 layer = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_layer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.messages.Options)
  return target;
}

::size_t Options::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.messages.Options)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool use_permanent_frame = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2;
    }

    // optional uint32 layer = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_layer());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Options::_class_data_ = {
    Options::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Options::GetClassData() const {
  return &_class_data_;
}

void Options::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Options*>(&to_msg);
  auto& from = static_cast<const Options&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:net.messages.Options)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.use_permanent_frame_ = from._impl_.use_permanent_frame_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.layer_ = from._impl_.layer_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Options::CopyFrom(const Options& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.messages.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Options::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Options::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Options::InternalSwap(Options* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Options, _impl_.layer_)
      + sizeof(Options::_impl_.layer_)
      - PROTOBUF_FIELD_OFFSET(Options, _impl_.use_permanent_frame_)>(
          reinterpret_cast<char*>(&_impl_.use_permanent_frame_),
          reinterpret_cast<char*>(&other->_impl_.use_permanent_frame_));
}

::google::protobuf::Metadata Options::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_getter, &descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_once,
      file_level_metadata_net_2fproto_5fbuf_2fmessages_2eproto[9]);
}
// ===================================================================

class Map::_Internal {
 public:
};

Map::Map(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.messages.Map)
}
Map::Map(
    ::google::protobuf::Arena* arena, const Map& from)
    : Map(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Map::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Map::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, width_),
           0,
           offsetof(Impl_, y_grid_) -
               offsetof(Impl_, width_) +
               sizeof(Impl_::y_grid_));
}
Map::~Map() {
  // @@protoc_insertion_point(destructor:net.messages.Map)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Map::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Map::Clear() {
// @@protoc_insertion_point(message_clear_start:net.messages.Map)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.width_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.y_grid_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.y_grid_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Map::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> Map::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Map_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 y_grid = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Map, _impl_.y_grid_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Map, _impl_.y_grid_)}},
    // float width = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Map, _impl_.width_)}},
    // float height = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Map, _impl_.height_)}},
    // uint32 x_grid = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Map, _impl_.x_grid_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Map, _impl_.x_grid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float width = 1;
    {PROTOBUF_FIELD_OFFSET(Map, _impl_.width_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float height = 2;
    {PROTOBUF_FIELD_OFFSET(Map, _impl_.height_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // uint32 x_grid = 3;
    {PROTOBUF_FIELD_OFFSET(Map, _impl_.x_grid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 y_grid = 4;
    {PROTOBUF_FIELD_OFFSET(Map, _impl_.y_grid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Map::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.messages.Map)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float width = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  ::uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_width(), target);
  }

  // float height = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  ::uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_height(), target);
  }

  // uint32 x_grid = 3;
  if (this->_internal_x_grid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_x_grid(), target);
  }

  // uint32 y_grid = 4;
  if (this->_internal_y_grid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_y_grid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.messages.Map)
  return target;
}

::size_t Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.messages.Map)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float width = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  ::uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 5;
  }

  // float height = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  ::uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 5;
  }

  // uint32 x_grid = 3;
  if (this->_internal_x_grid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_x_grid());
  }

  // uint32 y_grid = 4;
  if (this->_internal_y_grid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_y_grid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Map::_class_data_ = {
    Map::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Map::GetClassData() const {
  return &_class_data_;
}

void Map::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Map*>(&to_msg);
  auto& from = static_cast<const Map&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:net.messages.Map)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_width = from._internal_width();
  ::uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_height = from._internal_height();
  ::uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_x_grid() != 0) {
    _this->_internal_set_x_grid(from._internal_x_grid());
  }
  if (from._internal_y_grid() != 0) {
    _this->_internal_set_y_grid(from._internal_y_grid());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Map::CopyFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.messages.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Map::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Map::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Map::InternalSwap(Map* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Map, _impl_.y_grid_)
      + sizeof(Map::_impl_.y_grid_)
      - PROTOBUF_FIELD_OFFSET(Map, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::google::protobuf::Metadata Map::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_getter, &descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_once,
      file_level_metadata_net_2fproto_5fbuf_2fmessages_2eproto[10]);
}
// ===================================================================

class EndFrame::_Internal {
 public:
};

EndFrame::EndFrame(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:net.messages.EndFrame)
}
EndFrame::EndFrame(
    ::google::protobuf::Arena* arena,
    const EndFrame& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  EndFrame* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:net.messages.EndFrame)
}









::google::protobuf::Metadata EndFrame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_getter, &descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_once,
      file_level_metadata_net_2fproto_5fbuf_2fmessages_2eproto[11]);
}
// ===================================================================

class DrawMessage::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::net::messages::DrawMessage, _impl_._oneof_case_);
  static const ::net::messages::Circle& circle(const DrawMessage* msg);
  static const ::net::messages::Rectangle& rectangle(const DrawMessage* msg);
  static const ::net::messages::Triangle& triangle(const DrawMessage* msg);
  static const ::net::messages::Polyline& polyline(const DrawMessage* msg);
  static const ::net::messages::LogText& log_text(const DrawMessage* msg);
  static const ::net::messages::Popup& popup(const DrawMessage* msg);
  static const ::net::messages::PopupRound& popup_round(const DrawMessage* msg);
  static const ::net::messages::Options& options(const DrawMessage* msg);
  static const ::net::messages::Map& map(const DrawMessage* msg);
  static const ::net::messages::EndFrame& end_frame(const DrawMessage* msg);
};

const ::net::messages::Circle& DrawMessage::_Internal::circle(const DrawMessage* msg) {
  return *msg->_impl_.command_.circle_;
}
const ::net::messages::Rectangle& DrawMessage::_Internal::rectangle(const DrawMessage* msg) {
  return *msg->_impl_.command_.rectangle_;
}
const ::net::messages::Triangle& DrawMessage::_Internal::triangle(const DrawMessage* msg) {
  return *msg->_impl_.command_.triangle_;
}
const ::net::messages::Polyline& DrawMessage::_Internal::polyline(const DrawMessage* msg) {
  return *msg->_impl_.command_.polyline_;
}
const ::net::messages::LogText& DrawMessage::_Internal::log_text(const DrawMessage* msg) {
  return *msg->_impl_.command_.log_text_;
}
const ::net::messages::Popup& DrawMessage::_Internal::popup(const DrawMessage* msg) {
  return *msg->_impl_.command_.popup_;
}
const ::net::messages::PopupRound& DrawMessage::_Internal::popup_round(const DrawMessage* msg) {
  return *msg->_impl_.command_.popup_round_;
}
const ::net::messages::Options& DrawMessage::_Internal::options(const DrawMessage* msg) {
  return *msg->_impl_.command_.options_;
}
const ::net::messages::Map& DrawMessage::_Internal::map(const DrawMessage* msg) {
  return *msg->_impl_.command_.map_;
}
const ::net::messages::EndFrame& DrawMessage::_Internal::end_frame(const DrawMessage* msg) {
  return *msg->_impl_.command_.end_frame_;
}
void DrawMessage::set_allocated_circle(::net::messages::Circle* circle) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_command();
  if (circle) {
    ::google::protobuf::Arena* submessage_arena = circle->GetArena();
    if (message_arena != submessage_arena) {
      circle = ::google::protobuf::internal::GetOwnedMessage(message_arena, circle, submessage_arena);
    }
    set_has_circle();
    _impl_.command_.circle_ = circle;
  }
  // @@protoc_insertion_point(field_set_allocated:net.messages.DrawMessage.circle)
}
void DrawMessage::set_allocated_rectangle(::net::messages::Rectangle* rectangle) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_command();
  if (rectangle) {
    ::google::protobuf::Arena* submessage_arena = rectangle->GetArena();
    if (message_arena != submessage_arena) {
      rectangle = ::google::protobuf::internal::GetOwnedMessage(message_arena, rectangle, submessage_arena);
    }
    set_has_rectangle();
    _impl_.command_.rectangle_ = rectangle;
  }
  // @@protoc_insertion_point(field_set_allocated:net.messages.DrawMessage.rectangle)
}
void DrawMessage::set_allocated_triangle(::net::messages::Triangle* triangle) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_command();
  if (triangle) {
    ::google::protobuf::Arena* submessage_arena = triangle->GetArena();
    if (message_arena != submessage_arena) {
      triangle = ::google::protobuf::internal::GetOwnedMessage(message_arena, triangle, submessage_arena);
    }
    set_has_triangle();
    _impl_.command_.triangle_ = triangle;
  }
  // @@protoc_insertion_point(field_set_allocated:net.messages.DrawMessage.triangle)
}
void DrawMessage::set_allocated_polyline(::net::messages::Polyline* polyline) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_command();
  if (polyline) {
    ::google::protobuf::Arena* submessage_arena = polyline->GetArena();
    if (message_arena != submessage_arena) {
      polyline = ::google::protobuf::internal::GetOwnedMessage(message_arena, polyline, submessage_arena);
    }
    set_has_polyline();
    _impl_.command_.polyline_ = polyline;
  }
  // @@protoc_insertion_point(field_set_allocated:net.messages.DrawMessage.polyline)
}
void DrawMessage::set_allocated_log_text(::net::messages::LogText* log_text) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_command();
  if (log_text) {
    ::google::protobuf::Arena* submessage_arena = log_text->GetArena();
    if (message_arena != submessage_arena) {
      log_text = ::google::protobuf::internal::GetOwnedMessage(message_arena, log_text, submessage_arena);
    }
    set_has_log_text();
    _impl_.command_.log_text_ = log_text;
  }
  // @@protoc_insertion_point(field_set_allocated:net.messages.DrawMessage.log_text)
}
void DrawMessage::set_allocated_popup(::net::messages::Popup* popup) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_command();
  if (popup) {
    ::google::protobuf::Arena* submessage_arena = popup->GetArena();
    if (message_arena != submessage_arena) {
      popup = ::google::protobuf::internal::GetOwnedMessage(message_arena, popup, submessage_arena);
    }
    set_has_popup();
    _impl_.command_.popup_ = popup;
  }
  // @@protoc_insertion_point(field_set_allocated:net.messages.DrawMessage.popup)
}
void DrawMessage::set_allocated_popup_round(::net::messages::PopupRound* popup_round) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_command();
  if (popup_round) {
    ::google::protobuf::Arena* submessage_arena = popup_round->GetArena();
    if (message_arena != submessage_arena) {
      popup_round = ::google::protobuf::internal::GetOwnedMessage(message_arena, popup_round, submessage_arena);
    }
    set_has_popup_round();
    _impl_.command_.popup_round_ = popup_round;
  }
  // @@protoc_insertion_point(field_set_allocated:net.messages.DrawMessage.popup_round)
}
void DrawMessage::set_allocated_options(::net::messages::Options* options) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_command();
  if (options) {
    ::google::protobuf::Arena* submessage_arena = options->GetArena();
    if (message_arena != submessage_arena) {
      options = ::google::protobuf::internal::GetOwnedMessage(message_arena, options, submessage_arena);
    }
    set_has_options();
    _impl_.command_.options_ = options;
  }
  // @@protoc_insertion_point(field_set_allocated:net.messages.DrawMessage.options)
}
void DrawMessage::set_allocated_map(::net::messages::Map* map) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_command();
  if (map) {
    ::google::protobuf::Arena* submessage_arena = map->GetArena();
    if (message_arena != submessage_arena) {
      map = ::google::protobuf::internal::GetOwnedMessage(message_arena, map, submessage_arena);
    }
    set_has_map();
    _impl_.command_.map_ = map;
  }
  // @@protoc_insertion_point(field_set_allocated:net.messages.DrawMessage.map)
}
void DrawMessage::set_allocated_end_frame(::net::messages::EndFrame* end_frame) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_command();
  if (end_frame) {
    ::google::protobuf::Arena* submessage_arena = end_frame->GetArena();
    if (message_arena != submessage_arena) {
      end_frame = ::google::protobuf::internal::GetOwnedMessage(message_arena, end_frame, submessage_arena);
    }
    set_has_end_frame();
    _impl_.command_.end_frame_ = end_frame;
  }
  // @@protoc_insertion_point(field_set_allocated:net.messages.DrawMessage.end_frame)
}
DrawMessage::DrawMessage(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:net.messages.DrawMessage)
}
inline PROTOBUF_NDEBUG_INLINE DrawMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : command_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

DrawMessage::DrawMessage(
    ::google::protobuf::Arena* arena,
    const DrawMessage& from)
    : ::google::protobuf::Message(arena) {
  DrawMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (command_case()) {
    case COMMAND_NOT_SET:
      break;
      case kCircle:
        _impl_.command_.circle_ = CreateMaybeMessage<::net::messages::Circle>(arena, *from._impl_.command_.circle_);
        break;
      case kRectangle:
        _impl_.command_.rectangle_ = CreateMaybeMessage<::net::messages::Rectangle>(arena, *from._impl_.command_.rectangle_);
        break;
      case kTriangle:
        _impl_.command_.triangle_ = CreateMaybeMessage<::net::messages::Triangle>(arena, *from._impl_.command_.triangle_);
        break;
      case kPolyline:
        _impl_.command_.polyline_ = CreateMaybeMessage<::net::messages::Polyline>(arena, *from._impl_.command_.polyline_);
        break;
      case kLogText:
        _impl_.command_.log_text_ = CreateMaybeMessage<::net::messages::LogText>(arena, *from._impl_.command_.log_text_);
        break;
      case kPopup:
        _impl_.command_.popup_ = CreateMaybeMessage<::net::messages::Popup>(arena, *from._impl_.command_.popup_);
        break;
      case kPopupRound:
        _impl_.command_.popup_round_ = CreateMaybeMessage<::net::messages::PopupRound>(arena, *from._impl_.command_.popup_round_);
        break;
      case kOptions:
        _impl_.command_.options_ = CreateMaybeMessage<::net::messages::Options>(arena, *from._impl_.command_.options_);
        break;
      case kMap:
        _impl_.command_.map_ = CreateMaybeMessage<::net::messages::Map>(arena, *from._impl_.command_.map_);
        break;
      case kEndFrame:
        _impl_.command_.end_frame_ = CreateMaybeMessage<::net::messages::EndFrame>(arena, *from._impl_.command_.end_frame_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:net.messages.DrawMessage)
}
inline PROTOBUF_NDEBUG_INLINE DrawMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : command_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void DrawMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
DrawMessage::~DrawMessage() {
  // @@protoc_insertion_point(destructor:net.messages.DrawMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DrawMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_command()) {
    clear_command();
  }
  _impl_.~Impl_();
}

void DrawMessage::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:net.messages.DrawMessage)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (command_case()) {
    case kCircle: {
      if (GetArena() == nullptr) {
        delete _impl_.command_.circle_;
      }
      break;
    }
    case kRectangle: {
      if (GetArena() == nullptr) {
        delete _impl_.command_.rectangle_;
      }
      break;
    }
    case kTriangle: {
      if (GetArena() == nullptr) {
        delete _impl_.command_.triangle_;
      }
      break;
    }
    case kPolyline: {
      if (GetArena() == nullptr) {
        delete _impl_.command_.polyline_;
      }
      break;
    }
    case kLogText: {
      if (GetArena() == nullptr) {
        delete _impl_.command_.log_text_;
      }
      break;
    }
    case kPopup: {
      if (GetArena() == nullptr) {
        delete _impl_.command_.popup_;
      }
      break;
    }
    case kPopupRound: {
      if (GetArena() == nullptr) {
        delete _impl_.command_.popup_round_;
      }
      break;
    }
    case kOptions: {
      if (GetArena() == nullptr) {
        delete _impl_.command_.options_;
      }
      break;
    }
    case kMap: {
      if (GetArena() == nullptr) {
        delete _impl_.command_.map_;
      }
      break;
    }
    case kEndFrame: {
      if (GetArena() == nullptr) {
        delete _impl_.command_.end_frame_;
      }
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = COMMAND_NOT_SET;
}


PROTOBUF_NOINLINE void DrawMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:net.messages.DrawMessage)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_command();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DrawMessage::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 10, 10, 0, 2> DrawMessage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    10,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DrawMessage_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .net.messages.Circle circle = 1;
    {PROTOBUF_FIELD_OFFSET(DrawMessage, _impl_.command_.circle_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .net.messages.Rectangle rectangle = 2;
    {PROTOBUF_FIELD_OFFSET(DrawMessage, _impl_.command_.rectangle_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .net.messages.Triangle triangle = 3;
    {PROTOBUF_FIELD_OFFSET(DrawMessage, _impl_.command_.triangle_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .net.messages.Polyline polyline = 4;
    {PROTOBUF_FIELD_OFFSET(DrawMessage, _impl_.command_.polyline_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .net.messages.LogText log_text = 5;
    {PROTOBUF_FIELD_OFFSET(DrawMessage, _impl_.command_.log_text_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .net.messages.Popup popup = 6;
    {PROTOBUF_FIELD_OFFSET(DrawMessage, _impl_.command_.popup_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .net.messages.PopupRound popup_round = 7;
    {PROTOBUF_FIELD_OFFSET(DrawMessage, _impl_.command_.popup_round_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .net.messages.Options options = 8;
    {PROTOBUF_FIELD_OFFSET(DrawMessage, _impl_.command_.options_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .net.messages.Map map = 9;
    {PROTOBUF_FIELD_OFFSET(DrawMessage, _impl_.command_.map_), _Internal::kOneofCaseOffset + 0, 8,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .net.messages.EndFrame end_frame = 10;
    {PROTOBUF_FIELD_OFFSET(DrawMessage, _impl_.command_.end_frame_), _Internal::kOneofCaseOffset + 0, 9,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvDefault)},
  }}, {{
    {::_pbi::TcParser::GetTable<::net::messages::Circle>()},
    {::_pbi::TcParser::GetTable<::net::messages::Rectangle>()},
    {::_pbi::TcParser::GetTable<::net::messages::Triangle>()},
    {::_pbi::TcParser::GetTable<::net::messages::Polyline>()},
    {::_pbi::TcParser::GetTable<::net::messages::LogText>()},
    {::_pbi::TcParser::GetTable<::net::messages::Popup>()},
    {::_pbi::TcParser::GetTable<::net::messages::PopupRound>()},
    {::_pbi::TcParser::GetTable<::net::messages::Options>()},
    {::_pbi::TcParser::GetTable<::net::messages::Map>()},
    {::_pbi::FieldAuxDefaultMessage{}, &::net::messages::_EndFrame_default_instance_},
  }}, {{
  }},
};

::uint8_t* DrawMessage::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.messages.DrawMessage)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (command_case()) {
    case kCircle: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, _Internal::circle(this),
          _Internal::circle(this).GetCachedSize(), target, stream);
      break;
    }
    case kRectangle: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, _Internal::rectangle(this),
          _Internal::rectangle(this).GetCachedSize(), target, stream);
      break;
    }
    case kTriangle: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, _Internal::triangle(this),
          _Internal::triangle(this).GetCachedSize(), target, stream);
      break;
    }
    case kPolyline: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, _Internal::polyline(this),
          _Internal::polyline(this).GetCachedSize(), target, stream);
      break;
    }
    case kLogText: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, _Internal::log_text(this),
          _Internal::log_text(this).GetCachedSize(), target, stream);
      break;
    }
    case kPopup: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, _Internal::popup(this),
          _Internal::popup(this).GetCachedSize(), target, stream);
      break;
    }
    case kPopupRound: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          7, _Internal::popup_round(this),
          _Internal::popup_round(this).GetCachedSize(), target, stream);
      break;
    }
    case kOptions: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          8, _Internal::options(this),
          _Internal::options(this).GetCachedSize(), target, stream);
      break;
    }
    case kMap: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          9, _Internal::map(this),
          _Internal::map(this).GetCachedSize(), target, stream);
      break;
    }
    case kEndFrame: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          10, _Internal::end_frame(this),
          _Internal::end_frame(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.messages.DrawMessage)
  return target;
}

::size_t DrawMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.messages.DrawMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (command_case()) {
    // .net.messages.Circle circle = 1;
    case kCircle: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.command_.circle_);
      break;
    }
    // .net.messages.Rectangle rectangle = 2;
    case kRectangle: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.command_.rectangle_);
      break;
    }
    // .net.messages.Triangle triangle = 3;
    case kTriangle: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.command_.triangle_);
      break;
    }
    // .net.messages.Polyline polyline = 4;
    case kPolyline: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.command_.polyline_);
      break;
    }
    // .net.messages.LogText log_text = 5;
    case kLogText: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.command_.log_text_);
      break;
    }
    // .net.messages.Popup popup = 6;
    case kPopup: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.command_.popup_);
      break;
    }
    // .net.messages.PopupRound popup_round = 7;
    case kPopupRound: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.command_.popup_round_);
      break;
    }
    // .net.messages.Options options = 8;
    case kOptions: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.command_.options_);
      break;
    }
    // .net.messages.Map map = 9;
    case kMap: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.command_.map_);
      break;
    }
    // .net.messages.EndFrame end_frame = 10;
    case kEndFrame: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.command_.end_frame_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DrawMessage::_class_data_ = {
    DrawMessage::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* DrawMessage::GetClassData() const {
  return &_class_data_;
}

void DrawMessage::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DrawMessage*>(&to_msg);
  auto& from = static_cast<const DrawMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:net.messages.DrawMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.command_case()) {
    case kCircle: {
      _this->_internal_mutable_circle()->::net::messages::Circle::MergeFrom(
          from._internal_circle());
      break;
    }
    case kRectangle: {
      _this->_internal_mutable_rectangle()->::net::messages::Rectangle::MergeFrom(
          from._internal_rectangle());
      break;
    }
    case kTriangle: {
      _this->_internal_mutable_triangle()->::net::messages::Triangle::MergeFrom(
          from._internal_triangle());
      break;
    }
    case kPolyline: {
      _this->_internal_mutable_polyline()->::net::messages::Polyline::MergeFrom(
          from._internal_polyline());
      break;
    }
    case kLogText: {
      _this->_internal_mutable_log_text()->::net::messages::LogText::MergeFrom(
          from._internal_log_text());
      break;
    }
    case kPopup: {
      _this->_internal_mutable_popup()->::net::messages::Popup::MergeFrom(
          from._internal_popup());
      break;
    }
    case kPopupRound: {
      _this->_internal_mutable_popup_round()->::net::messages::PopupRound::MergeFrom(
          from._internal_popup_round());
      break;
    }
    case kOptions: {
      _this->_internal_mutable_options()->::net::messages::Options::MergeFrom(
          from._internal_options());
      break;
    }
    case kMap: {
      _this->_internal_mutable_map()->::net::messages::Map::MergeFrom(
          from._internal_map());
      break;
    }
    case kEndFrame: {
      _this->_internal_mutable_end_frame()->::net::messages::EndFrame::MergeFrom(
          from._internal_end_frame());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DrawMessage::CopyFrom(const DrawMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.messages.DrawMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DrawMessage::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DrawMessage::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DrawMessage::InternalSwap(DrawMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.command_, other->_impl_.command_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata DrawMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_getter, &descriptor_table_net_2fproto_5fbuf_2fmessages_2eproto_once,
      file_level_metadata_net_2fproto_5fbuf_2fmessages_2eproto[12]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace net
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
