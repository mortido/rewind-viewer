// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REWINDMESSAGE_REWIND_VIEWER_FBS_H_
#define FLATBUFFERS_GENERATED_REWINDMESSAGE_REWIND_VIEWER_FBS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "actions.fbs.h"
#include "auxiliary.fbs.h"
#include "primitives.fbs.h"
#include "ui.fbs.h"

namespace rewind_viewer {
namespace fbs {

struct RewindMessage;
struct RewindMessageBuilder;

enum Command : uint8_t {
  Command_NONE = 0,
  Command_Subscribe = 1,
  Command_Unsubscribe = 2,
  Command_CreateAction = 3,
  Command_RemoveAction = 4,
  Command_ReadEvents = 5,
  Command_Layer = 6,
  Command_Map = 7,
  Command_EndFrame = 8,
  Command_Arc = 9,
  Command_Circle = 10,
  Command_CircleSegment = 11,
  Command_Polyline = 12,
  Command_Rectangle = 13,
  Command_Tiles = 14,
  Command_Triangle = 15,
  Command_StartProto = 16,
  Command_EndProto = 17,
  Command_DrawProto = 18,
  Command_LogText = 19,
  Command_Popup = 20,
  Command_PopupRound = 21,
  Command_CameraView = 22,
  Command_Text = 23,
  Command_MIN = Command_NONE,
  Command_MAX = Command_Text
};

inline const Command (&EnumValuesCommand())[24] {
  static const Command values[] = {
    Command_NONE,
    Command_Subscribe,
    Command_Unsubscribe,
    Command_CreateAction,
    Command_RemoveAction,
    Command_ReadEvents,
    Command_Layer,
    Command_Map,
    Command_EndFrame,
    Command_Arc,
    Command_Circle,
    Command_CircleSegment,
    Command_Polyline,
    Command_Rectangle,
    Command_Tiles,
    Command_Triangle,
    Command_StartProto,
    Command_EndProto,
    Command_DrawProto,
    Command_LogText,
    Command_Popup,
    Command_PopupRound,
    Command_CameraView,
    Command_Text
  };
  return values;
}

inline const char * const *EnumNamesCommand() {
  static const char * const names[25] = {
    "NONE",
    "Subscribe",
    "Unsubscribe",
    "CreateAction",
    "RemoveAction",
    "ReadEvents",
    "Layer",
    "Map",
    "EndFrame",
    "Arc",
    "Circle",
    "CircleSegment",
    "Polyline",
    "Rectangle",
    "Tiles",
    "Triangle",
    "StartProto",
    "EndProto",
    "DrawProto",
    "LogText",
    "Popup",
    "PopupRound",
    "CameraView",
    "Text",
    nullptr
  };
  return names;
}

inline const char *EnumNameCommand(Command e) {
  if (::flatbuffers::IsOutRange(e, Command_NONE, Command_Text)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCommand()[index];
}

template<typename T> struct CommandTraits {
  static const Command enum_value = Command_NONE;
};

template<> struct CommandTraits<rewind_viewer::fbs::Subscribe> {
  static const Command enum_value = Command_Subscribe;
};

template<> struct CommandTraits<rewind_viewer::fbs::Unsubscribe> {
  static const Command enum_value = Command_Unsubscribe;
};

template<> struct CommandTraits<rewind_viewer::fbs::CreateAction> {
  static const Command enum_value = Command_CreateAction;
};

template<> struct CommandTraits<rewind_viewer::fbs::RemoveAction> {
  static const Command enum_value = Command_RemoveAction;
};

template<> struct CommandTraits<rewind_viewer::fbs::ReadEvents> {
  static const Command enum_value = Command_ReadEvents;
};

template<> struct CommandTraits<rewind_viewer::fbs::Layer> {
  static const Command enum_value = Command_Layer;
};

template<> struct CommandTraits<rewind_viewer::fbs::Map> {
  static const Command enum_value = Command_Map;
};

template<> struct CommandTraits<rewind_viewer::fbs::EndFrame> {
  static const Command enum_value = Command_EndFrame;
};

template<> struct CommandTraits<rewind_viewer::fbs::Arc> {
  static const Command enum_value = Command_Arc;
};

template<> struct CommandTraits<rewind_viewer::fbs::Circle> {
  static const Command enum_value = Command_Circle;
};

template<> struct CommandTraits<rewind_viewer::fbs::CircleSegment> {
  static const Command enum_value = Command_CircleSegment;
};

template<> struct CommandTraits<rewind_viewer::fbs::Polyline> {
  static const Command enum_value = Command_Polyline;
};

template<> struct CommandTraits<rewind_viewer::fbs::Rectangle> {
  static const Command enum_value = Command_Rectangle;
};

template<> struct CommandTraits<rewind_viewer::fbs::Tiles> {
  static const Command enum_value = Command_Tiles;
};

template<> struct CommandTraits<rewind_viewer::fbs::Triangle> {
  static const Command enum_value = Command_Triangle;
};

template<> struct CommandTraits<rewind_viewer::fbs::StartProto> {
  static const Command enum_value = Command_StartProto;
};

template<> struct CommandTraits<rewind_viewer::fbs::EndProto> {
  static const Command enum_value = Command_EndProto;
};

template<> struct CommandTraits<rewind_viewer::fbs::DrawProto> {
  static const Command enum_value = Command_DrawProto;
};

template<> struct CommandTraits<rewind_viewer::fbs::LogText> {
  static const Command enum_value = Command_LogText;
};

template<> struct CommandTraits<rewind_viewer::fbs::Popup> {
  static const Command enum_value = Command_Popup;
};

template<> struct CommandTraits<rewind_viewer::fbs::PopupRound> {
  static const Command enum_value = Command_PopupRound;
};

template<> struct CommandTraits<rewind_viewer::fbs::CameraView> {
  static const Command enum_value = Command_CameraView;
};

template<> struct CommandTraits<rewind_viewer::fbs::Text> {
  static const Command enum_value = Command_Text;
};

bool VerifyCommand(::flatbuffers::Verifier &verifier, const void *obj, Command type);
bool VerifyCommandVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct RewindMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RewindMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_COMMAND_TYPE = 4,
    VT_COMMAND = 6
  };
  rewind_viewer::fbs::Command command_type() const {
    return static_cast<rewind_viewer::fbs::Command>(GetField<uint8_t>(VT_COMMAND_TYPE, 0));
  }
  const void *command() const {
    return GetPointer<const void *>(VT_COMMAND);
  }
  template<typename T> const T *command_as() const;
  const rewind_viewer::fbs::Subscribe *command_as_Subscribe() const {
    return command_type() == rewind_viewer::fbs::Command_Subscribe ? static_cast<const rewind_viewer::fbs::Subscribe *>(command()) : nullptr;
  }
  const rewind_viewer::fbs::Unsubscribe *command_as_Unsubscribe() const {
    return command_type() == rewind_viewer::fbs::Command_Unsubscribe ? static_cast<const rewind_viewer::fbs::Unsubscribe *>(command()) : nullptr;
  }
  const rewind_viewer::fbs::CreateAction *command_as_CreateAction() const {
    return command_type() == rewind_viewer::fbs::Command_CreateAction ? static_cast<const rewind_viewer::fbs::CreateAction *>(command()) : nullptr;
  }
  const rewind_viewer::fbs::RemoveAction *command_as_RemoveAction() const {
    return command_type() == rewind_viewer::fbs::Command_RemoveAction ? static_cast<const rewind_viewer::fbs::RemoveAction *>(command()) : nullptr;
  }
  const rewind_viewer::fbs::ReadEvents *command_as_ReadEvents() const {
    return command_type() == rewind_viewer::fbs::Command_ReadEvents ? static_cast<const rewind_viewer::fbs::ReadEvents *>(command()) : nullptr;
  }
  const rewind_viewer::fbs::Layer *command_as_Layer() const {
    return command_type() == rewind_viewer::fbs::Command_Layer ? static_cast<const rewind_viewer::fbs::Layer *>(command()) : nullptr;
  }
  const rewind_viewer::fbs::Map *command_as_Map() const {
    return command_type() == rewind_viewer::fbs::Command_Map ? static_cast<const rewind_viewer::fbs::Map *>(command()) : nullptr;
  }
  const rewind_viewer::fbs::EndFrame *command_as_EndFrame() const {
    return command_type() == rewind_viewer::fbs::Command_EndFrame ? static_cast<const rewind_viewer::fbs::EndFrame *>(command()) : nullptr;
  }
  const rewind_viewer::fbs::Arc *command_as_Arc() const {
    return command_type() == rewind_viewer::fbs::Command_Arc ? static_cast<const rewind_viewer::fbs::Arc *>(command()) : nullptr;
  }
  const rewind_viewer::fbs::Circle *command_as_Circle() const {
    return command_type() == rewind_viewer::fbs::Command_Circle ? static_cast<const rewind_viewer::fbs::Circle *>(command()) : nullptr;
  }
  const rewind_viewer::fbs::CircleSegment *command_as_CircleSegment() const {
    return command_type() == rewind_viewer::fbs::Command_CircleSegment ? static_cast<const rewind_viewer::fbs::CircleSegment *>(command()) : nullptr;
  }
  const rewind_viewer::fbs::Polyline *command_as_Polyline() const {
    return command_type() == rewind_viewer::fbs::Command_Polyline ? static_cast<const rewind_viewer::fbs::Polyline *>(command()) : nullptr;
  }
  const rewind_viewer::fbs::Rectangle *command_as_Rectangle() const {
    return command_type() == rewind_viewer::fbs::Command_Rectangle ? static_cast<const rewind_viewer::fbs::Rectangle *>(command()) : nullptr;
  }
  const rewind_viewer::fbs::Tiles *command_as_Tiles() const {
    return command_type() == rewind_viewer::fbs::Command_Tiles ? static_cast<const rewind_viewer::fbs::Tiles *>(command()) : nullptr;
  }
  const rewind_viewer::fbs::Triangle *command_as_Triangle() const {
    return command_type() == rewind_viewer::fbs::Command_Triangle ? static_cast<const rewind_viewer::fbs::Triangle *>(command()) : nullptr;
  }
  const rewind_viewer::fbs::StartProto *command_as_StartProto() const {
    return command_type() == rewind_viewer::fbs::Command_StartProto ? static_cast<const rewind_viewer::fbs::StartProto *>(command()) : nullptr;
  }
  const rewind_viewer::fbs::EndProto *command_as_EndProto() const {
    return command_type() == rewind_viewer::fbs::Command_EndProto ? static_cast<const rewind_viewer::fbs::EndProto *>(command()) : nullptr;
  }
  const rewind_viewer::fbs::DrawProto *command_as_DrawProto() const {
    return command_type() == rewind_viewer::fbs::Command_DrawProto ? static_cast<const rewind_viewer::fbs::DrawProto *>(command()) : nullptr;
  }
  const rewind_viewer::fbs::LogText *command_as_LogText() const {
    return command_type() == rewind_viewer::fbs::Command_LogText ? static_cast<const rewind_viewer::fbs::LogText *>(command()) : nullptr;
  }
  const rewind_viewer::fbs::Popup *command_as_Popup() const {
    return command_type() == rewind_viewer::fbs::Command_Popup ? static_cast<const rewind_viewer::fbs::Popup *>(command()) : nullptr;
  }
  const rewind_viewer::fbs::PopupRound *command_as_PopupRound() const {
    return command_type() == rewind_viewer::fbs::Command_PopupRound ? static_cast<const rewind_viewer::fbs::PopupRound *>(command()) : nullptr;
  }
  const rewind_viewer::fbs::CameraView *command_as_CameraView() const {
    return command_type() == rewind_viewer::fbs::Command_CameraView ? static_cast<const rewind_viewer::fbs::CameraView *>(command()) : nullptr;
  }
  const rewind_viewer::fbs::Text *command_as_Text() const {
    return command_type() == rewind_viewer::fbs::Command_Text ? static_cast<const rewind_viewer::fbs::Text *>(command()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_COMMAND_TYPE, 1) &&
           VerifyOffsetRequired(verifier, VT_COMMAND) &&
           VerifyCommand(verifier, command(), command_type()) &&
           verifier.EndTable();
  }
};

template<> inline const rewind_viewer::fbs::Subscribe *RewindMessage::command_as<rewind_viewer::fbs::Subscribe>() const {
  return command_as_Subscribe();
}

template<> inline const rewind_viewer::fbs::Unsubscribe *RewindMessage::command_as<rewind_viewer::fbs::Unsubscribe>() const {
  return command_as_Unsubscribe();
}

template<> inline const rewind_viewer::fbs::CreateAction *RewindMessage::command_as<rewind_viewer::fbs::CreateAction>() const {
  return command_as_CreateAction();
}

template<> inline const rewind_viewer::fbs::RemoveAction *RewindMessage::command_as<rewind_viewer::fbs::RemoveAction>() const {
  return command_as_RemoveAction();
}

template<> inline const rewind_viewer::fbs::ReadEvents *RewindMessage::command_as<rewind_viewer::fbs::ReadEvents>() const {
  return command_as_ReadEvents();
}

template<> inline const rewind_viewer::fbs::Layer *RewindMessage::command_as<rewind_viewer::fbs::Layer>() const {
  return command_as_Layer();
}

template<> inline const rewind_viewer::fbs::Map *RewindMessage::command_as<rewind_viewer::fbs::Map>() const {
  return command_as_Map();
}

template<> inline const rewind_viewer::fbs::EndFrame *RewindMessage::command_as<rewind_viewer::fbs::EndFrame>() const {
  return command_as_EndFrame();
}

template<> inline const rewind_viewer::fbs::Arc *RewindMessage::command_as<rewind_viewer::fbs::Arc>() const {
  return command_as_Arc();
}

template<> inline const rewind_viewer::fbs::Circle *RewindMessage::command_as<rewind_viewer::fbs::Circle>() const {
  return command_as_Circle();
}

template<> inline const rewind_viewer::fbs::CircleSegment *RewindMessage::command_as<rewind_viewer::fbs::CircleSegment>() const {
  return command_as_CircleSegment();
}

template<> inline const rewind_viewer::fbs::Polyline *RewindMessage::command_as<rewind_viewer::fbs::Polyline>() const {
  return command_as_Polyline();
}

template<> inline const rewind_viewer::fbs::Rectangle *RewindMessage::command_as<rewind_viewer::fbs::Rectangle>() const {
  return command_as_Rectangle();
}

template<> inline const rewind_viewer::fbs::Tiles *RewindMessage::command_as<rewind_viewer::fbs::Tiles>() const {
  return command_as_Tiles();
}

template<> inline const rewind_viewer::fbs::Triangle *RewindMessage::command_as<rewind_viewer::fbs::Triangle>() const {
  return command_as_Triangle();
}

template<> inline const rewind_viewer::fbs::StartProto *RewindMessage::command_as<rewind_viewer::fbs::StartProto>() const {
  return command_as_StartProto();
}

template<> inline const rewind_viewer::fbs::EndProto *RewindMessage::command_as<rewind_viewer::fbs::EndProto>() const {
  return command_as_EndProto();
}

template<> inline const rewind_viewer::fbs::DrawProto *RewindMessage::command_as<rewind_viewer::fbs::DrawProto>() const {
  return command_as_DrawProto();
}

template<> inline const rewind_viewer::fbs::LogText *RewindMessage::command_as<rewind_viewer::fbs::LogText>() const {
  return command_as_LogText();
}

template<> inline const rewind_viewer::fbs::Popup *RewindMessage::command_as<rewind_viewer::fbs::Popup>() const {
  return command_as_Popup();
}

template<> inline const rewind_viewer::fbs::PopupRound *RewindMessage::command_as<rewind_viewer::fbs::PopupRound>() const {
  return command_as_PopupRound();
}

template<> inline const rewind_viewer::fbs::CameraView *RewindMessage::command_as<rewind_viewer::fbs::CameraView>() const {
  return command_as_CameraView();
}

template<> inline const rewind_viewer::fbs::Text *RewindMessage::command_as<rewind_viewer::fbs::Text>() const {
  return command_as_Text();
}

struct RewindMessageBuilder {
  typedef RewindMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_command_type(rewind_viewer::fbs::Command command_type) {
    fbb_.AddElement<uint8_t>(RewindMessage::VT_COMMAND_TYPE, static_cast<uint8_t>(command_type), 0);
  }
  void add_command(::flatbuffers::Offset<void> command) {
    fbb_.AddOffset(RewindMessage::VT_COMMAND, command);
  }
  explicit RewindMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RewindMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RewindMessage>(end);
    fbb_.Required(o, RewindMessage::VT_COMMAND);
    return o;
  }
};

inline ::flatbuffers::Offset<RewindMessage> CreateRewindMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    rewind_viewer::fbs::Command command_type = rewind_viewer::fbs::Command_NONE,
    ::flatbuffers::Offset<void> command = 0) {
  RewindMessageBuilder builder_(_fbb);
  builder_.add_command(command);
  builder_.add_command_type(command_type);
  return builder_.Finish();
}

inline bool VerifyCommand(::flatbuffers::Verifier &verifier, const void *obj, Command type) {
  switch (type) {
    case Command_NONE: {
      return true;
    }
    case Command_Subscribe: {
      auto ptr = reinterpret_cast<const rewind_viewer::fbs::Subscribe *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Command_Unsubscribe: {
      auto ptr = reinterpret_cast<const rewind_viewer::fbs::Unsubscribe *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Command_CreateAction: {
      auto ptr = reinterpret_cast<const rewind_viewer::fbs::CreateAction *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Command_RemoveAction: {
      auto ptr = reinterpret_cast<const rewind_viewer::fbs::RemoveAction *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Command_ReadEvents: {
      auto ptr = reinterpret_cast<const rewind_viewer::fbs::ReadEvents *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Command_Layer: {
      auto ptr = reinterpret_cast<const rewind_viewer::fbs::Layer *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Command_Map: {
      auto ptr = reinterpret_cast<const rewind_viewer::fbs::Map *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Command_EndFrame: {
      auto ptr = reinterpret_cast<const rewind_viewer::fbs::EndFrame *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Command_Arc: {
      auto ptr = reinterpret_cast<const rewind_viewer::fbs::Arc *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Command_Circle: {
      auto ptr = reinterpret_cast<const rewind_viewer::fbs::Circle *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Command_CircleSegment: {
      auto ptr = reinterpret_cast<const rewind_viewer::fbs::CircleSegment *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Command_Polyline: {
      auto ptr = reinterpret_cast<const rewind_viewer::fbs::Polyline *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Command_Rectangle: {
      auto ptr = reinterpret_cast<const rewind_viewer::fbs::Rectangle *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Command_Tiles: {
      auto ptr = reinterpret_cast<const rewind_viewer::fbs::Tiles *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Command_Triangle: {
      auto ptr = reinterpret_cast<const rewind_viewer::fbs::Triangle *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Command_StartProto: {
      auto ptr = reinterpret_cast<const rewind_viewer::fbs::StartProto *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Command_EndProto: {
      auto ptr = reinterpret_cast<const rewind_viewer::fbs::EndProto *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Command_DrawProto: {
      auto ptr = reinterpret_cast<const rewind_viewer::fbs::DrawProto *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Command_LogText: {
      auto ptr = reinterpret_cast<const rewind_viewer::fbs::LogText *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Command_Popup: {
      auto ptr = reinterpret_cast<const rewind_viewer::fbs::Popup *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Command_PopupRound: {
      auto ptr = reinterpret_cast<const rewind_viewer::fbs::PopupRound *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Command_CameraView: {
      auto ptr = reinterpret_cast<const rewind_viewer::fbs::CameraView *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Command_Text: {
      auto ptr = reinterpret_cast<const rewind_viewer::fbs::Text *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyCommandVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyCommand(
        verifier,  values->Get(i), types->GetEnum<Command>(i))) {
      return false;
    }
  }
  return true;
}

inline const rewind_viewer::fbs::RewindMessage *GetRewindMessage(const void *buf) {
  return ::flatbuffers::GetRoot<rewind_viewer::fbs::RewindMessage>(buf);
}

inline const rewind_viewer::fbs::RewindMessage *GetSizePrefixedRewindMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<rewind_viewer::fbs::RewindMessage>(buf);
}

inline bool VerifyRewindMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<rewind_viewer::fbs::RewindMessage>(nullptr);
}

inline bool VerifySizePrefixedRewindMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<rewind_viewer::fbs::RewindMessage>(nullptr);
}

inline void FinishRewindMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<rewind_viewer::fbs::RewindMessage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRewindMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<rewind_viewer::fbs::RewindMessage> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace fbs
}  // namespace rewind_viewer

#endif  // FLATBUFFERS_GENERATED_REWINDMESSAGE_REWIND_VIEWER_FBS_H_
