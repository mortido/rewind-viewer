// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AUXILIARY_REWIND_VIEWER_FBS_H_
#define FLATBUFFERS_GENERATED_AUXILIARY_REWIND_VIEWER_FBS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "vector2f.fbs.h"

namespace rewind_viewer {
namespace fbs {

struct Layer;
struct LayerBuilder;

struct Map;
struct MapBuilder;

struct EndFrame;
struct EndFrameBuilder;

enum LayerOrigin : int8_t {
  LayerOrigin_GAME = 0,
  LayerOrigin_LEFT_TOP = 1,
  LayerOrigin_LEFT_CENTER = 2,
  LayerOrigin_LEFT_BOTTOM = 3,
  LayerOrigin_RIGHT_TOP = 4,
  LayerOrigin_RIGHT_CENTER = 5,
  LayerOrigin_RIGHT_BOTTOM = 6,
  LayerOrigin_TOP_CENTER = 7,
  LayerOrigin_BOTTOM_CENTER = 8,
  LayerOrigin_MIN = LayerOrigin_GAME,
  LayerOrigin_MAX = LayerOrigin_BOTTOM_CENTER
};

inline const LayerOrigin (&EnumValuesLayerOrigin())[9] {
  static const LayerOrigin values[] = {
    LayerOrigin_GAME,
    LayerOrigin_LEFT_TOP,
    LayerOrigin_LEFT_CENTER,
    LayerOrigin_LEFT_BOTTOM,
    LayerOrigin_RIGHT_TOP,
    LayerOrigin_RIGHT_CENTER,
    LayerOrigin_RIGHT_BOTTOM,
    LayerOrigin_TOP_CENTER,
    LayerOrigin_BOTTOM_CENTER
  };
  return values;
}

inline const char * const *EnumNamesLayerOrigin() {
  static const char * const names[10] = {
    "GAME",
    "LEFT_TOP",
    "LEFT_CENTER",
    "LEFT_BOTTOM",
    "RIGHT_TOP",
    "RIGHT_CENTER",
    "RIGHT_BOTTOM",
    "TOP_CENTER",
    "BOTTOM_CENTER",
    nullptr
  };
  return names;
}

inline const char *EnumNameLayerOrigin(LayerOrigin e) {
  if (::flatbuffers::IsOutRange(e, LayerOrigin_GAME, LayerOrigin_BOTTOM_CENTER)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLayerOrigin()[index];
}

struct Layer FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LayerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_USE_PERMANENT_FRAME = 8,
    VT_ORIGIN = 10
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  bool use_permanent_frame() const {
    return GetField<uint8_t>(VT_USE_PERMANENT_FRAME, 0) != 0;
  }
  rewind_viewer::fbs::LayerOrigin origin() const {
    return static_cast<rewind_viewer::fbs::LayerOrigin>(GetField<int8_t>(VT_ORIGIN, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_USE_PERMANENT_FRAME, 1) &&
           VerifyField<int8_t>(verifier, VT_ORIGIN, 1) &&
           verifier.EndTable();
  }
};

struct LayerBuilder {
  typedef Layer Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(Layer::VT_ID, id, 0);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Layer::VT_NAME, name);
  }
  void add_use_permanent_frame(bool use_permanent_frame) {
    fbb_.AddElement<uint8_t>(Layer::VT_USE_PERMANENT_FRAME, static_cast<uint8_t>(use_permanent_frame), 0);
  }
  void add_origin(rewind_viewer::fbs::LayerOrigin origin) {
    fbb_.AddElement<int8_t>(Layer::VT_ORIGIN, static_cast<int8_t>(origin), 0);
  }
  explicit LayerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Layer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Layer>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Layer> CreateLayer(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    bool use_permanent_frame = false,
    rewind_viewer::fbs::LayerOrigin origin = rewind_viewer::fbs::LayerOrigin_GAME) {
  LayerBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_id(id);
  builder_.add_origin(origin);
  builder_.add_use_permanent_frame(use_permanent_frame);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Layer> CreateLayerDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    const char *name = nullptr,
    bool use_permanent_frame = false,
    rewind_viewer::fbs::LayerOrigin origin = rewind_viewer::fbs::LayerOrigin_GAME) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return rewind_viewer::fbs::CreateLayer(
      _fbb,
      id,
      name__,
      use_permanent_frame,
      origin);
}

struct Map FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MapBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4,
    VT_SIZE = 6,
    VT_X_GRID = 8,
    VT_Y_GRID = 10
  };
  const rewind_viewer::fbs::Vector2f *position() const {
    return GetStruct<const rewind_viewer::fbs::Vector2f *>(VT_POSITION);
  }
  const rewind_viewer::fbs::Vector2f *size() const {
    return GetStruct<const rewind_viewer::fbs::Vector2f *>(VT_SIZE);
  }
  uint16_t x_grid() const {
    return GetField<uint16_t>(VT_X_GRID, 0);
  }
  uint16_t y_grid() const {
    return GetField<uint16_t>(VT_Y_GRID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyFieldRequired<rewind_viewer::fbs::Vector2f>(verifier, VT_POSITION, 4) &&
           VerifyFieldRequired<rewind_viewer::fbs::Vector2f>(verifier, VT_SIZE, 4) &&
           VerifyField<uint16_t>(verifier, VT_X_GRID, 2) &&
           VerifyField<uint16_t>(verifier, VT_Y_GRID, 2) &&
           verifier.EndTable();
  }
};

struct MapBuilder {
  typedef Map Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_position(const rewind_viewer::fbs::Vector2f *position) {
    fbb_.AddStruct(Map::VT_POSITION, position);
  }
  void add_size(const rewind_viewer::fbs::Vector2f *size) {
    fbb_.AddStruct(Map::VT_SIZE, size);
  }
  void add_x_grid(uint16_t x_grid) {
    fbb_.AddElement<uint16_t>(Map::VT_X_GRID, x_grid, 0);
  }
  void add_y_grid(uint16_t y_grid) {
    fbb_.AddElement<uint16_t>(Map::VT_Y_GRID, y_grid, 0);
  }
  explicit MapBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Map> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Map>(end);
    fbb_.Required(o, Map::VT_POSITION);
    fbb_.Required(o, Map::VT_SIZE);
    return o;
  }
};

inline ::flatbuffers::Offset<Map> CreateMap(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const rewind_viewer::fbs::Vector2f *position = nullptr,
    const rewind_viewer::fbs::Vector2f *size = nullptr,
    uint16_t x_grid = 0,
    uint16_t y_grid = 0) {
  MapBuilder builder_(_fbb);
  builder_.add_size(size);
  builder_.add_position(position);
  builder_.add_y_grid(y_grid);
  builder_.add_x_grid(x_grid);
  return builder_.Finish();
}

struct EndFrame FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EndFrameBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct EndFrameBuilder {
  typedef EndFrame Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit EndFrameBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EndFrame> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EndFrame>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EndFrame> CreateEndFrame(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  EndFrameBuilder builder_(_fbb);
  return builder_.Finish();
}

}  // namespace fbs
}  // namespace rewind_viewer

#endif  // FLATBUFFERS_GENERATED_AUXILIARY_REWIND_VIEWER_FBS_H_
